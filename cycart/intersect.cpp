/* Generated by Cython 0.29.3 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_3"
#define CYTHON_HEX_VERSION 0x001D03F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_USE_DICT_VERSIONS
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
        static PY_UINT64_T __pyx_dict_version = 0;\
        static PyObject *__pyx_dict_cached_value = NULL;\
        if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
            (VAR) = __pyx_dict_cached_value;\
        } else {\
            (VAR) = __pyx_dict_cached_value = (LOOKUP);\
            __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
        }\
    }
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cycart__intersect
#define __PYX_HAVE_API__cycart__intersect
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "cycart/intersect.pyx",
  "cycart/native/util.pxd",
  "cycart/native/space.pxd",
  "cycart/space.pxd",
  "cycart/intersect.pxd",
  "cycart/native/line.pxd",
  "cycart/native/segment.pxd",
  "cycart/native/circle.pxd",
  "cycart/native/does_intersect.pxd",
  "cycart/native/intersect.pxd",
  "cycart/circle.pxd",
  "cycart/line.pxd",
  "cycart/segment.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_6cycart_5space_R2;
struct __pyx_obj_6cycart_5space_V2;
struct __pyx_obj_6cycart_5space_P2;
struct __pyx_obj_6cycart_6circle_Circle;
struct __pyx_obj_6cycart_4line_Line;
struct __pyx_obj_6cycart_7segment_LineSegment;
struct __pyx_t_6cycart_6native_6dtypes__R2;
struct __pyx_t_6cycart_6native_6dtypes__Line;
struct __pyx_t_6cycart_6native_6dtypes__LineSegment;
struct __pyx_t_6cycart_6native_6dtypes__Circle;

/* "cycart/native/dtypes.pxd":8
 * #    return _I2(data.x, data.y)
 * 
 * cdef struct _R2:             # <<<<<<<<<<<<<<
 *     double x
 *     double y
 */
struct __pyx_t_6cycart_6native_6dtypes__R2 {
  double x;
  double y;
};

/* "cycart/native/dtypes.pxd":12
 *     double y
 * 
 * cdef struct _Line:             # <<<<<<<<<<<<<<
 *     double a
 *     double b
 */
struct __pyx_t_6cycart_6native_6dtypes__Line {
  double a;
  double b;
  double c;
};

/* "cycart/native/dtypes.pxd":17
 *     double c
 * 
 * cdef struct _LineSegment:             # <<<<<<<<<<<<<<
 *     _R2 p1
 *     _R2 p2
 */
struct __pyx_t_6cycart_6native_6dtypes__LineSegment {
  struct __pyx_t_6cycart_6native_6dtypes__R2 p1;
  struct __pyx_t_6cycart_6native_6dtypes__R2 p2;
};

/* "cycart/native/dtypes.pxd":21
 *     _R2 p2
 * 
 * cdef struct _Circle:             # <<<<<<<<<<<<<<
 *     _R2 center
 *     double radius
 */
struct __pyx_t_6cycart_6native_6dtypes__Circle {
  struct __pyx_t_6cycart_6native_6dtypes__R2 center;
  double radius;
};
struct __pyx_opt_args_6cycart_6native_4util_fapprox;

/* "util.pxd":3
 * from libc.math cimport fmax, fabs
 * 
 * cdef inline bint fapprox(double a, double b, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     cdef epsilon
 *     epsilon = fmax(atol, rtol * fmax(1, fmax(a, b)))
 */
struct __pyx_opt_args_6cycart_6native_4util_fapprox {
  int __pyx_n;
  double rtol;
  PyObject *atol;
};
struct __pyx_opt_args_6cycart_6native_5space_r2_parallel;
struct __pyx_opt_args_6cycart_6native_5space_r2_orthogonal;
struct __pyx_opt_args_6cycart_6native_5space_r2_approx;

/* "cycart/native/space.pxd":54
 *     return (p2.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (p2.y - p1.y)
 * 
 * cdef inline bint r2_parallel(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(r2_cross(lhs, rhs), 0, rtol, atol)
 * 
 */
struct __pyx_opt_args_6cycart_6native_5space_r2_parallel {
  int __pyx_n;
  double rtol;
  double atol;
};

/* "cycart/native/space.pxd":57
 *     return fapprox(r2_cross(lhs, rhs), 0, rtol, atol)
 * 
 * cdef inline bint r2_orthogonal(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(r2_dot(lhs, rhs), 0, rtol, atol)
 * 
 */
struct __pyx_opt_args_6cycart_6native_5space_r2_orthogonal {
  int __pyx_n;
  double rtol;
  double atol;
};

/* "cycart/native/space.pxd":60
 *     return fapprox(r2_dot(lhs, rhs), 0, rtol, atol)
 * 
 * cdef inline bint r2_approx(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(lhs.x, rhs.x, rtol, atol) and fapprox(lhs.y, rhs.y, rtol, atol)
 * 
 */
struct __pyx_opt_args_6cycart_6native_5space_r2_approx {
  int __pyx_n;
  double rtol;
  double atol;
};
struct __pyx_opt_args_6cycart_6native_4line_l2_approx;
struct __pyx_opt_args_6cycart_6native_4line_l2_contains_point;

/* "line.pxd":31
 * 
 * 
 * cdef inline bint l2_approx(const _Line& l1, const _Line& l2, rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(l1.a, l2.a, rtol, atol) and fapprox(l1.b, l2.b, rtol, atol) and fapprox(l1.c, l2.c, rtol, atol)
 * 
 */
struct __pyx_opt_args_6cycart_6native_4line_l2_approx {
  int __pyx_n;
  PyObject *rtol;
  PyObject *atol;
};

/* "line.pxd":45
 * 
 * 
 * cdef inline bint l2_contains_point(const _Line& line, const _R2& point, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(l2_constant(line, point), line.c, rtol, atol)
 * 
 */
struct __pyx_opt_args_6cycart_6native_4line_l2_contains_point {
  int __pyx_n;
  double rtol;
  double atol;
};
struct __pyx_opt_args_6cycart_6native_7segment_ls2_contains;
struct __pyx_opt_args_6cycart_6native_7segment_ls2_approx;

/* "segment.pxd":40
 *     return 0 < r2_dot(ref_vector, test_vector) < r2_dot(ref_vector, ref_vector)
 * 
 * cdef inline bint ls2_contains(const _LineSegment& segment, const _R2& point, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     if ls2_contains_strict(segment, point):
 *         return 1
 */
struct __pyx_opt_args_6cycart_6native_7segment_ls2_contains {
  int __pyx_n;
  double rtol;
  PyObject *atol;
};

/* "segment.pxd":49
 *     return 0
 * 
 * cdef inline bint ls2_approx(const _LineSegment& lhs, const _LineSegment& rhs, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     cdef _LineSegment norm1 = ls2_normalized(lhs)
 *     cdef _LineSegment norm2 = ls2_normalized(rhs)
 */
struct __pyx_opt_args_6cycart_6native_7segment_ls2_approx {
  int __pyx_n;
  double rtol;
  PyObject *atol;
};
struct __pyx_opt_args_6cycart_6native_6circle_c2_on_perimeter;
struct __pyx_opt_args_6cycart_6native_6circle_c2_approx;

/* "circle.pxd":30
 *     return 2 * pi * circle.radius
 * 
 * cdef inline bint c2_on_perimeter(const _Circle& circle, const _R2& point, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(c2_constant(circle, point), circle.radius ** 2, rtol, atol)
 * 
 */
struct __pyx_opt_args_6cycart_6native_6circle_c2_on_perimeter {
  int __pyx_n;
  double rtol;
  PyObject *atol;
};

/* "circle.pxd":39
 *     return _Circle(r2_add(circle.center, point), circle.radius)
 * 
 * cdef inline bint c2_approx(const _Circle& c1, const _Circle& c2, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(c1.radius, c2.radius, rtol, atol) and r2_approx(c1.center, c2.center, rtol, atol)
 */
struct __pyx_opt_args_6cycart_6native_6circle_c2_approx {
  int __pyx_n;
  double rtol;
  PyObject *atol;
};

/* "does_intersect.pxd":10
 * from .segment cimport ls2_approx, ls2_normalized
 * 
 * cdef enum IRES:             # <<<<<<<<<<<<<<
 *     ERROR = -1
 *     NO = 0
 */
enum __pyx_t_6cycart_6native_14does_intersect_IRES {
  __pyx_e_6cycart_6native_14does_intersect_ERROR = -1L,
  __pyx_e_6cycart_6native_14does_intersect_NO = 0,
  __pyx_e_6cycart_6native_14does_intersect_YES = 1
};

/* "cycart/space.pxd":3
 * from cycart.native.space cimport _R2, r2_add, r2_sub
 * 
 * cdef class R2:             # <<<<<<<<<<<<<<
 *     cdef _R2 data
 * 
 */
struct __pyx_obj_6cycart_5space_R2 {
  PyObject_HEAD
  struct __pyx_t_6cycart_6native_6dtypes__R2 data;
};


/* "cycart/space.pxd":6
 *     cdef _R2 data
 * 
 * cdef class V2(R2):             # <<<<<<<<<<<<<<
 * 
 *     cpdef P2 point(V2 self)
 */
struct __pyx_obj_6cycart_5space_V2 {
  struct __pyx_obj_6cycart_5space_R2 __pyx_base;
  struct __pyx_vtabstruct_6cycart_5space_V2 *__pyx_vtab;
};


/* "cycart/space.pxd":10
 *     cpdef P2 point(V2 self)
 * 
 * cdef class P2(R2):             # <<<<<<<<<<<<<<
 * 
 *     cpdef V2 vector(P2 self)
 */
struct __pyx_obj_6cycart_5space_P2 {
  struct __pyx_obj_6cycart_5space_R2 __pyx_base;
  struct __pyx_vtabstruct_6cycart_5space_P2 *__pyx_vtab;
};


/* "cycart/circle.pxd":3
 * from cycart.native.dtypes cimport _Circle
 * 
 * cdef class Circle:             # <<<<<<<<<<<<<<
 *     cdef _Circle data
 * 
 */
struct __pyx_obj_6cycart_6circle_Circle {
  PyObject_HEAD
  struct __pyx_t_6cycart_6native_6dtypes__Circle data;
};


/* "cycart/line.pxd":3
 * from cycart.native.line cimport _Line
 * 
 * cdef class Line:             # <<<<<<<<<<<<<<
 *     cdef _Line data
 * 
 */
struct __pyx_obj_6cycart_4line_Line {
  PyObject_HEAD
  struct __pyx_t_6cycart_6native_6dtypes__Line data;
};


/* "cycart/segment.pxd":3
 * from cycart.native.dtypes cimport _LineSegment
 * 
 * cdef class LineSegment:             # <<<<<<<<<<<<<<
 *     cdef _LineSegment data
 * 
 */
struct __pyx_obj_6cycart_7segment_LineSegment {
  PyObject_HEAD
  struct __pyx_t_6cycart_6native_6dtypes__LineSegment data;
};



/* "cycart/space.pxd":6
 *     cdef _R2 data
 * 
 * cdef class V2(R2):             # <<<<<<<<<<<<<<
 * 
 *     cpdef P2 point(V2 self)
 */

struct __pyx_vtabstruct_6cycart_5space_V2 {
  struct __pyx_obj_6cycart_5space_P2 *(*point)(struct __pyx_obj_6cycart_5space_V2 *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6cycart_5space_V2 *__pyx_vtabptr_6cycart_5space_V2;


/* "cycart/space.pxd":10
 *     cpdef P2 point(V2 self)
 * 
 * cdef class P2(R2):             # <<<<<<<<<<<<<<
 * 
 *     cpdef V2 vector(P2 self)
 */

struct __pyx_vtabstruct_6cycart_5space_P2 {
  struct __pyx_obj_6cycart_5space_V2 *(*vector)(struct __pyx_obj_6cycart_5space_P2 *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6cycart_5space_P2 *__pyx_vtabptr_6cycart_5space_P2;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

struct __pyx_t_6cycart_6native_6dtypes__R2;
static PyObject* __pyx_convert__to_py_struct____pyx_t_6cycart_6native_6dtypes__R2(struct __pyx_t_6cycart_6native_6dtypes__R2 s);
/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE enum __pyx_t_6cycart_6native_14does_intersect_IRES __Pyx_PyInt_As_enum____pyx_t_6cycart_6native_14does_intersect_IRES(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'cycart.native.dtypes' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'cycart.native.util' */
static CYTHON_INLINE int __pyx_f_6cycart_6native_4util_fapprox(double, double, struct __pyx_opt_args_6cycart_6native_4util_fapprox *__pyx_optional_args); /*proto*/

/* Module declarations from 'cycart.native.space' */
static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_neg(struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_add(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_sub(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_mul(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, double); /*proto*/
static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_rotate(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, double); /*proto*/
static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_rotate_around(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &, double); /*proto*/
static CYTHON_INLINE double __pyx_f_6cycart_6native_5space_r2_cross(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE double __pyx_f_6cycart_6native_5space_r2_dot(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE double __pyx_f_6cycart_6native_5space_r2_magnitude(struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE double __pyx_f_6cycart_6native_5space_r2_distance(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE double __pyx_f_6cycart_6native_5space_r2_ccw(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_parallel(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_opt_args_6cycart_6native_5space_r2_parallel *__pyx_optional_args); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_approx(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_opt_args_6cycart_6native_5space_r2_approx *__pyx_optional_args); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_cmp_points(struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_ref_div(struct __pyx_t_6cycart_6native_6dtypes__R2 &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &, double); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_ref_unit(struct __pyx_t_6cycart_6native_6dtypes__R2 &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_ref_vector_angle(double &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/

/* Module declarations from 'cycart.space' */
static PyTypeObject *__pyx_ptype_6cycart_5space_R2 = 0;
static PyTypeObject *__pyx_ptype_6cycart_5space_V2 = 0;
static PyTypeObject *__pyx_ptype_6cycart_5space_P2 = 0;
static CYTHON_INLINE struct __pyx_obj_6cycart_5space_V2 *__pyx_f_6cycart_5space_py_v2_new(struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE struct __pyx_obj_6cycart_5space_P2 *__pyx_f_6cycart_5space_py_p2_new(struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE void __pyx_f_6cycart_5space_p2_extract(struct __pyx_t_6cycart_6native_6dtypes__R2 &, struct __pyx_obj_6cycart_5space_P2 *); /*proto*/
static CYTHON_INLINE void __pyx_f_6cycart_5space_v2_extract(struct __pyx_t_6cycart_6native_6dtypes__R2 &, struct __pyx_obj_6cycart_5space_V2 *); /*proto*/

/* Module declarations from 'cycart.native.line' */
static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_point_on_side(struct __pyx_t_6cycart_6native_6dtypes__Line const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE double __pyx_f_6cycart_6native_4line_l2_constant(struct __pyx_t_6cycart_6native_6dtypes__Line const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_approx(struct __pyx_t_6cycart_6native_6dtypes__Line const &, struct __pyx_t_6cycart_6native_6dtypes__Line const &, struct __pyx_opt_args_6cycart_6native_4line_l2_approx *__pyx_optional_args); /*proto*/
static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_4line_l2_closest_point(struct __pyx_t_6cycart_6native_6dtypes__Line const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_normalize(struct __pyx_t_6cycart_6native_6dtypes__Line &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_by_points(struct __pyx_t_6cycart_6native_6dtypes__Line &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_translate(struct __pyx_t_6cycart_6native_6dtypes__Line &, struct __pyx_t_6cycart_6native_6dtypes__Line const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_perpendicular(struct __pyx_t_6cycart_6native_6dtypes__Line &, struct __pyx_t_6cycart_6native_6dtypes__Line const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_l2_intersect(struct __pyx_t_6cycart_6native_6dtypes__R2 &, struct __pyx_t_6cycart_6native_6dtypes__Line const &, struct __pyx_t_6cycart_6native_6dtypes__Line const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_f_of_y(double &, struct __pyx_t_6cycart_6native_6dtypes__Line const &, double); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_f_of_x(double &, struct __pyx_t_6cycart_6native_6dtypes__Line const &, double); /*proto*/

/* Module declarations from 'cycart.native.segment' */
static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_f_6cycart_6native_7segment_ls2_normalized(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_7segment_ls2_contains_strict(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_7segment_ls2_contains(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &, struct __pyx_opt_args_6cycart_6native_7segment_ls2_contains *__pyx_optional_args); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_7segment_ls2_approx(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &, struct __pyx_opt_args_6cycart_6native_7segment_ls2_approx *__pyx_optional_args); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_7segment_ls2_overlaps(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &); /*proto*/
static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_7segment_ls2_vector(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &); /*proto*/

/* Module declarations from 'cycart.native.circle' */
static CYTHON_INLINE double __pyx_f_6cycart_6native_6circle_c2_constant(struct __pyx_t_6cycart_6native_6dtypes__Circle const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_6circle_c2_contains(struct __pyx_t_6cycart_6native_6dtypes__Circle const &, struct __pyx_t_6cycart_6native_6dtypes__R2 const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_6circle_c2_approx(struct __pyx_t_6cycart_6native_6dtypes__Circle const &, struct __pyx_t_6cycart_6native_6dtypes__Circle const &, struct __pyx_opt_args_6cycart_6native_6circle_c2_approx *__pyx_optional_args); /*proto*/

/* Module declarations from 'cycart.native.does_intersect' */
static CYTHON_INLINE enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_f_6cycart_6native_14does_intersect_c2_c2_does_intersect(struct __pyx_t_6cycart_6native_6dtypes__Circle const &, struct __pyx_t_6cycart_6native_6dtypes__Circle const &); /*proto*/

/* Module declarations from 'cycart.native.intersect' */
static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_l2_l2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &, struct __pyx_t_6cycart_6native_6dtypes__Line const &, struct __pyx_t_6cycart_6native_6dtypes__Line const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_c2_c2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &, struct __pyx_t_6cycart_6native_6dtypes__Circle const &, struct __pyx_t_6cycart_6native_6dtypes__Circle const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_ls2_ls2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_ls2_c2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &, struct __pyx_t_6cycart_6native_6dtypes__Circle const ); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_ls2_l2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &, struct __pyx_t_6cycart_6native_6dtypes__Line const ); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_l2_c2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &, struct __pyx_t_6cycart_6native_6dtypes__Line const &, struct __pyx_t_6cycart_6native_6dtypes__Circle const ); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_l2_l2_intersect(struct __pyx_t_6cycart_6native_6dtypes__R2 &, struct __pyx_t_6cycart_6native_6dtypes__Line const &, struct __pyx_t_6cycart_6native_6dtypes__Line const &); /*proto*/
static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_ls2_ls2_intersect(struct __pyx_t_6cycart_6native_6dtypes__R2 &, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const , struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &); /*proto*/

/* Module declarations from 'cycart.circle' */
static PyTypeObject *__pyx_ptype_6cycart_6circle_Circle = 0;

/* Module declarations from 'cycart.line' */
static PyTypeObject *__pyx_ptype_6cycart_4line_Line = 0;

/* Module declarations from 'cycart.segment' */
static PyTypeObject *__pyx_ptype_6cycart_7segment_LineSegment = 0;

/* Module declarations from 'cycart.intersect' */
static CYTHON_INLINE PyObject *__pyx_f_6cycart_9intersect_py_p2_set_new(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &); /*proto*/
static PyObject *__pyx_f_6cycart_9intersect_py_ls2_l2_intersect(struct __pyx_obj_6cycart_7segment_LineSegment *, struct __pyx_obj_6cycart_4line_Line *); /*proto*/
static PyObject *__pyx_f_6cycart_9intersect_py_ls2_c2_intersect(struct __pyx_obj_6cycart_7segment_LineSegment *, struct __pyx_obj_6cycart_6circle_Circle *); /*proto*/
static PyObject *__pyx_f_6cycart_9intersect_py_l2_c2_intersect(struct __pyx_obj_6cycart_4line_Line *, struct __pyx_obj_6cycart_6circle_Circle *); /*proto*/
#define __Pyx_MODULE_NAME "cycart.intersect"
extern int __pyx_module_is_main_cycart__intersect;
int __pyx_module_is_main_cycart__intersect = 0;

/* Implementation of 'cycart.intersect' */
static PyObject *__pyx_builtin_ValueError;
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_c1[] = "c1";
static const char __pyx_k_c2[] = "c2";
static const char __pyx_k_l1[] = "l1";
static const char __pyx_k_l2[] = "l2";
static const char __pyx_k_p1[] = "p1";
static const char __pyx_k_p2[] = "p2";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_ls1[] = "ls1";
static const char __pyx_k_ls2[] = "ls2";
static const char __pyx_k_seg[] = "seg";
static const char __pyx_k_Line[] = "Line";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Circle[] = "Circle";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_circle[] = "circle";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_collect[] = "collect";
static const char __pyx_k_intersect[] = "intersect";
static const char __pyx_k_Dispatcher[] = "Dispatcher";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_dispatcher[] = "dispatcher";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_LineSegment[] = "LineSegment";
static const char __pyx_k_cycart_line[] = "cycart.line";
static const char __pyx_k_cycart_circle[] = "cycart.circle";
static const char __pyx_k_cycart_segment[] = "cycart.segment";
static const char __pyx_k_cycart_intersect[] = "cycart.intersect";
static const char __pyx_k_multipledispatch[] = "multipledispatch";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_cycart_intersect_pyx[] = "cycart/intersect.pyx";
static PyObject *__pyx_n_s_Circle;
static PyObject *__pyx_n_s_Dispatcher;
static PyObject *__pyx_n_s_Line;
static PyObject *__pyx_n_s_LineSegment;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_c1;
static PyObject *__pyx_n_s_c2;
static PyObject *__pyx_n_s_center;
static PyObject *__pyx_n_s_circle;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_collect;
static PyObject *__pyx_n_s_cycart_circle;
static PyObject *__pyx_n_s_cycart_intersect;
static PyObject *__pyx_kp_s_cycart_intersect_pyx;
static PyObject *__pyx_n_s_cycart_line;
static PyObject *__pyx_n_s_cycart_segment;
static PyObject *__pyx_n_s_dispatcher;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_intersect;
static PyObject *__pyx_n_s_l1;
static PyObject *__pyx_n_s_l2;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_ls1;
static PyObject *__pyx_n_s_ls2;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_multipledispatch;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_p1;
static PyObject *__pyx_n_s_p2;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_seg;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_pf_6cycart_9intersect_intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_4line_Line *__pyx_v_l1, struct __pyx_obj_6cycart_4line_Line *__pyx_v_l2); /* proto */
static PyObject *__pyx_pf_6cycart_9intersect_2intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_ls1, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_ls2); /* proto */
static PyObject *__pyx_pf_6cycart_9intersect_4intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_c1, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_c2); /* proto */
static PyObject *__pyx_pf_6cycart_9intersect_6intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_4line_Line *__pyx_v_line, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg); /* proto */
static PyObject *__pyx_pf_6cycart_9intersect_8intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg, struct __pyx_obj_6cycart_4line_Line *__pyx_v_line); /* proto */
static PyObject *__pyx_pf_6cycart_9intersect_10intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle); /* proto */
static PyObject *__pyx_pf_6cycart_9intersect_12intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg); /* proto */
static PyObject *__pyx_pf_6cycart_9intersect_14intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_4line_Line *__pyx_v_line, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle); /* proto */
static PyObject *__pyx_pf_6cycart_9intersect_16intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle, struct __pyx_obj_6cycart_4line_Line *__pyx_v_line); /* proto */
static PyObject *__pyx_float_1eneg_9;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_2;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
/* Late includes */

/* "cycart/intersect.pyx":21
 * 
 * 
 * def intersect(Line l1 not None, Line l2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.l2_l2_intersect_set(collect, l1.data, l2.data):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cycart_9intersect_1intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cycart_9intersect_1intersect = {"intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6cycart_9intersect_1intersect, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6cycart_9intersect_1intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6cycart_4line_Line *__pyx_v_l1 = 0;
  struct __pyx_obj_6cycart_4line_Line *__pyx_v_l2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_l1,&__pyx_n_s_l2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, 1); __PYX_ERR(0, 21, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "intersect") < 0)) __PYX_ERR(0, 21, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_l1 = ((struct __pyx_obj_6cycart_4line_Line *)values[0]);
    __pyx_v_l2 = ((struct __pyx_obj_6cycart_4line_Line *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 21, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_l1), __pyx_ptype_6cycart_4line_Line, 0, "l1", 0))) __PYX_ERR(0, 21, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_l2), __pyx_ptype_6cycart_4line_Line, 0, "l2", 0))) __PYX_ERR(0, 21, __pyx_L1_error)
  __pyx_r = __pyx_pf_6cycart_9intersect_intersect(__pyx_self, __pyx_v_l1, __pyx_v_l2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cycart_9intersect_intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_4line_Line *__pyx_v_l1, struct __pyx_obj_6cycart_4line_Line *__pyx_v_l2) {
  std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  __pyx_v_collect;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "cycart/intersect.pyx":23
 * def intersect(Line l1 not None, Line l2 not None):
 *     cdef vector[_R2] collect
 *     if not cni.l2_l2_intersect_set(collect, l1.data, l2.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_9intersect_l2_l2_intersect_set(__pyx_v_collect, __pyx_v_l1->data, __pyx_v_l2->data) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cycart/intersect.pyx":24
 *     cdef vector[_R2] collect
 *     if not cni.l2_l2_intersect_set(collect, l1.data, l2.data):
 *         raise ValueError()             # <<<<<<<<<<<<<<
 *     return py_p2_set_new(collect)
 * dispatcher.add((Line, Line), intersect)
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 24, __pyx_L1_error)

    /* "cycart/intersect.pyx":23
 * def intersect(Line l1 not None, Line l2 not None):
 *     cdef vector[_R2] collect
 *     if not cni.l2_l2_intersect_set(collect, l1.data, l2.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  }

  /* "cycart/intersect.pyx":25
 *     if not cni.l2_l2_intersect_set(collect, l1.data, l2.data):
 *         raise ValueError()
 *     return py_p2_set_new(collect)             # <<<<<<<<<<<<<<
 * dispatcher.add((Line, Line), intersect)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6cycart_9intersect_py_p2_set_new(__pyx_v_collect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":21
 * 
 * 
 * def intersect(Line l1 not None, Line l2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.l2_l2_intersect_set(collect, l1.data, l2.data):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/intersect.pyx":28
 * dispatcher.add((Line, Line), intersect)
 * 
 * def intersect(LineSegment ls1 not None, LineSegment ls2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.ls2_ls2_intersect_set(collect, ls1.data, ls2.data):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cycart_9intersect_3intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cycart_9intersect_3intersect = {"intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6cycart_9intersect_3intersect, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6cycart_9intersect_3intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_ls1 = 0;
  struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_ls2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ls1,&__pyx_n_s_ls2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ls1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ls2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, 1); __PYX_ERR(0, 28, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "intersect") < 0)) __PYX_ERR(0, 28, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ls1 = ((struct __pyx_obj_6cycart_7segment_LineSegment *)values[0]);
    __pyx_v_ls2 = ((struct __pyx_obj_6cycart_7segment_LineSegment *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ls1), __pyx_ptype_6cycart_7segment_LineSegment, 0, "ls1", 0))) __PYX_ERR(0, 28, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ls2), __pyx_ptype_6cycart_7segment_LineSegment, 0, "ls2", 0))) __PYX_ERR(0, 28, __pyx_L1_error)
  __pyx_r = __pyx_pf_6cycart_9intersect_2intersect(__pyx_self, __pyx_v_ls1, __pyx_v_ls2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cycart_9intersect_2intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_ls1, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_ls2) {
  std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  __pyx_v_collect;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "cycart/intersect.pyx":30
 * def intersect(LineSegment ls1 not None, LineSegment ls2 not None):
 *     cdef vector[_R2] collect
 *     if not cni.ls2_ls2_intersect_set(collect, ls1.data, ls2.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_9intersect_ls2_ls2_intersect_set(__pyx_v_collect, __pyx_v_ls1->data, __pyx_v_ls2->data) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cycart/intersect.pyx":31
 *     cdef vector[_R2] collect
 *     if not cni.ls2_ls2_intersect_set(collect, ls1.data, ls2.data):
 *         raise ValueError()             # <<<<<<<<<<<<<<
 *     return py_p2_set_new(collect)
 * dispatcher.add((LineSegment, LineSegment), intersect)
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 31, __pyx_L1_error)

    /* "cycart/intersect.pyx":30
 * def intersect(LineSegment ls1 not None, LineSegment ls2 not None):
 *     cdef vector[_R2] collect
 *     if not cni.ls2_ls2_intersect_set(collect, ls1.data, ls2.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  }

  /* "cycart/intersect.pyx":32
 *     if not cni.ls2_ls2_intersect_set(collect, ls1.data, ls2.data):
 *         raise ValueError()
 *     return py_p2_set_new(collect)             # <<<<<<<<<<<<<<
 * dispatcher.add((LineSegment, LineSegment), intersect)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6cycart_9intersect_py_p2_set_new(__pyx_v_collect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":28
 * dispatcher.add((Line, Line), intersect)
 * 
 * def intersect(LineSegment ls1 not None, LineSegment ls2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.ls2_ls2_intersect_set(collect, ls1.data, ls2.data):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/intersect.pyx":35
 * dispatcher.add((LineSegment, LineSegment), intersect)
 * 
 * def intersect(Circle c1 not None, Circle c2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.c2_c2_intersect_set(collect, c1.data, c2.data):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cycart_9intersect_5intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cycart_9intersect_5intersect = {"intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6cycart_9intersect_5intersect, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6cycart_9intersect_5intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_c1 = 0;
  struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_c2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_c1,&__pyx_n_s_c2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_c1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_c2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, 1); __PYX_ERR(0, 35, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "intersect") < 0)) __PYX_ERR(0, 35, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_c1 = ((struct __pyx_obj_6cycart_6circle_Circle *)values[0]);
    __pyx_v_c2 = ((struct __pyx_obj_6cycart_6circle_Circle *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 35, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c1), __pyx_ptype_6cycart_6circle_Circle, 0, "c1", 0))) __PYX_ERR(0, 35, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c2), __pyx_ptype_6cycart_6circle_Circle, 0, "c2", 0))) __PYX_ERR(0, 35, __pyx_L1_error)
  __pyx_r = __pyx_pf_6cycart_9intersect_4intersect(__pyx_self, __pyx_v_c1, __pyx_v_c2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cycart_9intersect_4intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_c1, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_c2) {
  std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  __pyx_v_collect;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "cycart/intersect.pyx":37
 * def intersect(Circle c1 not None, Circle c2 not None):
 *     cdef vector[_R2] collect
 *     if not cni.c2_c2_intersect_set(collect, c1.data, c2.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_9intersect_c2_c2_intersect_set(__pyx_v_collect, __pyx_v_c1->data, __pyx_v_c2->data) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cycart/intersect.pyx":38
 *     cdef vector[_R2] collect
 *     if not cni.c2_c2_intersect_set(collect, c1.data, c2.data):
 *         raise ValueError()             # <<<<<<<<<<<<<<
 *     return py_p2_set_new(collect)
 * dispatcher.add((Circle, Circle), intersect)
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 38, __pyx_L1_error)

    /* "cycart/intersect.pyx":37
 * def intersect(Circle c1 not None, Circle c2 not None):
 *     cdef vector[_R2] collect
 *     if not cni.c2_c2_intersect_set(collect, c1.data, c2.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  }

  /* "cycart/intersect.pyx":39
 *     if not cni.c2_c2_intersect_set(collect, c1.data, c2.data):
 *         raise ValueError()
 *     return py_p2_set_new(collect)             # <<<<<<<<<<<<<<
 * dispatcher.add((Circle, Circle), intersect)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6cycart_9intersect_py_p2_set_new(__pyx_v_collect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":35
 * dispatcher.add((LineSegment, LineSegment), intersect)
 * 
 * def intersect(Circle c1 not None, Circle c2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.c2_c2_intersect_set(collect, c1.data, c2.data):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/intersect.pyx":42
 * dispatcher.add((Circle, Circle), intersect)
 * 
 * def intersect(Line line not None, LineSegment seg not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_l2_intersect(seg, line)
 * dispatcher.add((Line, LineSegment), intersect)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cycart_9intersect_7intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cycart_9intersect_7intersect = {"intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6cycart_9intersect_7intersect, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6cycart_9intersect_7intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6cycart_4line_Line *__pyx_v_line = 0;
  struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_line,&__pyx_n_s_seg,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_line)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_seg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, 1); __PYX_ERR(0, 42, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "intersect") < 0)) __PYX_ERR(0, 42, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_line = ((struct __pyx_obj_6cycart_4line_Line *)values[0]);
    __pyx_v_seg = ((struct __pyx_obj_6cycart_7segment_LineSegment *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 42, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_line), __pyx_ptype_6cycart_4line_Line, 0, "line", 0))) __PYX_ERR(0, 42, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_seg), __pyx_ptype_6cycart_7segment_LineSegment, 0, "seg", 0))) __PYX_ERR(0, 42, __pyx_L1_error)
  __pyx_r = __pyx_pf_6cycart_9intersect_6intersect(__pyx_self, __pyx_v_line, __pyx_v_seg);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cycart_9intersect_6intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_4line_Line *__pyx_v_line, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "cycart/intersect.pyx":43
 * 
 * def intersect(Line line not None, LineSegment seg not None):
 *     return py_ls2_l2_intersect(seg, line)             # <<<<<<<<<<<<<<
 * dispatcher.add((Line, LineSegment), intersect)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6cycart_9intersect_py_ls2_l2_intersect(__pyx_v_seg, __pyx_v_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":42
 * dispatcher.add((Circle, Circle), intersect)
 * 
 * def intersect(Line line not None, LineSegment seg not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_l2_intersect(seg, line)
 * dispatcher.add((Line, LineSegment), intersect)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/intersect.pyx":46
 * dispatcher.add((Line, LineSegment), intersect)
 * 
 * def intersect(LineSegment seg not None, Line line not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_l2_intersect(seg, line)
 * dispatcher.add((LineSegment, Line), intersect)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cycart_9intersect_9intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cycart_9intersect_9intersect = {"intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6cycart_9intersect_9intersect, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6cycart_9intersect_9intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg = 0;
  struct __pyx_obj_6cycart_4line_Line *__pyx_v_line = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_seg,&__pyx_n_s_line,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_seg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_line)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, 1); __PYX_ERR(0, 46, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "intersect") < 0)) __PYX_ERR(0, 46, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_seg = ((struct __pyx_obj_6cycart_7segment_LineSegment *)values[0]);
    __pyx_v_line = ((struct __pyx_obj_6cycart_4line_Line *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 46, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_seg), __pyx_ptype_6cycart_7segment_LineSegment, 0, "seg", 0))) __PYX_ERR(0, 46, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_line), __pyx_ptype_6cycart_4line_Line, 0, "line", 0))) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_r = __pyx_pf_6cycart_9intersect_8intersect(__pyx_self, __pyx_v_seg, __pyx_v_line);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cycart_9intersect_8intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg, struct __pyx_obj_6cycart_4line_Line *__pyx_v_line) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "cycart/intersect.pyx":47
 * 
 * def intersect(LineSegment seg not None, Line line not None):
 *     return py_ls2_l2_intersect(seg, line)             # <<<<<<<<<<<<<<
 * dispatcher.add((LineSegment, Line), intersect)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6cycart_9intersect_py_ls2_l2_intersect(__pyx_v_seg, __pyx_v_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":46
 * dispatcher.add((Line, LineSegment), intersect)
 * 
 * def intersect(LineSegment seg not None, Line line not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_l2_intersect(seg, line)
 * dispatcher.add((LineSegment, Line), intersect)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/intersect.pyx":50
 * dispatcher.add((LineSegment, Line), intersect)
 * 
 * def intersect(LineSegment seg not None, Circle circle not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_c2_intersect(seg, circle)
 * dispatcher.add((LineSegment, Circle), intersect)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cycart_9intersect_11intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cycart_9intersect_11intersect = {"intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6cycart_9intersect_11intersect, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6cycart_9intersect_11intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg = 0;
  struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_seg,&__pyx_n_s_circle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_seg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_circle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, 1); __PYX_ERR(0, 50, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "intersect") < 0)) __PYX_ERR(0, 50, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_seg = ((struct __pyx_obj_6cycart_7segment_LineSegment *)values[0]);
    __pyx_v_circle = ((struct __pyx_obj_6cycart_6circle_Circle *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 50, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_seg), __pyx_ptype_6cycart_7segment_LineSegment, 0, "seg", 0))) __PYX_ERR(0, 50, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_circle), __pyx_ptype_6cycart_6circle_Circle, 0, "circle", 0))) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_r = __pyx_pf_6cycart_9intersect_10intersect(__pyx_self, __pyx_v_seg, __pyx_v_circle);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cycart_9intersect_10intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "cycart/intersect.pyx":51
 * 
 * def intersect(LineSegment seg not None, Circle circle not None):
 *     return py_ls2_c2_intersect(seg, circle)             # <<<<<<<<<<<<<<
 * dispatcher.add((LineSegment, Circle), intersect)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6cycart_9intersect_py_ls2_c2_intersect(__pyx_v_seg, __pyx_v_circle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":50
 * dispatcher.add((LineSegment, Line), intersect)
 * 
 * def intersect(LineSegment seg not None, Circle circle not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_c2_intersect(seg, circle)
 * dispatcher.add((LineSegment, Circle), intersect)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/intersect.pyx":54
 * dispatcher.add((LineSegment, Circle), intersect)
 * 
 * def intersect(Circle circle not None, LineSegment seg not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_c2_intersect(seg, circle)
 * dispatcher.add((Circle, LineSegment), intersect)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cycart_9intersect_13intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cycart_9intersect_13intersect = {"intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6cycart_9intersect_13intersect, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6cycart_9intersect_13intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle = 0;
  struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_circle,&__pyx_n_s_seg,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_circle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_seg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, 1); __PYX_ERR(0, 54, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "intersect") < 0)) __PYX_ERR(0, 54, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_circle = ((struct __pyx_obj_6cycart_6circle_Circle *)values[0]);
    __pyx_v_seg = ((struct __pyx_obj_6cycart_7segment_LineSegment *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 54, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_circle), __pyx_ptype_6cycart_6circle_Circle, 0, "circle", 0))) __PYX_ERR(0, 54, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_seg), __pyx_ptype_6cycart_7segment_LineSegment, 0, "seg", 0))) __PYX_ERR(0, 54, __pyx_L1_error)
  __pyx_r = __pyx_pf_6cycart_9intersect_12intersect(__pyx_self, __pyx_v_circle, __pyx_v_seg);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cycart_9intersect_12intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle, struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "cycart/intersect.pyx":55
 * 
 * def intersect(Circle circle not None, LineSegment seg not None):
 *     return py_ls2_c2_intersect(seg, circle)             # <<<<<<<<<<<<<<
 * dispatcher.add((Circle, LineSegment), intersect)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6cycart_9intersect_py_ls2_c2_intersect(__pyx_v_seg, __pyx_v_circle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":54
 * dispatcher.add((LineSegment, Circle), intersect)
 * 
 * def intersect(Circle circle not None, LineSegment seg not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_c2_intersect(seg, circle)
 * dispatcher.add((Circle, LineSegment), intersect)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/intersect.pyx":58
 * dispatcher.add((Circle, LineSegment), intersect)
 * 
 * def intersect(Line line not None, Circle circle not None):             # <<<<<<<<<<<<<<
 *     return py_l2_c2_intersect(line, circle)
 * dispatcher.add((Line, Circle), intersect)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cycart_9intersect_15intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cycart_9intersect_15intersect = {"intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6cycart_9intersect_15intersect, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6cycart_9intersect_15intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6cycart_4line_Line *__pyx_v_line = 0;
  struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_line,&__pyx_n_s_circle,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_line)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_circle)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, 1); __PYX_ERR(0, 58, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "intersect") < 0)) __PYX_ERR(0, 58, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_line = ((struct __pyx_obj_6cycart_4line_Line *)values[0]);
    __pyx_v_circle = ((struct __pyx_obj_6cycart_6circle_Circle *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 58, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_line), __pyx_ptype_6cycart_4line_Line, 0, "line", 0))) __PYX_ERR(0, 58, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_circle), __pyx_ptype_6cycart_6circle_Circle, 0, "circle", 0))) __PYX_ERR(0, 58, __pyx_L1_error)
  __pyx_r = __pyx_pf_6cycart_9intersect_14intersect(__pyx_self, __pyx_v_line, __pyx_v_circle);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cycart_9intersect_14intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_4line_Line *__pyx_v_line, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "cycart/intersect.pyx":59
 * 
 * def intersect(Line line not None, Circle circle not None):
 *     return py_l2_c2_intersect(line, circle)             # <<<<<<<<<<<<<<
 * dispatcher.add((Line, Circle), intersect)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6cycart_9intersect_py_l2_c2_intersect(__pyx_v_line, __pyx_v_circle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":58
 * dispatcher.add((Circle, LineSegment), intersect)
 * 
 * def intersect(Line line not None, Circle circle not None):             # <<<<<<<<<<<<<<
 *     return py_l2_c2_intersect(line, circle)
 * dispatcher.add((Line, Circle), intersect)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/intersect.pyx":62
 * dispatcher.add((Line, Circle), intersect)
 * 
 * def intersect(Circle circle not None, Line line not None):             # <<<<<<<<<<<<<<
 *     return py_l2_c2_intersect(line, circle)
 * dispatcher.add((Circle, Line), intersect)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6cycart_9intersect_17intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6cycart_9intersect_17intersect = {"intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6cycart_9intersect_17intersect, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6cycart_9intersect_17intersect(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle = 0;
  struct __pyx_obj_6cycart_4line_Line *__pyx_v_line = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_circle,&__pyx_n_s_line,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_circle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_line)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, 1); __PYX_ERR(0, 62, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "intersect") < 0)) __PYX_ERR(0, 62, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_circle = ((struct __pyx_obj_6cycart_6circle_Circle *)values[0]);
    __pyx_v_line = ((struct __pyx_obj_6cycart_4line_Line *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersect", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 62, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_circle), __pyx_ptype_6cycart_6circle_Circle, 0, "circle", 0))) __PYX_ERR(0, 62, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_line), __pyx_ptype_6cycart_4line_Line, 0, "line", 0))) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_r = __pyx_pf_6cycart_9intersect_16intersect(__pyx_self, __pyx_v_circle, __pyx_v_line);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6cycart_9intersect_16intersect(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle, struct __pyx_obj_6cycart_4line_Line *__pyx_v_line) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "cycart/intersect.pyx":63
 * 
 * def intersect(Circle circle not None, Line line not None):
 *     return py_l2_c2_intersect(line, circle)             # <<<<<<<<<<<<<<
 * dispatcher.add((Circle, Line), intersect)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6cycart_9intersect_py_l2_c2_intersect(__pyx_v_line, __pyx_v_circle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":62
 * dispatcher.add((Line, Circle), intersect)
 * 
 * def intersect(Circle circle not None, Line line not None):             # <<<<<<<<<<<<<<
 *     return py_l2_c2_intersect(line, circle)
 * dispatcher.add((Circle, Line), intersect)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.intersect.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/intersect.pyx":72
 * """
 * 
 * cdef py_ls2_l2_intersect(LineSegment seg, Line line):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.ls2_l2_intersect_set(collect, seg.data, line.data):
 */

static PyObject *__pyx_f_6cycart_9intersect_py_ls2_l2_intersect(struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg, struct __pyx_obj_6cycart_4line_Line *__pyx_v_line) {
  std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  __pyx_v_collect;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("py_ls2_l2_intersect", 0);

  /* "cycart/intersect.pyx":74
 * cdef py_ls2_l2_intersect(LineSegment seg, Line line):
 *     cdef vector[_R2] collect
 *     if not cni.ls2_l2_intersect_set(collect, seg.data, line.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_9intersect_ls2_l2_intersect_set(__pyx_v_collect, __pyx_v_seg->data, __pyx_v_line->data) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cycart/intersect.pyx":75
 *     cdef vector[_R2] collect
 *     if not cni.ls2_l2_intersect_set(collect, seg.data, line.data):
 *         raise ValueError()             # <<<<<<<<<<<<<<
 *     return py_p2_set_new(collect)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 75, __pyx_L1_error)

    /* "cycart/intersect.pyx":74
 * cdef py_ls2_l2_intersect(LineSegment seg, Line line):
 *     cdef vector[_R2] collect
 *     if not cni.ls2_l2_intersect_set(collect, seg.data, line.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  }

  /* "cycart/intersect.pyx":76
 *     if not cni.ls2_l2_intersect_set(collect, seg.data, line.data):
 *         raise ValueError()
 *     return py_p2_set_new(collect)             # <<<<<<<<<<<<<<
 * 
 * cdef py_ls2_c2_intersect(LineSegment seg, Circle circle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6cycart_9intersect_py_p2_set_new(__pyx_v_collect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":72
 * """
 * 
 * cdef py_ls2_l2_intersect(LineSegment seg, Line line):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.ls2_l2_intersect_set(collect, seg.data, line.data):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cycart.intersect.py_ls2_l2_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/intersect.pyx":78
 *     return py_p2_set_new(collect)
 * 
 * cdef py_ls2_c2_intersect(LineSegment seg, Circle circle):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.ls2_c2_intersect_set(collect, seg.data, circle.data):
 */

static PyObject *__pyx_f_6cycart_9intersect_py_ls2_c2_intersect(struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_seg, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle) {
  std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  __pyx_v_collect;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("py_ls2_c2_intersect", 0);

  /* "cycart/intersect.pyx":80
 * cdef py_ls2_c2_intersect(LineSegment seg, Circle circle):
 *     cdef vector[_R2] collect
 *     if not cni.ls2_c2_intersect_set(collect, seg.data, circle.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_9intersect_ls2_c2_intersect_set(__pyx_v_collect, __pyx_v_seg->data, __pyx_v_circle->data) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cycart/intersect.pyx":81
 *     cdef vector[_R2] collect
 *     if not cni.ls2_c2_intersect_set(collect, seg.data, circle.data):
 *         raise ValueError()             # <<<<<<<<<<<<<<
 *     return py_p2_set_new(collect)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 81, __pyx_L1_error)

    /* "cycart/intersect.pyx":80
 * cdef py_ls2_c2_intersect(LineSegment seg, Circle circle):
 *     cdef vector[_R2] collect
 *     if not cni.ls2_c2_intersect_set(collect, seg.data, circle.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  }

  /* "cycart/intersect.pyx":82
 *     if not cni.ls2_c2_intersect_set(collect, seg.data, circle.data):
 *         raise ValueError()
 *     return py_p2_set_new(collect)             # <<<<<<<<<<<<<<
 * 
 * cdef py_l2_c2_intersect(Line line, Circle circle):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6cycart_9intersect_py_p2_set_new(__pyx_v_collect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":78
 *     return py_p2_set_new(collect)
 * 
 * cdef py_ls2_c2_intersect(LineSegment seg, Circle circle):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.ls2_c2_intersect_set(collect, seg.data, circle.data):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cycart.intersect.py_ls2_c2_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/intersect.pyx":84
 *     return py_p2_set_new(collect)
 * 
 * cdef py_l2_c2_intersect(Line line, Circle circle):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.l2_c2_intersect_set(collect, line.data, circle.data):
 */

static PyObject *__pyx_f_6cycart_9intersect_py_l2_c2_intersect(struct __pyx_obj_6cycart_4line_Line *__pyx_v_line, struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle) {
  std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  __pyx_v_collect;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("py_l2_c2_intersect", 0);

  /* "cycart/intersect.pyx":86
 * cdef py_l2_c2_intersect(Line line, Circle circle):
 *     cdef vector[_R2] collect
 *     if not cni.l2_c2_intersect_set(collect, line.data, circle.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_9intersect_l2_c2_intersect_set(__pyx_v_collect, __pyx_v_line->data, __pyx_v_circle->data) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cycart/intersect.pyx":87
 *     cdef vector[_R2] collect
 *     if not cni.l2_c2_intersect_set(collect, line.data, circle.data):
 *         raise ValueError()             # <<<<<<<<<<<<<<
 *     return py_p2_set_new(collect)
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 87, __pyx_L1_error)

    /* "cycart/intersect.pyx":86
 * cdef py_l2_c2_intersect(Line line, Circle circle):
 *     cdef vector[_R2] collect
 *     if not cni.l2_c2_intersect_set(collect, line.data, circle.data):             # <<<<<<<<<<<<<<
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 */
  }

  /* "cycart/intersect.pyx":88
 *     if not cni.l2_c2_intersect_set(collect, line.data, circle.data):
 *         raise ValueError()
 *     return py_p2_set_new(collect)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6cycart_9intersect_py_p2_set_new(__pyx_v_collect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cycart/intersect.pyx":84
 *     return py_p2_set_new(collect)
 * 
 * cdef py_l2_c2_intersect(Line line, Circle circle):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.l2_c2_intersect_set(collect, line.data, circle.data):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cycart.intersect.py_l2_c2_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "util.pxd":3
 * from libc.math cimport fmax, fabs
 * 
 * cdef inline bint fapprox(double a, double b, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     cdef epsilon
 *     epsilon = fmax(atol, rtol * fmax(1, fmax(a, b)))
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4util_fapprox(double __pyx_v_a, double __pyx_v_b, struct __pyx_opt_args_6cycart_6native_4util_fapprox *__pyx_optional_args) {
  double __pyx_v_rtol = ((double)1e-9);
  PyObject *__pyx_v_atol = ((PyObject *)__pyx_int_0);
  PyObject *__pyx_v_epsilon = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("fapprox", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_atol = __pyx_optional_args->atol;
      }
    }
  }

  /* "util.pxd":5
 * cdef inline bint fapprox(double a, double b, double rtol=1e-9, atol=0):
 *     cdef epsilon
 *     epsilon = fmax(atol, rtol * fmax(1, fmax(a, b)))             # <<<<<<<<<<<<<<
 *     return fabs(a - b) <= fabs(epsilon)
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_atol); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 5, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(fmax(__pyx_t_1, (__pyx_v_rtol * fmax(1.0, fmax(__pyx_v_a, __pyx_v_b))))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_epsilon = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "util.pxd":6
 *     cdef epsilon
 *     epsilon = fmax(atol, rtol * fmax(1, fmax(a, b)))
 *     return fabs(a - b) <= fabs(epsilon)             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_epsilon); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 6, __pyx_L1_error)
  __pyx_r = (fabs((__pyx_v_a - __pyx_v_b)) <= fabs(__pyx_t_1));
  goto __pyx_L0;

  /* "util.pxd":3
 * from libc.math cimport fmax, fabs
 * 
 * cdef inline bint fapprox(double a, double b, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     cdef epsilon
 *     epsilon = fmax(atol, rtol * fmax(1, fmax(a, b)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("cycart.native.util.fapprox", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_epsilon);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":10
 * # c2 value functions
 * 
 * cdef inline _R2 r2_polar(double radius, double radians):             # <<<<<<<<<<<<<<
 *     return _R2(radius * cos(radians), radius * sin(radians))
 * 
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_polar(double __pyx_v_radius, double __pyx_v_radians) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_1;
  __Pyx_RefNannySetupContext("r2_polar", 0);

  /* "cycart/native/space.pxd":11
 * 
 * cdef inline _R2 r2_polar(double radius, double radians):
 *     return _R2(radius * cos(radians), radius * sin(radians))             # <<<<<<<<<<<<<<
 * 
 * cdef inline _R2 r2_neg(const _R2& value):
 */
  __pyx_t_1.x = (__pyx_v_radius * cos(__pyx_v_radians));
  __pyx_t_1.y = (__pyx_v_radius * sin(__pyx_v_radians));
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":10
 * # c2 value functions
 * 
 * cdef inline _R2 r2_polar(double radius, double radians):             # <<<<<<<<<<<<<<
 *     return _R2(radius * cos(radians), radius * sin(radians))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":13
 *     return _R2(radius * cos(radians), radius * sin(radians))
 * 
 * cdef inline _R2 r2_neg(const _R2& value):             # <<<<<<<<<<<<<<
 *     return _R2(-value.x, -value.y)
 * 
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_neg(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_value) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_1;
  __Pyx_RefNannySetupContext("r2_neg", 0);

  /* "cycart/native/space.pxd":14
 * 
 * cdef inline _R2 r2_neg(const _R2& value):
 *     return _R2(-value.x, -value.y)             # <<<<<<<<<<<<<<
 * 
 * cdef inline _R2 r2_add(const _R2& lhs, const _R2& rhs):
 */
  __pyx_t_1.x = (-__pyx_v_value.x);
  __pyx_t_1.y = (-__pyx_v_value.y);
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":13
 *     return _R2(radius * cos(radians), radius * sin(radians))
 * 
 * cdef inline _R2 r2_neg(const _R2& value):             # <<<<<<<<<<<<<<
 *     return _R2(-value.x, -value.y)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":16
 *     return _R2(-value.x, -value.y)
 * 
 * cdef inline _R2 r2_add(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     return _R2(lhs.x + rhs.x, lhs.y + rhs.y)
 * 
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_add(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_lhs, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_rhs) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_1;
  __Pyx_RefNannySetupContext("r2_add", 0);

  /* "cycart/native/space.pxd":17
 * 
 * cdef inline _R2 r2_add(const _R2& lhs, const _R2& rhs):
 *     return _R2(lhs.x + rhs.x, lhs.y + rhs.y)             # <<<<<<<<<<<<<<
 * 
 * cdef inline _R2 r2_sub(const _R2& lhs, const _R2& rhs):
 */
  __pyx_t_1.x = (__pyx_v_lhs.x + __pyx_v_rhs.x);
  __pyx_t_1.y = (__pyx_v_lhs.y + __pyx_v_rhs.y);
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":16
 *     return _R2(-value.x, -value.y)
 * 
 * cdef inline _R2 r2_add(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     return _R2(lhs.x + rhs.x, lhs.y + rhs.y)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":19
 *     return _R2(lhs.x + rhs.x, lhs.y + rhs.y)
 * 
 * cdef inline _R2 r2_sub(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     return _R2(lhs.x - rhs.x, lhs.y - rhs.y)
 * 
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_sub(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_lhs, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_rhs) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_1;
  __Pyx_RefNannySetupContext("r2_sub", 0);

  /* "cycart/native/space.pxd":20
 * 
 * cdef inline _R2 r2_sub(const _R2& lhs, const _R2& rhs):
 *     return _R2(lhs.x - rhs.x, lhs.y - rhs.y)             # <<<<<<<<<<<<<<
 * 
 * cdef inline _R2 r2_mul(const _R2& vec, double scalar):
 */
  __pyx_t_1.x = (__pyx_v_lhs.x - __pyx_v_rhs.x);
  __pyx_t_1.y = (__pyx_v_lhs.y - __pyx_v_rhs.y);
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":19
 *     return _R2(lhs.x + rhs.x, lhs.y + rhs.y)
 * 
 * cdef inline _R2 r2_sub(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     return _R2(lhs.x - rhs.x, lhs.y - rhs.y)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":22
 *     return _R2(lhs.x - rhs.x, lhs.y - rhs.y)
 * 
 * cdef inline _R2 r2_mul(const _R2& vec, double scalar):             # <<<<<<<<<<<<<<
 *     return _R2(vec.x * scalar, vec.y * scalar)
 * 
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_mul(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_vec, double __pyx_v_scalar) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_1;
  __Pyx_RefNannySetupContext("r2_mul", 0);

  /* "cycart/native/space.pxd":23
 * 
 * cdef inline _R2 r2_mul(const _R2& vec, double scalar):
 *     return _R2(vec.x * scalar, vec.y * scalar)             # <<<<<<<<<<<<<<
 * 
 * cdef inline _R2 r2_mul2(const _R2& lhs, const _R2& rhs):
 */
  __pyx_t_1.x = (__pyx_v_vec.x * __pyx_v_scalar);
  __pyx_t_1.y = (__pyx_v_vec.y * __pyx_v_scalar);
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":22
 *     return _R2(lhs.x - rhs.x, lhs.y - rhs.y)
 * 
 * cdef inline _R2 r2_mul(const _R2& vec, double scalar):             # <<<<<<<<<<<<<<
 *     return _R2(vec.x * scalar, vec.y * scalar)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":25
 *     return _R2(vec.x * scalar, vec.y * scalar)
 * 
 * cdef inline _R2 r2_mul2(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     return _R2(lhs.x * rhs.x, lhs.y * rhs.y)
 * 
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_mul2(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_lhs, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_rhs) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_1;
  __Pyx_RefNannySetupContext("r2_mul2", 0);

  /* "cycart/native/space.pxd":26
 * 
 * cdef inline _R2 r2_mul2(const _R2& lhs, const _R2& rhs):
 *     return _R2(lhs.x * rhs.x, lhs.y * rhs.y)             # <<<<<<<<<<<<<<
 * 
 * cdef inline _R2 r2_rotate(const _R2& vec, double radians):
 */
  __pyx_t_1.x = (__pyx_v_lhs.x * __pyx_v_rhs.x);
  __pyx_t_1.y = (__pyx_v_lhs.y * __pyx_v_rhs.y);
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":25
 *     return _R2(vec.x * scalar, vec.y * scalar)
 * 
 * cdef inline _R2 r2_mul2(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     return _R2(lhs.x * rhs.x, lhs.y * rhs.y)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":28
 *     return _R2(lhs.x * rhs.x, lhs.y * rhs.y)
 * 
 * cdef inline _R2 r2_rotate(const _R2& vec, double radians):             # <<<<<<<<<<<<<<
 *     cdef double rad_cos = cos(radians)
 *     cdef double rad_sin = sin(radians)
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_rotate(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_vec, double __pyx_v_radians) {
  double __pyx_v_rad_cos;
  double __pyx_v_rad_sin;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_1;
  __Pyx_RefNannySetupContext("r2_rotate", 0);

  /* "cycart/native/space.pxd":29
 * 
 * cdef inline _R2 r2_rotate(const _R2& vec, double radians):
 *     cdef double rad_cos = cos(radians)             # <<<<<<<<<<<<<<
 *     cdef double rad_sin = sin(radians)
 *     return _R2(
 */
  __pyx_v_rad_cos = cos(__pyx_v_radians);

  /* "cycart/native/space.pxd":30
 * cdef inline _R2 r2_rotate(const _R2& vec, double radians):
 *     cdef double rad_cos = cos(radians)
 *     cdef double rad_sin = sin(radians)             # <<<<<<<<<<<<<<
 *     return _R2(
 *         vec.x * rad_cos - vec.y * rad_sin,
 */
  __pyx_v_rad_sin = sin(__pyx_v_radians);

  /* "cycart/native/space.pxd":32
 *     cdef double rad_sin = sin(radians)
 *     return _R2(
 *         vec.x * rad_cos - vec.y * rad_sin,             # <<<<<<<<<<<<<<
 *         vec.x * rad_sin + vec.y * rad_cos
 *     )
 */
  __pyx_t_1.x = ((__pyx_v_vec.x * __pyx_v_rad_cos) - (__pyx_v_vec.y * __pyx_v_rad_sin));

  /* "cycart/native/space.pxd":33
 *     return _R2(
 *         vec.x * rad_cos - vec.y * rad_sin,
 *         vec.x * rad_sin + vec.y * rad_cos             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1.y = ((__pyx_v_vec.x * __pyx_v_rad_sin) + (__pyx_v_vec.y * __pyx_v_rad_cos));
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":28
 *     return _R2(lhs.x * rhs.x, lhs.y * rhs.y)
 * 
 * cdef inline _R2 r2_rotate(const _R2& vec, double radians):             # <<<<<<<<<<<<<<
 *     cdef double rad_cos = cos(radians)
 *     cdef double rad_sin = sin(radians)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":36
 *     )
 * 
 * cdef inline _R2 r2_rotate_around(const _R2& point, const _R2& center, double radians):             # <<<<<<<<<<<<<<
 *     return r2_add(center, r2_rotate(r2_sub(point, center), radians))
 * 
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_5space_r2_rotate_around(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_center, double __pyx_v_radians) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("r2_rotate_around", 0);

  /* "cycart/native/space.pxd":37
 * 
 * cdef inline _R2 r2_rotate_around(const _R2& point, const _R2& center, double radians):
 *     return r2_add(center, r2_rotate(r2_sub(point, center), radians))             # <<<<<<<<<<<<<<
 * 
 * cdef inline double r2_cross(const _R2& lhs, const _R2& rhs):
 */
  __pyx_r = __pyx_f_6cycart_6native_5space_r2_add(__pyx_v_center, __pyx_f_6cycart_6native_5space_r2_rotate(__pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_point, __pyx_v_center), __pyx_v_radians));
  goto __pyx_L0;

  /* "cycart/native/space.pxd":36
 *     )
 * 
 * cdef inline _R2 r2_rotate_around(const _R2& point, const _R2& center, double radians):             # <<<<<<<<<<<<<<
 *     return r2_add(center, r2_rotate(r2_sub(point, center), radians))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":39
 *     return r2_add(center, r2_rotate(r2_sub(point, center), radians))
 * 
 * cdef inline double r2_cross(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     return lhs.x * rhs.y - lhs.y * rhs.x
 * 
 */

static CYTHON_INLINE double __pyx_f_6cycart_6native_5space_r2_cross(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_lhs, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_rhs) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("r2_cross", 0);

  /* "cycart/native/space.pxd":40
 * 
 * cdef inline double r2_cross(const _R2& lhs, const _R2& rhs):
 *     return lhs.x * rhs.y - lhs.y * rhs.x             # <<<<<<<<<<<<<<
 * 
 * cdef inline double r2_dot(const _R2& lhs, const _R2& rhs):
 */
  __pyx_r = ((__pyx_v_lhs.x * __pyx_v_rhs.y) - (__pyx_v_lhs.y * __pyx_v_rhs.x));
  goto __pyx_L0;

  /* "cycart/native/space.pxd":39
 *     return r2_add(center, r2_rotate(r2_sub(point, center), radians))
 * 
 * cdef inline double r2_cross(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     return lhs.x * rhs.y - lhs.y * rhs.x
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":42
 *     return lhs.x * rhs.y - lhs.y * rhs.x
 * 
 * cdef inline double r2_dot(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     return lhs.x * rhs.x + lhs.y * rhs.y
 * 
 */

static CYTHON_INLINE double __pyx_f_6cycart_6native_5space_r2_dot(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_lhs, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_rhs) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("r2_dot", 0);

  /* "cycart/native/space.pxd":43
 * 
 * cdef inline double r2_dot(const _R2& lhs, const _R2& rhs):
 *     return lhs.x * rhs.x + lhs.y * rhs.y             # <<<<<<<<<<<<<<
 * 
 * cdef inline double r2_magnitude(const _R2& vector):
 */
  __pyx_r = ((__pyx_v_lhs.x * __pyx_v_rhs.x) + (__pyx_v_lhs.y * __pyx_v_rhs.y));
  goto __pyx_L0;

  /* "cycart/native/space.pxd":42
 *     return lhs.x * rhs.y - lhs.y * rhs.x
 * 
 * cdef inline double r2_dot(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     return lhs.x * rhs.x + lhs.y * rhs.y
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":45
 *     return lhs.x * rhs.x + lhs.y * rhs.y
 * 
 * cdef inline double r2_magnitude(const _R2& vector):             # <<<<<<<<<<<<<<
 *     return sqrt(r2_dot(vector, vector))
 * 
 */

static CYTHON_INLINE double __pyx_f_6cycart_6native_5space_r2_magnitude(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_vector) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("r2_magnitude", 0);

  /* "cycart/native/space.pxd":46
 * 
 * cdef inline double r2_magnitude(const _R2& vector):
 *     return sqrt(r2_dot(vector, vector))             # <<<<<<<<<<<<<<
 * 
 * cdef inline double r2_distance(const _R2& p1, const _R2& p2):
 */
  __pyx_r = sqrt(__pyx_f_6cycart_6native_5space_r2_dot(__pyx_v_vector, __pyx_v_vector));
  goto __pyx_L0;

  /* "cycart/native/space.pxd":45
 *     return lhs.x * rhs.x + lhs.y * rhs.y
 * 
 * cdef inline double r2_magnitude(const _R2& vector):             # <<<<<<<<<<<<<<
 *     return sqrt(r2_dot(vector, vector))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":48
 *     return sqrt(r2_dot(vector, vector))
 * 
 * cdef inline double r2_distance(const _R2& p1, const _R2& p2):             # <<<<<<<<<<<<<<
 *     return r2_magnitude(r2_sub(p1, p2))
 * 
 */

static CYTHON_INLINE double __pyx_f_6cycart_6native_5space_r2_distance(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_p1, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_p2) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("r2_distance", 0);

  /* "cycart/native/space.pxd":49
 * 
 * cdef inline double r2_distance(const _R2& p1, const _R2& p2):
 *     return r2_magnitude(r2_sub(p1, p2))             # <<<<<<<<<<<<<<
 * 
 * cdef inline double r2_ccw(const _R2& p1, const _R2& p2, const _R2& p3):
 */
  __pyx_r = __pyx_f_6cycart_6native_5space_r2_magnitude(__pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_p1, __pyx_v_p2));
  goto __pyx_L0;

  /* "cycart/native/space.pxd":48
 *     return sqrt(r2_dot(vector, vector))
 * 
 * cdef inline double r2_distance(const _R2& p1, const _R2& p2):             # <<<<<<<<<<<<<<
 *     return r2_magnitude(r2_sub(p1, p2))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":51
 *     return r2_magnitude(r2_sub(p1, p2))
 * 
 * cdef inline double r2_ccw(const _R2& p1, const _R2& p2, const _R2& p3):             # <<<<<<<<<<<<<<
 *     return (p2.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (p2.y - p1.y)
 * 
 */

static CYTHON_INLINE double __pyx_f_6cycart_6native_5space_r2_ccw(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_p1, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_p2, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_p3) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("r2_ccw", 0);

  /* "cycart/native/space.pxd":52
 * 
 * cdef inline double r2_ccw(const _R2& p1, const _R2& p2, const _R2& p3):
 *     return (p2.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (p2.y - p1.y)             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint r2_parallel(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):
 */
  __pyx_r = (((__pyx_v_p2.x - __pyx_v_p1.x) * (__pyx_v_p3.y - __pyx_v_p1.y)) - ((__pyx_v_p3.x - __pyx_v_p1.x) * (__pyx_v_p2.y - __pyx_v_p1.y)));
  goto __pyx_L0;

  /* "cycart/native/space.pxd":51
 *     return r2_magnitude(r2_sub(p1, p2))
 * 
 * cdef inline double r2_ccw(const _R2& p1, const _R2& p2, const _R2& p3):             # <<<<<<<<<<<<<<
 *     return (p2.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (p2.y - p1.y)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":54
 *     return (p2.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (p2.y - p1.y)
 * 
 * cdef inline bint r2_parallel(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(r2_cross(lhs, rhs), 0, rtol, atol)
 * 
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_parallel(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_lhs, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_rhs, struct __pyx_opt_args_6cycart_6native_5space_r2_parallel *__pyx_optional_args) {
  double __pyx_v_rtol = ((double)1e-9);
  double __pyx_v_atol = ((double)0.0);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  struct __pyx_opt_args_6cycart_6native_4util_fapprox __pyx_t_3;
  __Pyx_RefNannySetupContext("r2_parallel", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_atol = __pyx_optional_args->atol;
      }
    }
  }

  /* "cycart/native/space.pxd":55
 * 
 * cdef inline bint r2_parallel(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):
 *     return fapprox(r2_cross(lhs, rhs), 0, rtol, atol)             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint r2_orthogonal(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_atol); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 2;
  __pyx_t_3.rtol = __pyx_v_rtol;
  __pyx_t_3.atol = __pyx_t_1;
  __pyx_t_2 = __pyx_f_6cycart_6native_4util_fapprox(__pyx_f_6cycart_6native_5space_r2_cross(__pyx_v_lhs, __pyx_v_rhs), 0.0, &__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":54
 *     return (p2.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (p2.y - p1.y)
 * 
 * cdef inline bint r2_parallel(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(r2_cross(lhs, rhs), 0, rtol, atol)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("cycart.native.space.r2_parallel", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":57
 *     return fapprox(r2_cross(lhs, rhs), 0, rtol, atol)
 * 
 * cdef inline bint r2_orthogonal(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(r2_dot(lhs, rhs), 0, rtol, atol)
 * 
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_orthogonal(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_lhs, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_rhs, struct __pyx_opt_args_6cycart_6native_5space_r2_orthogonal *__pyx_optional_args) {
  double __pyx_v_rtol = ((double)1e-9);
  double __pyx_v_atol = ((double)0.0);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  struct __pyx_opt_args_6cycart_6native_4util_fapprox __pyx_t_3;
  __Pyx_RefNannySetupContext("r2_orthogonal", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_atol = __pyx_optional_args->atol;
      }
    }
  }

  /* "cycart/native/space.pxd":58
 * 
 * cdef inline bint r2_orthogonal(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):
 *     return fapprox(r2_dot(lhs, rhs), 0, rtol, atol)             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint r2_approx(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_atol); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 2;
  __pyx_t_3.rtol = __pyx_v_rtol;
  __pyx_t_3.atol = __pyx_t_1;
  __pyx_t_2 = __pyx_f_6cycart_6native_4util_fapprox(__pyx_f_6cycart_6native_5space_r2_dot(__pyx_v_lhs, __pyx_v_rhs), 0.0, &__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":57
 *     return fapprox(r2_cross(lhs, rhs), 0, rtol, atol)
 * 
 * cdef inline bint r2_orthogonal(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(r2_dot(lhs, rhs), 0, rtol, atol)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("cycart.native.space.r2_orthogonal", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":60
 *     return fapprox(r2_dot(lhs, rhs), 0, rtol, atol)
 * 
 * cdef inline bint r2_approx(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(lhs.x, rhs.x, rtol, atol) and fapprox(lhs.y, rhs.y, rtol, atol)
 * 
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_approx(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_lhs, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_rhs, struct __pyx_opt_args_6cycart_6native_5space_r2_approx *__pyx_optional_args) {
  double __pyx_v_rtol = ((double)1e-9);
  double __pyx_v_atol = ((double)0.0);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  struct __pyx_opt_args_6cycart_6native_4util_fapprox __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("r2_approx", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_atol = __pyx_optional_args->atol;
      }
    }
  }

  /* "cycart/native/space.pxd":61
 * 
 * cdef inline bint r2_approx(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):
 *     return fapprox(lhs.x, rhs.x, rtol, atol) and fapprox(lhs.y, rhs.y, rtol, atol)             # <<<<<<<<<<<<<<
 * 
 * cdef inline int r2_cmp_points(const _R2& lhs, const _R2& rhs):
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_atol); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4.__pyx_n = 2;
  __pyx_t_4.rtol = __pyx_v_rtol;
  __pyx_t_4.atol = __pyx_t_2;
  __pyx_t_3 = __pyx_f_6cycart_6native_4util_fapprox(__pyx_v_lhs.x, __pyx_v_rhs.x, &__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_atol); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4.__pyx_n = 2;
  __pyx_t_4.rtol = __pyx_v_rtol;
  __pyx_t_4.atol = __pyx_t_2;
  __pyx_t_5 = __pyx_f_6cycart_6native_4util_fapprox(__pyx_v_lhs.y, __pyx_v_rhs.y, &__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":60
 *     return fapprox(r2_dot(lhs, rhs), 0, rtol, atol)
 * 
 * cdef inline bint r2_approx(const _R2& lhs, const _R2& rhs, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(lhs.x, rhs.x, rtol, atol) and fapprox(lhs.y, rhs.y, rtol, atol)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("cycart.native.space.r2_approx", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":63
 *     return fapprox(lhs.x, rhs.x, rtol, atol) and fapprox(lhs.y, rhs.y, rtol, atol)
 * 
 * cdef inline int r2_cmp_points(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     if lhs.x > rhs.x:
 *         return 1
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_cmp_points(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_lhs, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_rhs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("r2_cmp_points", 0);

  /* "cycart/native/space.pxd":64
 * 
 * cdef inline int r2_cmp_points(const _R2& lhs, const _R2& rhs):
 *     if lhs.x > rhs.x:             # <<<<<<<<<<<<<<
 *         return 1
 *     if lhs.x < rhs.x:
 */
  __pyx_t_1 = ((__pyx_v_lhs.x > __pyx_v_rhs.x) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/space.pxd":65
 * cdef inline int r2_cmp_points(const _R2& lhs, const _R2& rhs):
 *     if lhs.x > rhs.x:
 *         return 1             # <<<<<<<<<<<<<<
 *     if lhs.x < rhs.x:
 *         return -1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cycart/native/space.pxd":64
 * 
 * cdef inline int r2_cmp_points(const _R2& lhs, const _R2& rhs):
 *     if lhs.x > rhs.x:             # <<<<<<<<<<<<<<
 *         return 1
 *     if lhs.x < rhs.x:
 */
  }

  /* "cycart/native/space.pxd":66
 *     if lhs.x > rhs.x:
 *         return 1
 *     if lhs.x < rhs.x:             # <<<<<<<<<<<<<<
 *         return -1
 *     if lhs.y > rhs.y:
 */
  __pyx_t_1 = ((__pyx_v_lhs.x < __pyx_v_rhs.x) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/space.pxd":67
 *         return 1
 *     if lhs.x < rhs.x:
 *         return -1             # <<<<<<<<<<<<<<
 *     if lhs.y > rhs.y:
 *         return 1
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cycart/native/space.pxd":66
 *     if lhs.x > rhs.x:
 *         return 1
 *     if lhs.x < rhs.x:             # <<<<<<<<<<<<<<
 *         return -1
 *     if lhs.y > rhs.y:
 */
  }

  /* "cycart/native/space.pxd":68
 *     if lhs.x < rhs.x:
 *         return -1
 *     if lhs.y > rhs.y:             # <<<<<<<<<<<<<<
 *         return 1
 *     if lhs.y < rhs.y:
 */
  __pyx_t_1 = ((__pyx_v_lhs.y > __pyx_v_rhs.y) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/space.pxd":69
 *         return -1
 *     if lhs.y > rhs.y:
 *         return 1             # <<<<<<<<<<<<<<
 *     if lhs.y < rhs.y:
 *         return -1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cycart/native/space.pxd":68
 *     if lhs.x < rhs.x:
 *         return -1
 *     if lhs.y > rhs.y:             # <<<<<<<<<<<<<<
 *         return 1
 *     if lhs.y < rhs.y:
 */
  }

  /* "cycart/native/space.pxd":70
 *     if lhs.y > rhs.y:
 *         return 1
 *     if lhs.y < rhs.y:             # <<<<<<<<<<<<<<
 *         return -1
 *     return 0
 */
  __pyx_t_1 = ((__pyx_v_lhs.y < __pyx_v_rhs.y) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/space.pxd":71
 *         return 1
 *     if lhs.y < rhs.y:
 *         return -1             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cycart/native/space.pxd":70
 *     if lhs.y > rhs.y:
 *         return 1
 *     if lhs.y < rhs.y:             # <<<<<<<<<<<<<<
 *         return -1
 *     return 0
 */
  }

  /* "cycart/native/space.pxd":72
 *     if lhs.y < rhs.y:
 *         return -1
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * # c2 ref out functions
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":63
 *     return fapprox(lhs.x, rhs.x, rtol, atol) and fapprox(lhs.y, rhs.y, rtol, atol)
 * 
 * cdef inline int r2_cmp_points(const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     if lhs.x > rhs.x:
 *         return 1
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":76
 * # c2 ref out functions
 * 
 * cdef inline bint r2_ref_div(_R2& out, const _R2& vector, double scalar):             # <<<<<<<<<<<<<<
 *     if scalar == 0:
 *         return 0
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_ref_div(struct __pyx_t_6cycart_6native_6dtypes__R2 &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_vector, double __pyx_v_scalar) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("r2_ref_div", 0);

  /* "cycart/native/space.pxd":77
 * 
 * cdef inline bint r2_ref_div(_R2& out, const _R2& vector, double scalar):
 *     if scalar == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     out.x = vector.x / scalar
 */
  __pyx_t_1 = ((__pyx_v_scalar == 0.0) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/space.pxd":78
 * cdef inline bint r2_ref_div(_R2& out, const _R2& vector, double scalar):
 *     if scalar == 0:
 *         return 0             # <<<<<<<<<<<<<<
 *     out.x = vector.x / scalar
 *     out.y = vector.y / scalar
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/space.pxd":77
 * 
 * cdef inline bint r2_ref_div(_R2& out, const _R2& vector, double scalar):
 *     if scalar == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     out.x = vector.x / scalar
 */
  }

  /* "cycart/native/space.pxd":79
 *     if scalar == 0:
 *         return 0
 *     out.x = vector.x / scalar             # <<<<<<<<<<<<<<
 *     out.y = vector.y / scalar
 *     return 1
 */
  if (unlikely(__pyx_v_scalar == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 79, __pyx_L1_error)
  }
  __pyx_v_out.x = (__pyx_v_vector.x / __pyx_v_scalar);

  /* "cycart/native/space.pxd":80
 *         return 0
 *     out.x = vector.x / scalar
 *     out.y = vector.y / scalar             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  if (unlikely(__pyx_v_scalar == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 80, __pyx_L1_error)
  }
  __pyx_v_out.y = (__pyx_v_vector.y / __pyx_v_scalar);

  /* "cycart/native/space.pxd":81
 *     out.x = vector.x / scalar
 *     out.y = vector.y / scalar
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint r2_ref_div2(_R2& out, const _R2& lhs, const _R2& rhs):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":76
 * # c2 ref out functions
 * 
 * cdef inline bint r2_ref_div(_R2& out, const _R2& vector, double scalar):             # <<<<<<<<<<<<<<
 *     if scalar == 0:
 *         return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.space.r2_ref_div", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":83
 *     return 1
 * 
 * cdef inline bint r2_ref_div2(_R2& out, const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     if rhs.x == 0 or rhs.y == 0:
 *         return 0
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_ref_div2(struct __pyx_t_6cycart_6native_6dtypes__R2 &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_lhs, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_rhs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("r2_ref_div2", 0);

  /* "cycart/native/space.pxd":84
 * 
 * cdef inline bint r2_ref_div2(_R2& out, const _R2& lhs, const _R2& rhs):
 *     if rhs.x == 0 or rhs.y == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     out.x = lhs.x / rhs.x
 */
  __pyx_t_2 = ((__pyx_v_rhs.x == 0.0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_rhs.y == 0.0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cycart/native/space.pxd":85
 * cdef inline bint r2_ref_div2(_R2& out, const _R2& lhs, const _R2& rhs):
 *     if rhs.x == 0 or rhs.y == 0:
 *         return 0             # <<<<<<<<<<<<<<
 *     out.x = lhs.x / rhs.x
 *     out.y = lhs.y / rhs.y
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/space.pxd":84
 * 
 * cdef inline bint r2_ref_div2(_R2& out, const _R2& lhs, const _R2& rhs):
 *     if rhs.x == 0 or rhs.y == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     out.x = lhs.x / rhs.x
 */
  }

  /* "cycart/native/space.pxd":86
 *     if rhs.x == 0 or rhs.y == 0:
 *         return 0
 *     out.x = lhs.x / rhs.x             # <<<<<<<<<<<<<<
 *     out.y = lhs.y / rhs.y
 *     return 1
 */
  if (unlikely(__pyx_v_rhs.x == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 86, __pyx_L1_error)
  }
  __pyx_v_out.x = (__pyx_v_lhs.x / __pyx_v_rhs.x);

  /* "cycart/native/space.pxd":87
 *         return 0
 *     out.x = lhs.x / rhs.x
 *     out.y = lhs.y / rhs.y             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  if (unlikely(__pyx_v_rhs.y == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 87, __pyx_L1_error)
  }
  __pyx_v_out.y = (__pyx_v_lhs.y / __pyx_v_rhs.y);

  /* "cycart/native/space.pxd":88
 *     out.x = lhs.x / rhs.x
 *     out.y = lhs.y / rhs.y
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint r2_ref_unit(_R2& out, const _R2& vector):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":83
 *     return 1
 * 
 * cdef inline bint r2_ref_div2(_R2& out, const _R2& lhs, const _R2& rhs):             # <<<<<<<<<<<<<<
 *     if rhs.x == 0 or rhs.y == 0:
 *         return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.space.r2_ref_div2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":90
 *     return 1
 * 
 * cdef inline bint r2_ref_unit(_R2& out, const _R2& vector):             # <<<<<<<<<<<<<<
 *     return r2_ref_div(out, vector, r2_magnitude(vector))
 * 
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_ref_unit(struct __pyx_t_6cycart_6native_6dtypes__R2 &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_vector) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("r2_ref_unit", 0);

  /* "cycart/native/space.pxd":91
 * 
 * cdef inline bint r2_ref_unit(_R2& out, const _R2& vector):
 *     return r2_ref_div(out, vector, r2_magnitude(vector))             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint r2_ref_vector_angle(double& radians, const _R2& v1, const _R2& v2):
 */
  __pyx_r = __pyx_f_6cycart_6native_5space_r2_ref_div(__pyx_v_out, __pyx_v_vector, __pyx_f_6cycart_6native_5space_r2_magnitude(__pyx_v_vector));
  goto __pyx_L0;

  /* "cycart/native/space.pxd":90
 *     return 1
 * 
 * cdef inline bint r2_ref_unit(_R2& out, const _R2& vector):             # <<<<<<<<<<<<<<
 *     return r2_ref_div(out, vector, r2_magnitude(vector))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":93
 *     return r2_ref_div(out, vector, r2_magnitude(vector))
 * 
 * cdef inline bint r2_ref_vector_angle(double& radians, const _R2& v1, const _R2& v2):             # <<<<<<<<<<<<<<
 *     cdef double divisor = r2_magnitude(v1) * r2_magnitude(v2)
 *     if divisor == 0:
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_ref_vector_angle(double &__pyx_v_radians, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_v1, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_v2) {
  double __pyx_v_divisor;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("r2_ref_vector_angle", 0);

  /* "cycart/native/space.pxd":94
 * 
 * cdef inline bint r2_ref_vector_angle(double& radians, const _R2& v1, const _R2& v2):
 *     cdef double divisor = r2_magnitude(v1) * r2_magnitude(v2)             # <<<<<<<<<<<<<<
 *     if divisor == 0:
 *         return 0
 */
  __pyx_v_divisor = (__pyx_f_6cycart_6native_5space_r2_magnitude(__pyx_v_v1) * __pyx_f_6cycart_6native_5space_r2_magnitude(__pyx_v_v2));

  /* "cycart/native/space.pxd":95
 * cdef inline bint r2_ref_vector_angle(double& radians, const _R2& v1, const _R2& v2):
 *     cdef double divisor = r2_magnitude(v1) * r2_magnitude(v2)
 *     if divisor == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     (&radians)[0] = acos(r2_dot(v1, v2) / divisor)
 */
  __pyx_t_1 = ((__pyx_v_divisor == 0.0) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/space.pxd":96
 *     cdef double divisor = r2_magnitude(v1) * r2_magnitude(v2)
 *     if divisor == 0:
 *         return 0             # <<<<<<<<<<<<<<
 *     (&radians)[0] = acos(r2_dot(v1, v2) / divisor)
 *     return 1
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/space.pxd":95
 * cdef inline bint r2_ref_vector_angle(double& radians, const _R2& v1, const _R2& v2):
 *     cdef double divisor = r2_magnitude(v1) * r2_magnitude(v2)
 *     if divisor == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     (&radians)[0] = acos(r2_dot(v1, v2) / divisor)
 */
  }

  /* "cycart/native/space.pxd":97
 *     if divisor == 0:
 *         return 0
 *     (&radians)[0] = acos(r2_dot(v1, v2) / divisor)             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  __pyx_t_2 = __pyx_f_6cycart_6native_5space_r2_dot(__pyx_v_v1, __pyx_v_v2);
  if (unlikely(__pyx_v_divisor == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 97, __pyx_L1_error)
  }
  ((&__pyx_v_radians)[0]) = acos((__pyx_t_2 / __pyx_v_divisor));

  /* "cycart/native/space.pxd":98
 *         return 0
 *     (&radians)[0] = acos(r2_dot(v1, v2) / divisor)
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint r2_ref_point_angle(double& radians, const _R2& p1, const _R2& p2, const _R2& p3):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/native/space.pxd":93
 *     return r2_ref_div(out, vector, r2_magnitude(vector))
 * 
 * cdef inline bint r2_ref_vector_angle(double& radians, const _R2& v1, const _R2& v2):             # <<<<<<<<<<<<<<
 *     cdef double divisor = r2_magnitude(v1) * r2_magnitude(v2)
 *     if divisor == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.space.r2_ref_vector_angle", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/space.pxd":100
 *     return 1
 * 
 * cdef inline bint r2_ref_point_angle(double& radians, const _R2& p1, const _R2& p2, const _R2& p3):             # <<<<<<<<<<<<<<
 *     return r2_ref_vector_angle(radians, r2_sub(p1, p2), r2_sub(p3, p2))
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_5space_r2_ref_point_angle(double &__pyx_v_radians, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_p1, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_p2, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_p3) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("r2_ref_point_angle", 0);

  /* "cycart/native/space.pxd":101
 * 
 * cdef inline bint r2_ref_point_angle(double& radians, const _R2& p1, const _R2& p2, const _R2& p3):
 *     return r2_ref_vector_angle(radians, r2_sub(p1, p2), r2_sub(p3, p2))             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_f_6cycart_6native_5space_r2_ref_vector_angle(__pyx_v_radians, __pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_p1, __pyx_v_p2), __pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_p3, __pyx_v_p2));
  goto __pyx_L0;

  /* "cycart/native/space.pxd":100
 *     return 1
 * 
 * cdef inline bint r2_ref_point_angle(double& radians, const _R2& p1, const _R2& p2, const _R2& p3):             # <<<<<<<<<<<<<<
 *     return r2_ref_vector_angle(radians, r2_sub(p1, p2), r2_sub(p3, p2))
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/space.pxd":19
 * """
 * 
 * cdef inline V2 py_v2_new(const _R2& data):             # <<<<<<<<<<<<<<
 *     cdef V2 ret = V2.__new__(V2)
 *     ret.data = data
 */

static CYTHON_INLINE struct __pyx_obj_6cycart_5space_V2 *__pyx_f_6cycart_5space_py_v2_new(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_data) {
  struct __pyx_obj_6cycart_5space_V2 *__pyx_v_ret = 0;
  struct __pyx_obj_6cycart_5space_V2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_v2_new", 0);

  /* "cycart/space.pxd":20
 * 
 * cdef inline V2 py_v2_new(const _R2& data):
 *     cdef V2 ret = V2.__new__(V2)             # <<<<<<<<<<<<<<
 *     ret.data = data
 *     return ret
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_6cycart_5space_V2), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6cycart_5space_V2)))) __PYX_ERR(3, 20, __pyx_L1_error)
  __pyx_v_ret = ((struct __pyx_obj_6cycart_5space_V2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cycart/space.pxd":21
 * cdef inline V2 py_v2_new(const _R2& data):
 *     cdef V2 ret = V2.__new__(V2)
 *     ret.data = data             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  __pyx_v_ret->__pyx_base.data = __pyx_v_data;

  /* "cycart/space.pxd":22
 *     cdef V2 ret = V2.__new__(V2)
 *     ret.data = data
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * cdef inline P2 py_p2_new(const _R2& data):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "cycart/space.pxd":19
 * """
 * 
 * cdef inline V2 py_v2_new(const _R2& data):             # <<<<<<<<<<<<<<
 *     cdef V2 ret = V2.__new__(V2)
 *     ret.data = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.space.py_v2_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/space.pxd":24
 *     return ret
 * 
 * cdef inline P2 py_p2_new(const _R2& data):             # <<<<<<<<<<<<<<
 *     cdef P2 ret = P2.__new__(P2)
 *     ret.data = data
 */

static CYTHON_INLINE struct __pyx_obj_6cycart_5space_P2 *__pyx_f_6cycart_5space_py_p2_new(struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_data) {
  struct __pyx_obj_6cycart_5space_P2 *__pyx_v_ret = 0;
  struct __pyx_obj_6cycart_5space_P2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_p2_new", 0);

  /* "cycart/space.pxd":25
 * 
 * cdef inline P2 py_p2_new(const _R2& data):
 *     cdef P2 ret = P2.__new__(P2)             # <<<<<<<<<<<<<<
 *     ret.data = data
 *     return ret
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_6cycart_5space_P2), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6cycart_5space_P2)))) __PYX_ERR(3, 25, __pyx_L1_error)
  __pyx_v_ret = ((struct __pyx_obj_6cycart_5space_P2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cycart/space.pxd":26
 * cdef inline P2 py_p2_new(const _R2& data):
 *     cdef P2 ret = P2.__new__(P2)
 *     ret.data = data             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  __pyx_v_ret->__pyx_base.data = __pyx_v_data;

  /* "cycart/space.pxd":27
 *     cdef P2 ret = P2.__new__(P2)
 *     ret.data = data
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * cdef inline V2 v2_v2_sub(V2 lhs, V2 rhs):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "cycart/space.pxd":24
 *     return ret
 * 
 * cdef inline P2 py_p2_new(const _R2& data):             # <<<<<<<<<<<<<<
 *     cdef P2 ret = P2.__new__(P2)
 *     ret.data = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.space.py_p2_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/space.pxd":29
 *     return ret
 * 
 * cdef inline V2 v2_v2_sub(V2 lhs, V2 rhs):             # <<<<<<<<<<<<<<
 *     return py_v2_new(r2_sub(lhs.data, rhs.data))
 * 
 */

static CYTHON_INLINE struct __pyx_obj_6cycart_5space_V2 *__pyx_f_6cycart_5space_v2_v2_sub(struct __pyx_obj_6cycart_5space_V2 *__pyx_v_lhs, struct __pyx_obj_6cycart_5space_V2 *__pyx_v_rhs) {
  struct __pyx_obj_6cycart_5space_V2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("v2_v2_sub", 0);

  /* "cycart/space.pxd":30
 * 
 * cdef inline V2 v2_v2_sub(V2 lhs, V2 rhs):
 *     return py_v2_new(r2_sub(lhs.data, rhs.data))             # <<<<<<<<<<<<<<
 * 
 * cdef inline P2 p2_v2_sub(P2 lhs, V2 rhs):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_6cycart_5space_py_v2_new(__pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_lhs->__pyx_base.data, __pyx_v_rhs->__pyx_base.data))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_6cycart_5space_V2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cycart/space.pxd":29
 *     return ret
 * 
 * cdef inline V2 v2_v2_sub(V2 lhs, V2 rhs):             # <<<<<<<<<<<<<<
 *     return py_v2_new(r2_sub(lhs.data, rhs.data))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.space.v2_v2_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/space.pxd":32
 *     return py_v2_new(r2_sub(lhs.data, rhs.data))
 * 
 * cdef inline P2 p2_v2_sub(P2 lhs, V2 rhs):             # <<<<<<<<<<<<<<
 *     return py_p2_new(r2_sub(lhs.data, rhs.data))
 * 
 */

static CYTHON_INLINE struct __pyx_obj_6cycart_5space_P2 *__pyx_f_6cycart_5space_p2_v2_sub(struct __pyx_obj_6cycart_5space_P2 *__pyx_v_lhs, struct __pyx_obj_6cycart_5space_V2 *__pyx_v_rhs) {
  struct __pyx_obj_6cycart_5space_P2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("p2_v2_sub", 0);

  /* "cycart/space.pxd":33
 * 
 * cdef inline P2 p2_v2_sub(P2 lhs, V2 rhs):
 *     return py_p2_new(r2_sub(lhs.data, rhs.data))             # <<<<<<<<<<<<<<
 * 
 * cdef inline P2 v2_p2_sub(V2 lhs, P2 rhs):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_6cycart_5space_py_p2_new(__pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_lhs->__pyx_base.data, __pyx_v_rhs->__pyx_base.data))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_6cycart_5space_P2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cycart/space.pxd":32
 *     return py_v2_new(r2_sub(lhs.data, rhs.data))
 * 
 * cdef inline P2 p2_v2_sub(P2 lhs, V2 rhs):             # <<<<<<<<<<<<<<
 *     return py_p2_new(r2_sub(lhs.data, rhs.data))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.space.p2_v2_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/space.pxd":35
 *     return py_p2_new(r2_sub(lhs.data, rhs.data))
 * 
 * cdef inline P2 v2_p2_sub(V2 lhs, P2 rhs):             # <<<<<<<<<<<<<<
 *     return py_p2_new(r2_sub(lhs.data, rhs.data))
 * 
 */

static CYTHON_INLINE struct __pyx_obj_6cycart_5space_P2 *__pyx_f_6cycart_5space_v2_p2_sub(struct __pyx_obj_6cycart_5space_V2 *__pyx_v_lhs, struct __pyx_obj_6cycart_5space_P2 *__pyx_v_rhs) {
  struct __pyx_obj_6cycart_5space_P2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("v2_p2_sub", 0);

  /* "cycart/space.pxd":36
 * 
 * cdef inline P2 v2_p2_sub(V2 lhs, P2 rhs):
 *     return py_p2_new(r2_sub(lhs.data, rhs.data))             # <<<<<<<<<<<<<<
 * 
 * cdef inline V2 p2_p2_sub(P2 lhs, P2 rhs):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_6cycart_5space_py_p2_new(__pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_lhs->__pyx_base.data, __pyx_v_rhs->__pyx_base.data))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_6cycart_5space_P2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cycart/space.pxd":35
 *     return py_p2_new(r2_sub(lhs.data, rhs.data))
 * 
 * cdef inline P2 v2_p2_sub(V2 lhs, P2 rhs):             # <<<<<<<<<<<<<<
 *     return py_p2_new(r2_sub(lhs.data, rhs.data))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.space.v2_p2_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/space.pxd":38
 *     return py_p2_new(r2_sub(lhs.data, rhs.data))
 * 
 * cdef inline V2 p2_p2_sub(P2 lhs, P2 rhs):             # <<<<<<<<<<<<<<
 *     return py_v2_new(r2_sub(lhs.data, rhs.data))
 * 
 */

static CYTHON_INLINE struct __pyx_obj_6cycart_5space_V2 *__pyx_f_6cycart_5space_p2_p2_sub(struct __pyx_obj_6cycart_5space_P2 *__pyx_v_lhs, struct __pyx_obj_6cycart_5space_P2 *__pyx_v_rhs) {
  struct __pyx_obj_6cycart_5space_V2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("p2_p2_sub", 0);

  /* "cycart/space.pxd":39
 * 
 * cdef inline V2 p2_p2_sub(P2 lhs, P2 rhs):
 *     return py_v2_new(r2_sub(lhs.data, rhs.data))             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint v2_coerce(_R2& out, py_obj):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_6cycart_5space_py_v2_new(__pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_lhs->__pyx_base.data, __pyx_v_rhs->__pyx_base.data))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_6cycart_5space_V2 *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cycart/space.pxd":38
 *     return py_p2_new(r2_sub(lhs.data, rhs.data))
 * 
 * cdef inline V2 p2_p2_sub(P2 lhs, P2 rhs):             # <<<<<<<<<<<<<<
 *     return py_v2_new(r2_sub(lhs.data, rhs.data))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.space.p2_p2_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/space.pxd":41
 *     return py_v2_new(r2_sub(lhs.data, rhs.data))
 * 
 * cdef inline bint v2_coerce(_R2& out, py_obj):             # <<<<<<<<<<<<<<
 *     if isinstance(py_obj, V2):
 *         v2_extract(out, py_obj)
 */

static CYTHON_INLINE int __pyx_f_6cycart_5space_v2_coerce(struct __pyx_t_6cycart_6native_6dtypes__R2 &__pyx_v_out, PyObject *__pyx_v_py_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("v2_coerce", 0);

  /* "cycart/space.pxd":42
 * 
 * cdef inline bint v2_coerce(_R2& out, py_obj):
 *     if isinstance(py_obj, V2):             # <<<<<<<<<<<<<<
 *         v2_extract(out, py_obj)
 *     elif isinstance(py_obj, (float, int)):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_py_obj, __pyx_ptype_6cycart_5space_V2); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cycart/space.pxd":43
 * cdef inline bint v2_coerce(_R2& out, py_obj):
 *     if isinstance(py_obj, V2):
 *         v2_extract(out, py_obj)             # <<<<<<<<<<<<<<
 *     elif isinstance(py_obj, (float, int)):
 *         out.x = py_obj
 */
    if (!(likely(((__pyx_v_py_obj) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_obj, __pyx_ptype_6cycart_5space_V2))))) __PYX_ERR(3, 43, __pyx_L1_error)
    __pyx_f_6cycart_5space_v2_extract(__pyx_v_out, ((struct __pyx_obj_6cycart_5space_V2 *)__pyx_v_py_obj));

    /* "cycart/space.pxd":42
 * 
 * cdef inline bint v2_coerce(_R2& out, py_obj):
 *     if isinstance(py_obj, V2):             # <<<<<<<<<<<<<<
 *         v2_extract(out, py_obj)
 *     elif isinstance(py_obj, (float, int)):
 */
    goto __pyx_L3;
  }

  /* "cycart/space.pxd":44
 *     if isinstance(py_obj, V2):
 *         v2_extract(out, py_obj)
 *     elif isinstance(py_obj, (float, int)):             # <<<<<<<<<<<<<<
 *         out.x = py_obj
 *         out.y = py_obj
 */
  __pyx_t_1 = PyFloat_Check(__pyx_v_py_obj); 
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyInt_Check(__pyx_v_py_obj); 
  __pyx_t_1 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L4_bool_binop_done:;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cycart/space.pxd":45
 *         v2_extract(out, py_obj)
 *     elif isinstance(py_obj, (float, int)):
 *         out.x = py_obj             # <<<<<<<<<<<<<<
 *         out.y = py_obj
 *     else:
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_py_obj); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 45, __pyx_L1_error)
    __pyx_v_out.x = __pyx_t_4;

    /* "cycart/space.pxd":46
 *     elif isinstance(py_obj, (float, int)):
 *         out.x = py_obj
 *         out.y = py_obj             # <<<<<<<<<<<<<<
 *     else:
 *         return 0
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_py_obj); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 46, __pyx_L1_error)
    __pyx_v_out.y = __pyx_t_4;

    /* "cycart/space.pxd":44
 *     if isinstance(py_obj, V2):
 *         v2_extract(out, py_obj)
 *     elif isinstance(py_obj, (float, int)):             # <<<<<<<<<<<<<<
 *         out.x = py_obj
 *         out.y = py_obj
 */
    goto __pyx_L3;
  }

  /* "cycart/space.pxd":48
 *         out.y = py_obj
 *     else:
 *         return 0             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "cycart/space.pxd":49
 *     else:
 *         return 0
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint p2_coerce(_R2& out, py_obj):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/space.pxd":41
 *     return py_v2_new(r2_sub(lhs.data, rhs.data))
 * 
 * cdef inline bint v2_coerce(_R2& out, py_obj):             # <<<<<<<<<<<<<<
 *     if isinstance(py_obj, V2):
 *         v2_extract(out, py_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.space.v2_coerce", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/space.pxd":51
 *     return 1
 * 
 * cdef inline bint p2_coerce(_R2& out, py_obj):             # <<<<<<<<<<<<<<
 *     op_type = type(py_obj)
 *     if op_type is P2:
 */

static CYTHON_INLINE int __pyx_f_6cycart_5space_p2_coerce(struct __pyx_t_6cycart_6native_6dtypes__R2 &__pyx_v_out, PyObject *__pyx_v_py_obj) {
  PyTypeObject *__pyx_v_op_type = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("p2_coerce", 0);

  /* "cycart/space.pxd":52
 * 
 * cdef inline bint p2_coerce(_R2& out, py_obj):
 *     op_type = type(py_obj)             # <<<<<<<<<<<<<<
 *     if op_type is P2:
 *         p2_extract(out, py_obj)
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_py_obj)));
  __pyx_v_op_type = ((PyTypeObject*)((PyObject *)Py_TYPE(__pyx_v_py_obj)));

  /* "cycart/space.pxd":53
 * cdef inline bint p2_coerce(_R2& out, py_obj):
 *     op_type = type(py_obj)
 *     if op_type is P2:             # <<<<<<<<<<<<<<
 *         p2_extract(out, py_obj)
 *     elif op_type is float or op_type is int:
 */
  __pyx_t_1 = (__pyx_v_op_type == __pyx_ptype_6cycart_5space_P2);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cycart/space.pxd":54
 *     op_type = type(py_obj)
 *     if op_type is P2:
 *         p2_extract(out, py_obj)             # <<<<<<<<<<<<<<
 *     elif op_type is float or op_type is int:
 *         out.x = py_obj
 */
    if (!(likely(((__pyx_v_py_obj) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_obj, __pyx_ptype_6cycart_5space_P2))))) __PYX_ERR(3, 54, __pyx_L1_error)
    __pyx_f_6cycart_5space_p2_extract(__pyx_v_out, ((struct __pyx_obj_6cycart_5space_P2 *)__pyx_v_py_obj));

    /* "cycart/space.pxd":53
 * cdef inline bint p2_coerce(_R2& out, py_obj):
 *     op_type = type(py_obj)
 *     if op_type is P2:             # <<<<<<<<<<<<<<
 *         p2_extract(out, py_obj)
 *     elif op_type is float or op_type is int:
 */
    goto __pyx_L3;
  }

  /* "cycart/space.pxd":55
 *     if op_type is P2:
 *         p2_extract(out, py_obj)
 *     elif op_type is float or op_type is int:             # <<<<<<<<<<<<<<
 *         out.x = py_obj
 *         out.y = py_obj
 */
  __pyx_t_1 = (__pyx_v_op_type == (&PyFloat_Type));
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_op_type == (&PyInt_Type));
  __pyx_t_1 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cycart/space.pxd":56
 *         p2_extract(out, py_obj)
 *     elif op_type is float or op_type is int:
 *         out.x = py_obj             # <<<<<<<<<<<<<<
 *         out.y = py_obj
 *     else:
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_py_obj); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 56, __pyx_L1_error)
    __pyx_v_out.x = __pyx_t_4;

    /* "cycart/space.pxd":57
 *     elif op_type is float or op_type is int:
 *         out.x = py_obj
 *         out.y = py_obj             # <<<<<<<<<<<<<<
 *     else:
 *         return 0
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_py_obj); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 57, __pyx_L1_error)
    __pyx_v_out.y = __pyx_t_4;

    /* "cycart/space.pxd":55
 *     if op_type is P2:
 *         p2_extract(out, py_obj)
 *     elif op_type is float or op_type is int:             # <<<<<<<<<<<<<<
 *         out.x = py_obj
 *         out.y = py_obj
 */
    goto __pyx_L3;
  }

  /* "cycart/space.pxd":59
 *         out.y = py_obj
 *     else:
 *         return 0             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "cycart/space.pxd":60
 *     else:
 *         return 0
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * cdef inline void p2_extract(_R2& out, P2 py_obj):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/space.pxd":51
 *     return 1
 * 
 * cdef inline bint p2_coerce(_R2& out, py_obj):             # <<<<<<<<<<<<<<
 *     op_type = type(py_obj)
 *     if op_type is P2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.space.p2_coerce", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_op_type);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/space.pxd":62
 *     return 1
 * 
 * cdef inline void p2_extract(_R2& out, P2 py_obj):             # <<<<<<<<<<<<<<
 *     (&out)[0] = py_obj.data
 * 
 */

static CYTHON_INLINE void __pyx_f_6cycart_5space_p2_extract(struct __pyx_t_6cycart_6native_6dtypes__R2 &__pyx_v_out, struct __pyx_obj_6cycart_5space_P2 *__pyx_v_py_obj) {
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_1;
  __Pyx_RefNannySetupContext("p2_extract", 0);

  /* "cycart/space.pxd":63
 * 
 * cdef inline void p2_extract(_R2& out, P2 py_obj):
 *     (&out)[0] = py_obj.data             # <<<<<<<<<<<<<<
 * 
 * cdef inline void v2_extract(_R2& out, V2 py_obj):
 */
  __pyx_t_1 = __pyx_v_py_obj->__pyx_base.data;
  ((&__pyx_v_out)[0]) = __pyx_t_1;

  /* "cycart/space.pxd":62
 *     return 1
 * 
 * cdef inline void p2_extract(_R2& out, P2 py_obj):             # <<<<<<<<<<<<<<
 *     (&out)[0] = py_obj.data
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cycart/space.pxd":65
 *     (&out)[0] = py_obj.data
 * 
 * cdef inline void v2_extract(_R2& out, V2 py_obj):             # <<<<<<<<<<<<<<
 *     (&out)[0] = py_obj.data
 */

static CYTHON_INLINE void __pyx_f_6cycart_5space_v2_extract(struct __pyx_t_6cycart_6native_6dtypes__R2 &__pyx_v_out, struct __pyx_obj_6cycart_5space_V2 *__pyx_v_py_obj) {
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_1;
  __Pyx_RefNannySetupContext("v2_extract", 0);

  /* "cycart/space.pxd":66
 * 
 * cdef inline void v2_extract(_R2& out, V2 py_obj):
 *     (&out)[0] = py_obj.data             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __pyx_v_py_obj->__pyx_base.data;
  ((&__pyx_v_out)[0]) = __pyx_t_1;

  /* "cycart/space.pxd":65
 *     (&out)[0] = py_obj.data
 * 
 * cdef inline void v2_extract(_R2& out, V2 py_obj):             # <<<<<<<<<<<<<<
 *     (&out)[0] = py_obj.data
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cycart/intersect.pxd":8
 * 
 * 
 * cdef inline py_p2_set_new(vector[_R2]& i2set):             # <<<<<<<<<<<<<<
 *     # can't make this (const vector[_R2]& ) because cython for ... in ... always
 *     # creates a non-const iterator... booooo
 */

static CYTHON_INLINE PyObject *__pyx_f_6cycart_9intersect_py_p2_set_new(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &__pyx_v_i2set) {
  PyObject *__pyx_v_py_vals = NULL;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_i2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2> ::iterator __pyx_t_2;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("py_p2_set_new", 0);

  /* "cycart/intersect.pxd":11
 *     # can't make this (const vector[_R2]& ) because cython for ... in ... always
 *     # creates a non-const iterator... booooo
 *     py_vals = set()             # <<<<<<<<<<<<<<
 *     for i2 in i2set:
 *         py_vals.add(py_p2_new(i2))
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_vals = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cycart/intersect.pxd":12
 *     # creates a non-const iterator... booooo
 *     py_vals = set()
 *     for i2 in i2set:             # <<<<<<<<<<<<<<
 *         py_vals.add(py_p2_new(i2))
 *     return py_vals
 */
  __pyx_t_2 = __pyx_v_i2set.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_i2set.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_i2 = __pyx_t_3;

    /* "cycart/intersect.pxd":13
 *     py_vals = set()
 *     for i2 in i2set:
 *         py_vals.add(py_p2_new(i2))             # <<<<<<<<<<<<<<
 *     return py_vals
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_6cycart_5space_py_p2_new(__pyx_v_i2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySet_Add(__pyx_v_py_vals, __pyx_t_1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cycart/intersect.pxd":12
 *     # creates a non-const iterator... booooo
 *     py_vals = set()
 *     for i2 in i2set:             # <<<<<<<<<<<<<<
 *         py_vals.add(py_p2_new(i2))
 *     return py_vals
 */
  }

  /* "cycart/intersect.pxd":14
 *     for i2 in i2set:
 *         py_vals.add(py_p2_new(i2))
 *     return py_vals             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_vals);
  __pyx_r = __pyx_v_py_vals;
  goto __pyx_L0;

  /* "cycart/intersect.pxd":8
 * 
 * 
 * cdef inline py_p2_set_new(vector[_R2]& i2set):             # <<<<<<<<<<<<<<
 *     # can't make this (const vector[_R2]& ) because cython for ... in ... always
 *     # creates a non-const iterator... booooo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.intersect.py_p2_set_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_vals);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":6
 * 
 * 
 * cdef inline int l2_point_on_side(const _Line& line, const _R2& point):             # <<<<<<<<<<<<<<
 *     cdef double reference
 *     if l2_ref_f_of_x(reference, line, point.x):
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_point_on_side(struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point) {
  double __pyx_v_reference;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("l2_point_on_side", 0);

  /* "line.pxd":8
 * cdef inline int l2_point_on_side(const _Line& line, const _R2& point):
 *     cdef double reference
 *     if l2_ref_f_of_x(reference, line, point.x):             # <<<<<<<<<<<<<<
 *         if point.y > reference:
 *             return 1
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_4line_l2_ref_f_of_x(__pyx_v_reference, __pyx_v_line, __pyx_v_point.x) != 0);
  if (__pyx_t_1) {

    /* "line.pxd":9
 *     cdef double reference
 *     if l2_ref_f_of_x(reference, line, point.x):
 *         if point.y > reference:             # <<<<<<<<<<<<<<
 *             return 1
 *         if point.y < reference:
 */
    __pyx_t_1 = ((__pyx_v_point.y > __pyx_v_reference) != 0);
    if (__pyx_t_1) {

      /* "line.pxd":10
 *     if l2_ref_f_of_x(reference, line, point.x):
 *         if point.y > reference:
 *             return 1             # <<<<<<<<<<<<<<
 *         if point.y < reference:
 *             return -1
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "line.pxd":9
 *     cdef double reference
 *     if l2_ref_f_of_x(reference, line, point.x):
 *         if point.y > reference:             # <<<<<<<<<<<<<<
 *             return 1
 *         if point.y < reference:
 */
    }

    /* "line.pxd":11
 *         if point.y > reference:
 *             return 1
 *         if point.y < reference:             # <<<<<<<<<<<<<<
 *             return -1
 *         return 0
 */
    __pyx_t_1 = ((__pyx_v_point.y < __pyx_v_reference) != 0);
    if (__pyx_t_1) {

      /* "line.pxd":12
 *             return 1
 *         if point.y < reference:
 *             return -1             # <<<<<<<<<<<<<<
 *         return 0
 *     elif l2_ref_f_of_y(reference, line, point.y):
 */
      __pyx_r = -1;
      goto __pyx_L0;

      /* "line.pxd":11
 *         if point.y > reference:
 *             return 1
 *         if point.y < reference:             # <<<<<<<<<<<<<<
 *             return -1
 *         return 0
 */
    }

    /* "line.pxd":13
 *         if point.y < reference:
 *             return -1
 *         return 0             # <<<<<<<<<<<<<<
 *     elif l2_ref_f_of_y(reference, line, point.y):
 *         if point.x > reference:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "line.pxd":8
 * cdef inline int l2_point_on_side(const _Line& line, const _R2& point):
 *     cdef double reference
 *     if l2_ref_f_of_x(reference, line, point.x):             # <<<<<<<<<<<<<<
 *         if point.y > reference:
 *             return 1
 */
  }

  /* "line.pxd":14
 *             return -1
 *         return 0
 *     elif l2_ref_f_of_y(reference, line, point.y):             # <<<<<<<<<<<<<<
 *         if point.x > reference:
 *             return 1
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_4line_l2_ref_f_of_y(__pyx_v_reference, __pyx_v_line, __pyx_v_point.y) != 0);
  if (__pyx_t_1) {

    /* "line.pxd":15
 *         return 0
 *     elif l2_ref_f_of_y(reference, line, point.y):
 *         if point.x > reference:             # <<<<<<<<<<<<<<
 *             return 1
 *         if point.x < reference:
 */
    __pyx_t_1 = ((__pyx_v_point.x > __pyx_v_reference) != 0);
    if (__pyx_t_1) {

      /* "line.pxd":16
 *     elif l2_ref_f_of_y(reference, line, point.y):
 *         if point.x > reference:
 *             return 1             # <<<<<<<<<<<<<<
 *         if point.x < reference:
 *             return -1
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "line.pxd":15
 *         return 0
 *     elif l2_ref_f_of_y(reference, line, point.y):
 *         if point.x > reference:             # <<<<<<<<<<<<<<
 *             return 1
 *         if point.x < reference:
 */
    }

    /* "line.pxd":17
 *         if point.x > reference:
 *             return 1
 *         if point.x < reference:             # <<<<<<<<<<<<<<
 *             return -1
 *         return 0
 */
    __pyx_t_1 = ((__pyx_v_point.x < __pyx_v_reference) != 0);
    if (__pyx_t_1) {

      /* "line.pxd":18
 *             return 1
 *         if point.x < reference:
 *             return -1             # <<<<<<<<<<<<<<
 *         return 0
 *     return -2 # should never happen for non-degenerate line
 */
      __pyx_r = -1;
      goto __pyx_L0;

      /* "line.pxd":17
 *         if point.x > reference:
 *             return 1
 *         if point.x < reference:             # <<<<<<<<<<<<<<
 *             return -1
 *         return 0
 */
    }

    /* "line.pxd":19
 *         if point.x < reference:
 *             return -1
 *         return 0             # <<<<<<<<<<<<<<
 *     return -2 # should never happen for non-degenerate line
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "line.pxd":14
 *             return -1
 *         return 0
 *     elif l2_ref_f_of_y(reference, line, point.y):             # <<<<<<<<<<<<<<
 *         if point.x > reference:
 *             return 1
 */
  }

  /* "line.pxd":20
 *             return -1
 *         return 0
 *     return -2 # should never happen for non-degenerate line             # <<<<<<<<<<<<<<
 * 
 * cdef inline double l2_constant(const _Line& line, const _R2& point):
 */
  __pyx_r = -2;
  goto __pyx_L0;

  /* "line.pxd":6
 * 
 * 
 * cdef inline int l2_point_on_side(const _Line& line, const _R2& point):             # <<<<<<<<<<<<<<
 *     cdef double reference
 *     if l2_ref_f_of_x(reference, line, point.x):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":22
 *     return -2 # should never happen for non-degenerate line
 * 
 * cdef inline double l2_constant(const _Line& line, const _R2& point):             # <<<<<<<<<<<<<<
 *     return line.a * point.x + line.b * point.y
 * 
 */

static CYTHON_INLINE double __pyx_f_6cycart_6native_4line_l2_constant(struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("l2_constant", 0);

  /* "line.pxd":23
 * 
 * cdef inline double l2_constant(const _Line& line, const _R2& point):
 *     return line.a * point.x + line.b * point.y             # <<<<<<<<<<<<<<
 * 
 * cdef inline _R2 l2_normal(const _Line& line):
 */
  __pyx_r = ((__pyx_v_line.a * __pyx_v_point.x) + (__pyx_v_line.b * __pyx_v_point.y));
  goto __pyx_L0;

  /* "line.pxd":22
 *     return -2 # should never happen for non-degenerate line
 * 
 * cdef inline double l2_constant(const _Line& line, const _R2& point):             # <<<<<<<<<<<<<<
 *     return line.a * point.x + line.b * point.y
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":25
 *     return line.a * point.x + line.b * point.y
 * 
 * cdef inline _R2 l2_normal(const _Line& line):             # <<<<<<<<<<<<<<
 *     cdef _R2 norm = _R2(line.a, line.b)
 *     r2_ref_unit(norm, norm)
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_4line_l2_normal(struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_norm;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_1;
  __Pyx_RefNannySetupContext("l2_normal", 0);

  /* "line.pxd":26
 * 
 * cdef inline _R2 l2_normal(const _Line& line):
 *     cdef _R2 norm = _R2(line.a, line.b)             # <<<<<<<<<<<<<<
 *     r2_ref_unit(norm, norm)
 *     return norm
 */
  __pyx_t_1.x = __pyx_v_line.a;
  __pyx_t_1.y = __pyx_v_line.b;
  __pyx_v_norm = __pyx_t_1;

  /* "line.pxd":27
 * cdef inline _R2 l2_normal(const _Line& line):
 *     cdef _R2 norm = _R2(line.a, line.b)
 *     r2_ref_unit(norm, norm)             # <<<<<<<<<<<<<<
 *     return norm
 * 
 */
  (void)(__pyx_f_6cycart_6native_5space_r2_ref_unit(__pyx_v_norm, __pyx_v_norm));

  /* "line.pxd":28
 *     cdef _R2 norm = _R2(line.a, line.b)
 *     r2_ref_unit(norm, norm)
 *     return norm             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_norm;
  goto __pyx_L0;

  /* "line.pxd":25
 *     return line.a * point.x + line.b * point.y
 * 
 * cdef inline _R2 l2_normal(const _Line& line):             # <<<<<<<<<<<<<<
 *     cdef _R2 norm = _R2(line.a, line.b)
 *     r2_ref_unit(norm, norm)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":31
 * 
 * 
 * cdef inline bint l2_approx(const _Line& l1, const _Line& l2, rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(l1.a, l2.a, rtol, atol) and fapprox(l1.b, l2.b, rtol, atol) and fapprox(l1.c, l2.c, rtol, atol)
 * 
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_approx(struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_l1, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_l2, struct __pyx_opt_args_6cycart_6native_4line_l2_approx *__pyx_optional_args) {
  PyObject *__pyx_v_rtol = ((PyObject *)__pyx_float_1eneg_9);
  PyObject *__pyx_v_atol = ((PyObject *)__pyx_int_0);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_opt_args_6cycart_6native_4util_fapprox __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("l2_approx", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_atol = __pyx_optional_args->atol;
      }
    }
  }

  /* "line.pxd":32
 * 
 * cdef inline bint l2_approx(const _Line& l1, const _Line& l2, rtol=1e-9, atol=0):
 *     return fapprox(l1.a, l2.a, rtol, atol) and fapprox(l1.b, l2.b, rtol, atol) and fapprox(l1.c, l2.c, rtol, atol)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_rtol); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 32, __pyx_L1_error)
  __pyx_t_4.__pyx_n = 2;
  __pyx_t_4.rtol = __pyx_t_2;
  __pyx_t_4.atol = __pyx_v_atol;
  __pyx_t_3 = __pyx_f_6cycart_6native_4util_fapprox(__pyx_v_l1.a, __pyx_v_l2.a, &__pyx_t_4); 
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_rtol); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 32, __pyx_L1_error)
  __pyx_t_4.__pyx_n = 2;
  __pyx_t_4.rtol = __pyx_t_2;
  __pyx_t_4.atol = __pyx_v_atol;
  __pyx_t_5 = __pyx_f_6cycart_6native_4util_fapprox(__pyx_v_l1.b, __pyx_v_l2.b, &__pyx_t_4); 
  __pyx_t_3 = (__pyx_t_5 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_rtol); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 32, __pyx_L1_error)
  __pyx_t_4.__pyx_n = 2;
  __pyx_t_4.rtol = __pyx_t_2;
  __pyx_t_4.atol = __pyx_v_atol;
  __pyx_t_3 = __pyx_f_6cycart_6native_4util_fapprox(__pyx_v_l1.c, __pyx_v_l2.c, &__pyx_t_4); 
  __pyx_t_5 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "line.pxd":31
 * 
 * 
 * cdef inline bint l2_approx(const _Line& l1, const _Line& l2, rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(l1.a, l2.a, rtol, atol) and fapprox(l1.b, l2.b, rtol, atol) and fapprox(l1.c, l2.c, rtol, atol)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.line.l2_approx", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":35
 * 
 * 
 * cdef inline _R2 l2_closest_point(const _Line& line, const _R2& point):             # <<<<<<<<<<<<<<
 *     cdef _R2 closest
 *     cdef _Line perp
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_4line_l2_closest_point(struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_closest;
  struct __pyx_t_6cycart_6native_6dtypes__Line __pyx_v_perp;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("l2_closest_point", 0);

  /* "line.pxd":38
 *     cdef _R2 closest
 *     cdef _Line perp
 *     if not l2_ref_perpendicular(perp, line, point):             # <<<<<<<<<<<<<<
 *         closest = point
 *     else:
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_4line_l2_ref_perpendicular(__pyx_v_perp, __pyx_v_line, __pyx_v_point) != 0)) != 0);
  if (__pyx_t_1) {

    /* "line.pxd":39
 *     cdef _Line perp
 *     if not l2_ref_perpendicular(perp, line, point):
 *         closest = point             # <<<<<<<<<<<<<<
 *     else:
 *         l2_l2_intersect(closest, line, perp)
 */
    __pyx_v_closest = __pyx_v_point;

    /* "line.pxd":38
 *     cdef _R2 closest
 *     cdef _Line perp
 *     if not l2_ref_perpendicular(perp, line, point):             # <<<<<<<<<<<<<<
 *         closest = point
 *     else:
 */
    goto __pyx_L3;
  }

  /* "line.pxd":41
 *         closest = point
 *     else:
 *         l2_l2_intersect(closest, line, perp)             # <<<<<<<<<<<<<<
 *     return closest
 * 
 */
  /*else*/ {
    (void)(__pyx_f_6cycart_6native_4line_l2_l2_intersect(__pyx_v_closest, __pyx_v_line, __pyx_v_perp));
  }
  __pyx_L3:;

  /* "line.pxd":42
 *     else:
 *         l2_l2_intersect(closest, line, perp)
 *     return closest             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_closest;
  goto __pyx_L0;

  /* "line.pxd":35
 * 
 * 
 * cdef inline _R2 l2_closest_point(const _Line& line, const _R2& point):             # <<<<<<<<<<<<<<
 *     cdef _R2 closest
 *     cdef _Line perp
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":45
 * 
 * 
 * cdef inline bint l2_contains_point(const _Line& line, const _R2& point, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(l2_constant(line, point), line.c, rtol, atol)
 * 
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_contains_point(struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point, struct __pyx_opt_args_6cycart_6native_4line_l2_contains_point *__pyx_optional_args) {
  double __pyx_v_rtol = ((double)1e-9);
  double __pyx_v_atol = ((double)0.0);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  struct __pyx_opt_args_6cycart_6native_4util_fapprox __pyx_t_3;
  __Pyx_RefNannySetupContext("l2_contains_point", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_atol = __pyx_optional_args->atol;
      }
    }
  }

  /* "line.pxd":46
 * 
 * cdef inline bint l2_contains_point(const _Line& line, const _R2& point, double rtol=1e-9, double atol=0):
 *     return fapprox(l2_constant(line, point), line.c, rtol, atol)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_atol); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 2;
  __pyx_t_3.rtol = __pyx_v_rtol;
  __pyx_t_3.atol = __pyx_t_1;
  __pyx_t_2 = __pyx_f_6cycart_6native_4util_fapprox(__pyx_f_6cycart_6native_4line_l2_constant(__pyx_v_line, __pyx_v_point), __pyx_v_line.c, &__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "line.pxd":45
 * 
 * 
 * cdef inline bint l2_contains_point(const _Line& line, const _R2& point, double rtol=1e-9, double atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(l2_constant(line, point), line.c, rtol, atol)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("cycart.native.line.l2_contains_point", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":53
 * """
 * 
 * cdef inline bint l2_ref_normalize(_Line& out):             # <<<<<<<<<<<<<<
 *     if out.a == 0 and out.b == 0:
 *         return 0
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_normalize(struct __pyx_t_6cycart_6native_6dtypes__Line &__pyx_v_out) {
  double __pyx_v_divisor;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("l2_ref_normalize", 0);

  /* "line.pxd":54
 * 
 * cdef inline bint l2_ref_normalize(_Line& out):
 *     if out.a == 0 and out.b == 0:             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_t_2 = ((__pyx_v_out.a == 0.0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_out.b == 0.0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "line.pxd":55
 * cdef inline bint l2_ref_normalize(_Line& out):
 *     if out.a == 0 and out.b == 0:
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cdef double divisor = 0
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "line.pxd":54
 * 
 * cdef inline bint l2_ref_normalize(_Line& out):
 *     if out.a == 0 and out.b == 0:             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  }

  /* "line.pxd":57
 *         return 0
 * 
 *     cdef double divisor = 0             # <<<<<<<<<<<<<<
 *     if out.c:
 *         divisor = out.c
 */
  __pyx_v_divisor = 0.0;

  /* "line.pxd":58
 * 
 *     cdef double divisor = 0
 *     if out.c:             # <<<<<<<<<<<<<<
 *         divisor = out.c
 *     elif out.b:
 */
  __pyx_t_1 = (__pyx_v_out.c != 0);
  if (__pyx_t_1) {

    /* "line.pxd":59
 *     cdef double divisor = 0
 *     if out.c:
 *         divisor = out.c             # <<<<<<<<<<<<<<
 *     elif out.b:
 *         divisor = out.b
 */
    __pyx_t_3 = __pyx_v_out.c;
    __pyx_v_divisor = __pyx_t_3;

    /* "line.pxd":58
 * 
 *     cdef double divisor = 0
 *     if out.c:             # <<<<<<<<<<<<<<
 *         divisor = out.c
 *     elif out.b:
 */
    goto __pyx_L6;
  }

  /* "line.pxd":60
 *     if out.c:
 *         divisor = out.c
 *     elif out.b:             # <<<<<<<<<<<<<<
 *         divisor = out.b
 *     elif out.a:
 */
  __pyx_t_1 = (__pyx_v_out.b != 0);
  if (__pyx_t_1) {

    /* "line.pxd":61
 *         divisor = out.c
 *     elif out.b:
 *         divisor = out.b             # <<<<<<<<<<<<<<
 *     elif out.a:
 *         divisor = out.a
 */
    __pyx_t_3 = __pyx_v_out.b;
    __pyx_v_divisor = __pyx_t_3;

    /* "line.pxd":60
 *     if out.c:
 *         divisor = out.c
 *     elif out.b:             # <<<<<<<<<<<<<<
 *         divisor = out.b
 *     elif out.a:
 */
    goto __pyx_L6;
  }

  /* "line.pxd":62
 *     elif out.b:
 *         divisor = out.b
 *     elif out.a:             # <<<<<<<<<<<<<<
 *         divisor = out.a
 * 
 */
  __pyx_t_1 = (__pyx_v_out.a != 0);
  if (__pyx_t_1) {

    /* "line.pxd":63
 *         divisor = out.b
 *     elif out.a:
 *         divisor = out.a             # <<<<<<<<<<<<<<
 * 
 *     out.c /= divisor
 */
    __pyx_t_3 = __pyx_v_out.a;
    __pyx_v_divisor = __pyx_t_3;

    /* "line.pxd":62
 *     elif out.b:
 *         divisor = out.b
 *     elif out.a:             # <<<<<<<<<<<<<<
 *         divisor = out.a
 * 
 */
  }
  __pyx_L6:;

  /* "line.pxd":65
 *         divisor = out.a
 * 
 *     out.c /= divisor             # <<<<<<<<<<<<<<
 *     out.b /= divisor
 *     out.a /= divisor
 */
  if (unlikely(__pyx_v_divisor == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(5, 65, __pyx_L1_error)
  }
  __pyx_v_out.c = (__pyx_v_out.c / __pyx_v_divisor);

  /* "line.pxd":66
 * 
 *     out.c /= divisor
 *     out.b /= divisor             # <<<<<<<<<<<<<<
 *     out.a /= divisor
 *     return 1
 */
  if (unlikely(__pyx_v_divisor == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(5, 66, __pyx_L1_error)
  }
  __pyx_v_out.b = (__pyx_v_out.b / __pyx_v_divisor);

  /* "line.pxd":67
 *     out.c /= divisor
 *     out.b /= divisor
 *     out.a /= divisor             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  if (unlikely(__pyx_v_divisor == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(5, 67, __pyx_L1_error)
  }
  __pyx_v_out.a = (__pyx_v_out.a / __pyx_v_divisor);

  /* "line.pxd":68
 *     out.b /= divisor
 *     out.a /= divisor
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint l2_ref_by_points(_Line& out, const _R2& p1, const _R2& p2):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "line.pxd":53
 * """
 * 
 * cdef inline bint l2_ref_normalize(_Line& out):             # <<<<<<<<<<<<<<
 *     if out.a == 0 and out.b == 0:
 *         return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.line.l2_ref_normalize", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":70
 *     return 1
 * 
 * cdef inline bint l2_ref_by_points(_Line& out, const _R2& p1, const _R2& p2):             # <<<<<<<<<<<<<<
 *     out.a = p1.y - p2.y # -dy
 *     out.b = p2.x - p1.x # dx
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_by_points(struct __pyx_t_6cycart_6native_6dtypes__Line &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_p1, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_p2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("l2_ref_by_points", 0);

  /* "line.pxd":71
 * 
 * cdef inline bint l2_ref_by_points(_Line& out, const _R2& p1, const _R2& p2):
 *     out.a = p1.y - p2.y # -dy             # <<<<<<<<<<<<<<
 *     out.b = p2.x - p1.x # dx
 *     out.c = out.b * p1.y + out.a * p1.x
 */
  __pyx_v_out.a = (__pyx_v_p1.y - __pyx_v_p2.y);

  /* "line.pxd":72
 * cdef inline bint l2_ref_by_points(_Line& out, const _R2& p1, const _R2& p2):
 *     out.a = p1.y - p2.y # -dy
 *     out.b = p2.x - p1.x # dx             # <<<<<<<<<<<<<<
 *     out.c = out.b * p1.y + out.a * p1.x
 *     return l2_ref_normalize(out)
 */
  __pyx_v_out.b = (__pyx_v_p2.x - __pyx_v_p1.x);

  /* "line.pxd":73
 *     out.a = p1.y - p2.y # -dy
 *     out.b = p2.x - p1.x # dx
 *     out.c = out.b * p1.y + out.a * p1.x             # <<<<<<<<<<<<<<
 *     return l2_ref_normalize(out)
 * 
 */
  __pyx_v_out.c = ((__pyx_v_out.b * __pyx_v_p1.y) + (__pyx_v_out.a * __pyx_v_p1.x));

  /* "line.pxd":74
 *     out.b = p2.x - p1.x # dx
 *     out.c = out.b * p1.y + out.a * p1.x
 *     return l2_ref_normalize(out)             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint l2_ref_translate(_Line& out, const _Line& line, const _R2& vec):
 */
  __pyx_r = __pyx_f_6cycart_6native_4line_l2_ref_normalize(__pyx_v_out);
  goto __pyx_L0;

  /* "line.pxd":70
 *     return 1
 * 
 * cdef inline bint l2_ref_by_points(_Line& out, const _R2& p1, const _R2& p2):             # <<<<<<<<<<<<<<
 *     out.a = p1.y - p2.y # -dy
 *     out.b = p2.x - p1.x # dx
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":76
 *     return l2_ref_normalize(out)
 * 
 * cdef inline bint l2_ref_translate(_Line& out, const _Line& line, const _R2& vec):             # <<<<<<<<<<<<<<
 *     out.a = line.a * (line.c + line.b * vec.y)
 *     out.b = line.b * (line.c + line.a * vec.x)
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_translate(struct __pyx_t_6cycart_6native_6dtypes__Line &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_vec) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("l2_ref_translate", 0);

  /* "line.pxd":77
 * 
 * cdef inline bint l2_ref_translate(_Line& out, const _Line& line, const _R2& vec):
 *     out.a = line.a * (line.c + line.b * vec.y)             # <<<<<<<<<<<<<<
 *     out.b = line.b * (line.c + line.a * vec.x)
 *     out.c = line.c ** 2
 */
  __pyx_v_out.a = (__pyx_v_line.a * (__pyx_v_line.c + (__pyx_v_line.b * __pyx_v_vec.y)));

  /* "line.pxd":78
 * cdef inline bint l2_ref_translate(_Line& out, const _Line& line, const _R2& vec):
 *     out.a = line.a * (line.c + line.b * vec.y)
 *     out.b = line.b * (line.c + line.a * vec.x)             # <<<<<<<<<<<<<<
 *     out.c = line.c ** 2
 *     out.c += line.a * line.c * vec.x
 */
  __pyx_v_out.b = (__pyx_v_line.b * (__pyx_v_line.c + (__pyx_v_line.a * __pyx_v_vec.x)));

  /* "line.pxd":79
 *     out.a = line.a * (line.c + line.b * vec.y)
 *     out.b = line.b * (line.c + line.a * vec.x)
 *     out.c = line.c ** 2             # <<<<<<<<<<<<<<
 *     out.c += line.a * line.c * vec.x
 *     out.c += line.b * line.c * vec.y
 */
  __pyx_v_out.c = pow(((double)__pyx_v_line.c), 2.0);

  /* "line.pxd":80
 *     out.b = line.b * (line.c + line.a * vec.x)
 *     out.c = line.c ** 2
 *     out.c += line.a * line.c * vec.x             # <<<<<<<<<<<<<<
 *     out.c += line.b * line.c * vec.y
 *     out.c += line.a * line.b * vec.x * vec.y
 */
  __pyx_v_out.c = (__pyx_v_out.c + ((__pyx_v_line.a * __pyx_v_line.c) * __pyx_v_vec.x));

  /* "line.pxd":81
 *     out.c = line.c ** 2
 *     out.c += line.a * line.c * vec.x
 *     out.c += line.b * line.c * vec.y             # <<<<<<<<<<<<<<
 *     out.c += line.a * line.b * vec.x * vec.y
 *     return l2_ref_normalize(out)
 */
  __pyx_v_out.c = (__pyx_v_out.c + ((__pyx_v_line.b * __pyx_v_line.c) * __pyx_v_vec.y));

  /* "line.pxd":82
 *     out.c += line.a * line.c * vec.x
 *     out.c += line.b * line.c * vec.y
 *     out.c += line.a * line.b * vec.x * vec.y             # <<<<<<<<<<<<<<
 *     return l2_ref_normalize(out)
 * 
 */
  __pyx_v_out.c = (__pyx_v_out.c + (((__pyx_v_line.a * __pyx_v_line.b) * __pyx_v_vec.x) * __pyx_v_vec.y));

  /* "line.pxd":83
 *     out.c += line.b * line.c * vec.y
 *     out.c += line.a * line.b * vec.x * vec.y
 *     return l2_ref_normalize(out)             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint l2_ref_perpendicular(_Line& out, const _Line& line, const _R2& point):
 */
  __pyx_r = __pyx_f_6cycart_6native_4line_l2_ref_normalize(__pyx_v_out);
  goto __pyx_L0;

  /* "line.pxd":76
 *     return l2_ref_normalize(out)
 * 
 * cdef inline bint l2_ref_translate(_Line& out, const _Line& line, const _R2& vec):             # <<<<<<<<<<<<<<
 *     out.a = line.a * (line.c + line.b * vec.y)
 *     out.b = line.b * (line.c + line.a * vec.x)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":85
 *     return l2_ref_normalize(out)
 * 
 * cdef inline bint l2_ref_perpendicular(_Line& out, const _Line& line, const _R2& point):             # <<<<<<<<<<<<<<
 *     #todo: check contains
 *     out.a = -line.b
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_perpendicular(struct __pyx_t_6cycart_6native_6dtypes__Line &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("l2_ref_perpendicular", 0);

  /* "line.pxd":87
 * cdef inline bint l2_ref_perpendicular(_Line& out, const _Line& line, const _R2& point):
 *     #todo: check contains
 *     out.a = -line.b             # <<<<<<<<<<<<<<
 *     out.b = line.a
 *     out.c = line.a * point.y - line.b * point.x
 */
  __pyx_v_out.a = (-__pyx_v_line.b);

  /* "line.pxd":88
 *     #todo: check contains
 *     out.a = -line.b
 *     out.b = line.a             # <<<<<<<<<<<<<<
 *     out.c = line.a * point.y - line.b * point.x
 *     return l2_ref_normalize(out)
 */
  __pyx_t_1 = __pyx_v_line.a;
  __pyx_v_out.b = __pyx_t_1;

  /* "line.pxd":89
 *     out.a = -line.b
 *     out.b = line.a
 *     out.c = line.a * point.y - line.b * point.x             # <<<<<<<<<<<<<<
 *     return l2_ref_normalize(out)
 * 
 */
  __pyx_v_out.c = ((__pyx_v_line.a * __pyx_v_point.y) - (__pyx_v_line.b * __pyx_v_point.x));

  /* "line.pxd":90
 *     out.b = line.a
 *     out.c = line.a * point.y - line.b * point.x
 *     return l2_ref_normalize(out)             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint l2_ref_parallel(_Line& out, const _Line& line, const _R2& point):
 */
  __pyx_r = __pyx_f_6cycart_6native_4line_l2_ref_normalize(__pyx_v_out);
  goto __pyx_L0;

  /* "line.pxd":85
 *     return l2_ref_normalize(out)
 * 
 * cdef inline bint l2_ref_perpendicular(_Line& out, const _Line& line, const _R2& point):             # <<<<<<<<<<<<<<
 *     #todo: check contains
 *     out.a = -line.b
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":92
 *     return l2_ref_normalize(out)
 * 
 * cdef inline bint l2_ref_parallel(_Line& out, const _Line& line, const _R2& point):             # <<<<<<<<<<<<<<
 *     out.a = line.a
 *     out.b = line.b
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_parallel(struct __pyx_t_6cycart_6native_6dtypes__Line &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("l2_ref_parallel", 0);

  /* "line.pxd":93
 * 
 * cdef inline bint l2_ref_parallel(_Line& out, const _Line& line, const _R2& point):
 *     out.a = line.a             # <<<<<<<<<<<<<<
 *     out.b = line.b
 *     out.c = line.a * point.x + line.b * point.y
 */
  __pyx_t_1 = __pyx_v_line.a;
  __pyx_v_out.a = __pyx_t_1;

  /* "line.pxd":94
 * cdef inline bint l2_ref_parallel(_Line& out, const _Line& line, const _R2& point):
 *     out.a = line.a
 *     out.b = line.b             # <<<<<<<<<<<<<<
 *     out.c = line.a * point.x + line.b * point.y
 *     return l2_ref_normalize(out)
 */
  __pyx_t_1 = __pyx_v_line.b;
  __pyx_v_out.b = __pyx_t_1;

  /* "line.pxd":95
 *     out.a = line.a
 *     out.b = line.b
 *     out.c = line.a * point.x + line.b * point.y             # <<<<<<<<<<<<<<
 *     return l2_ref_normalize(out)
 * 
 */
  __pyx_v_out.c = ((__pyx_v_line.a * __pyx_v_point.x) + (__pyx_v_line.b * __pyx_v_point.y));

  /* "line.pxd":96
 *     out.b = line.b
 *     out.c = line.a * point.x + line.b * point.y
 *     return l2_ref_normalize(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_6cycart_6native_4line_l2_ref_normalize(__pyx_v_out);
  goto __pyx_L0;

  /* "line.pxd":92
 *     return l2_ref_normalize(out)
 * 
 * cdef inline bint l2_ref_parallel(_Line& out, const _Line& line, const _R2& point):             # <<<<<<<<<<<<<<
 *     out.a = line.a
 *     out.b = line.b
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":100
 * 
 * 
 * cdef inline bint l2_l2_intersect(_R2& out, const _Line& l1, const _Line& l2):             # <<<<<<<<<<<<<<
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 *     if det == 0:
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_l2_intersect(struct __pyx_t_6cycart_6native_6dtypes__R2 &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_l1, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_l2) {
  PyObject *__pyx_v_det = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("l2_l2_intersect", 0);

  /* "line.pxd":101
 * 
 * cdef inline bint l2_l2_intersect(_R2& out, const _Line& l1, const _Line& l2):
 *     cdef det = l1.a * l2.b - l1.b * l2.a             # <<<<<<<<<<<<<<
 *     if det == 0:
 *         return 0
 */
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_l1.a * __pyx_v_l2.b) - (__pyx_v_l1.b * __pyx_v_l2.a))); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_det = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "line.pxd":102
 * cdef inline bint l2_l2_intersect(_R2& out, const _Line& l1, const _Line& l2):
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 *     if det == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_det, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "line.pxd":103
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 *     if det == 0:
 *         return 0             # <<<<<<<<<<<<<<
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det
 *     out.y = (l1.a * l2.c - l2.a * l1.c) / det
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "line.pxd":102
 * cdef inline bint l2_l2_intersect(_R2& out, const _Line& l1, const _Line& l2):
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 *     if det == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det
 */
  }

  /* "line.pxd":104
 *     if det == 0:
 *         return 0
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det             # <<<<<<<<<<<<<<
 *     out.y = (l1.a * l2.c - l2.a * l1.c) / det
 *     return 1
 */
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_l2.b * __pyx_v_l1.c) - (__pyx_v_l1.b * __pyx_v_l2.c))); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_det); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_out.x = __pyx_t_4;

  /* "line.pxd":105
 *         return 0
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det
 *     out.y = (l1.a * l2.c - l2.a * l1.c) / det             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_l1.a * __pyx_v_l2.c) - (__pyx_v_l2.a * __pyx_v_l1.c))); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_det); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out.y = __pyx_t_4;

  /* "line.pxd":106
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det
 *     out.y = (l1.a * l2.c - l2.a * l1.c) / det
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint l2_ref_f_of_y(double& out, const _Line& line, double y):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "line.pxd":100
 * 
 * 
 * cdef inline bint l2_l2_intersect(_R2& out, const _Line& l1, const _Line& l2):             # <<<<<<<<<<<<<<
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 *     if det == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cycart.native.line.l2_l2_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_det);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":108
 *     return 1
 * 
 * cdef inline bint l2_ref_f_of_y(double& out, const _Line& line, double y):             # <<<<<<<<<<<<<<
 *     if line.a == 0:
 *         return 0
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_f_of_y(double &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line, double __pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("l2_ref_f_of_y", 0);

  /* "line.pxd":109
 * 
 * cdef inline bint l2_ref_f_of_y(double& out, const _Line& line, double y):
 *     if line.a == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     (&out)[0] = (line.c - line.b * y) / line.a
 */
  __pyx_t_1 = ((__pyx_v_line.a == 0.0) != 0);
  if (__pyx_t_1) {

    /* "line.pxd":110
 * cdef inline bint l2_ref_f_of_y(double& out, const _Line& line, double y):
 *     if line.a == 0:
 *         return 0             # <<<<<<<<<<<<<<
 *     (&out)[0] = (line.c - line.b * y) / line.a
 *     return 1
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "line.pxd":109
 * 
 * cdef inline bint l2_ref_f_of_y(double& out, const _Line& line, double y):
 *     if line.a == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     (&out)[0] = (line.c - line.b * y) / line.a
 */
  }

  /* "line.pxd":111
 *     if line.a == 0:
 *         return 0
 *     (&out)[0] = (line.c - line.b * y) / line.a             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  __pyx_t_2 = (__pyx_v_line.c - (__pyx_v_line.b * __pyx_v_y));
  if (unlikely(__pyx_v_line.a == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(5, 111, __pyx_L1_error)
  }
  ((&__pyx_v_out)[0]) = (__pyx_t_2 / __pyx_v_line.a);

  /* "line.pxd":112
 *         return 0
 *     (&out)[0] = (line.c - line.b * y) / line.a
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint l2_ref_f_of_x(double& out, const _Line& line, double x):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "line.pxd":108
 *     return 1
 * 
 * cdef inline bint l2_ref_f_of_y(double& out, const _Line& line, double y):             # <<<<<<<<<<<<<<
 *     if line.a == 0:
 *         return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.line.l2_ref_f_of_y", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "line.pxd":114
 *     return 1
 * 
 * cdef inline bint l2_ref_f_of_x(double& out, const _Line& line, double x):             # <<<<<<<<<<<<<<
 *     if line.b == 0:
 *         return 0
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_4line_l2_ref_f_of_x(double &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line, double __pyx_v_x) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("l2_ref_f_of_x", 0);

  /* "line.pxd":115
 * 
 * cdef inline bint l2_ref_f_of_x(double& out, const _Line& line, double x):
 *     if line.b == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     (&out)[0] = (line.c - line.a * x) / line.b
 */
  __pyx_t_1 = ((__pyx_v_line.b == 0.0) != 0);
  if (__pyx_t_1) {

    /* "line.pxd":116
 * cdef inline bint l2_ref_f_of_x(double& out, const _Line& line, double x):
 *     if line.b == 0:
 *         return 0             # <<<<<<<<<<<<<<
 *     (&out)[0] = (line.c - line.a * x) / line.b
 *     return 1
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "line.pxd":115
 * 
 * cdef inline bint l2_ref_f_of_x(double& out, const _Line& line, double x):
 *     if line.b == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     (&out)[0] = (line.c - line.a * x) / line.b
 */
  }

  /* "line.pxd":117
 *     if line.b == 0:
 *         return 0
 *     (&out)[0] = (line.c - line.a * x) / line.b             # <<<<<<<<<<<<<<
 *     return 1
 */
  __pyx_t_2 = (__pyx_v_line.c - (__pyx_v_line.a * __pyx_v_x));
  if (unlikely(__pyx_v_line.b == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(5, 117, __pyx_L1_error)
  }
  ((&__pyx_v_out)[0]) = (__pyx_t_2 / __pyx_v_line.b);

  /* "line.pxd":118
 *         return 0
 *     (&out)[0] = (line.c - line.a * x) / line.b
 *     return 1             # <<<<<<<<<<<<<<
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "line.pxd":114
 *     return 1
 * 
 * cdef inline bint l2_ref_f_of_x(double& out, const _Line& line, double x):             # <<<<<<<<<<<<<<
 *     if line.b == 0:
 *         return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.line.l2_ref_f_of_x", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "segment.pxd":24
 * """
 * 
 * cdef inline _LineSegment ls2_normalized(const _LineSegment& segment):             # <<<<<<<<<<<<<<
 *     if r2_cmp_points(segment.p1, segment.p2) <= 0:
 *         return segment
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_f_6cycart_6native_7segment_ls2_normalized(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_segment) {
  struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_t_2;
  __Pyx_RefNannySetupContext("ls2_normalized", 0);

  /* "segment.pxd":25
 * 
 * cdef inline _LineSegment ls2_normalized(const _LineSegment& segment):
 *     if r2_cmp_points(segment.p1, segment.p2) <= 0:             # <<<<<<<<<<<<<<
 *         return segment
 *     return _LineSegment(segment.p2, segment.p1)
 */
  __pyx_t_1 = ((__pyx_f_6cycart_6native_5space_r2_cmp_points(__pyx_v_segment.p1, __pyx_v_segment.p2) <= 0) != 0);
  if (__pyx_t_1) {

    /* "segment.pxd":26
 * cdef inline _LineSegment ls2_normalized(const _LineSegment& segment):
 *     if r2_cmp_points(segment.p1, segment.p2) <= 0:
 *         return segment             # <<<<<<<<<<<<<<
 *     return _LineSegment(segment.p2, segment.p1)
 * 
 */
    __pyx_r = __pyx_v_segment;
    goto __pyx_L0;

    /* "segment.pxd":25
 * 
 * cdef inline _LineSegment ls2_normalized(const _LineSegment& segment):
 *     if r2_cmp_points(segment.p1, segment.p2) <= 0:             # <<<<<<<<<<<<<<
 *         return segment
 *     return _LineSegment(segment.p2, segment.p1)
 */
  }

  /* "segment.pxd":27
 *     if r2_cmp_points(segment.p1, segment.p2) <= 0:
 *         return segment
 *     return _LineSegment(segment.p2, segment.p1)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double ls2_length(const _LineSegment& segment):
 */
  __pyx_t_2.p1 = __pyx_v_segment.p2;
  __pyx_t_2.p2 = __pyx_v_segment.p1;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "segment.pxd":24
 * """
 * 
 * cdef inline _LineSegment ls2_normalized(const _LineSegment& segment):             # <<<<<<<<<<<<<<
 *     if r2_cmp_points(segment.p1, segment.p2) <= 0:
 *         return segment
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "segment.pxd":29
 *     return _LineSegment(segment.p2, segment.p1)
 * 
 * cdef inline double ls2_length(const _LineSegment& segment):             # <<<<<<<<<<<<<<
 *     return r2_magnitude(ls2_vector(segment))
 * 
 */

static CYTHON_INLINE double __pyx_f_6cycart_6native_7segment_ls2_length(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_segment) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ls2_length", 0);

  /* "segment.pxd":30
 * 
 * cdef inline double ls2_length(const _LineSegment& segment):
 *     return r2_magnitude(ls2_vector(segment))             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint ls2_contains_strict(const _LineSegment& segment, const _R2& point):
 */
  __pyx_r = __pyx_f_6cycart_6native_5space_r2_magnitude(__pyx_f_6cycart_6native_7segment_ls2_vector(__pyx_v_segment));
  goto __pyx_L0;

  /* "segment.pxd":29
 *     return _LineSegment(segment.p2, segment.p1)
 * 
 * cdef inline double ls2_length(const _LineSegment& segment):             # <<<<<<<<<<<<<<
 *     return r2_magnitude(ls2_vector(segment))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "segment.pxd":32
 *     return r2_magnitude(ls2_vector(segment))
 * 
 * cdef inline bint ls2_contains_strict(const _LineSegment& segment, const _R2& point):             # <<<<<<<<<<<<<<
 *     cdef _R2 ref_vector = ls2_vector(segment)
 *     cdef _R2 test_vector = r2_sub(point, segment.p1)
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_7segment_ls2_contains_strict(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_segment, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_ref_vector;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_test_vector;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("ls2_contains_strict", 0);

  /* "segment.pxd":33
 * 
 * cdef inline bint ls2_contains_strict(const _LineSegment& segment, const _R2& point):
 *     cdef _R2 ref_vector = ls2_vector(segment)             # <<<<<<<<<<<<<<
 *     cdef _R2 test_vector = r2_sub(point, segment.p1)
 * 
 */
  __pyx_v_ref_vector = __pyx_f_6cycart_6native_7segment_ls2_vector(__pyx_v_segment);

  /* "segment.pxd":34
 * cdef inline bint ls2_contains_strict(const _LineSegment& segment, const _R2& point):
 *     cdef _R2 ref_vector = ls2_vector(segment)
 *     cdef _R2 test_vector = r2_sub(point, segment.p1)             # <<<<<<<<<<<<<<
 * 
 *     if not r2_parallel(ref_vector, test_vector):
 */
  __pyx_v_test_vector = __pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_point, __pyx_v_segment.p1);

  /* "segment.pxd":36
 *     cdef _R2 test_vector = r2_sub(point, segment.p1)
 * 
 *     if not r2_parallel(ref_vector, test_vector):             # <<<<<<<<<<<<<<
 *         return 0
 *     return 0 < r2_dot(ref_vector, test_vector) < r2_dot(ref_vector, ref_vector)
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_5space_r2_parallel(__pyx_v_ref_vector, __pyx_v_test_vector, NULL) != 0)) != 0);
  if (__pyx_t_1) {

    /* "segment.pxd":37
 * 
 *     if not r2_parallel(ref_vector, test_vector):
 *         return 0             # <<<<<<<<<<<<<<
 *     return 0 < r2_dot(ref_vector, test_vector) < r2_dot(ref_vector, ref_vector)
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "segment.pxd":36
 *     cdef _R2 test_vector = r2_sub(point, segment.p1)
 * 
 *     if not r2_parallel(ref_vector, test_vector):             # <<<<<<<<<<<<<<
 *         return 0
 *     return 0 < r2_dot(ref_vector, test_vector) < r2_dot(ref_vector, ref_vector)
 */
  }

  /* "segment.pxd":38
 *     if not r2_parallel(ref_vector, test_vector):
 *         return 0
 *     return 0 < r2_dot(ref_vector, test_vector) < r2_dot(ref_vector, ref_vector)             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint ls2_contains(const _LineSegment& segment, const _R2& point, double rtol=1e-9, atol=0):
 */
  __pyx_t_2 = __pyx_f_6cycart_6native_5space_r2_dot(__pyx_v_ref_vector, __pyx_v_test_vector);
  __pyx_t_1 = (0.0 < __pyx_t_2);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_t_2 < __pyx_f_6cycart_6native_5space_r2_dot(__pyx_v_ref_vector, __pyx_v_ref_vector));
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "segment.pxd":32
 *     return r2_magnitude(ls2_vector(segment))
 * 
 * cdef inline bint ls2_contains_strict(const _LineSegment& segment, const _R2& point):             # <<<<<<<<<<<<<<
 *     cdef _R2 ref_vector = ls2_vector(segment)
 *     cdef _R2 test_vector = r2_sub(point, segment.p1)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "segment.pxd":40
 *     return 0 < r2_dot(ref_vector, test_vector) < r2_dot(ref_vector, ref_vector)
 * 
 * cdef inline bint ls2_contains(const _LineSegment& segment, const _R2& point, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     if ls2_contains_strict(segment, point):
 *         return 1
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_7segment_ls2_contains(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_segment, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point, struct __pyx_opt_args_6cycart_6native_7segment_ls2_contains *__pyx_optional_args) {
  double __pyx_v_rtol = ((double)1e-9);
  PyObject *__pyx_v_atol = ((PyObject *)__pyx_int_0);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  struct __pyx_opt_args_6cycart_6native_5space_r2_approx __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("ls2_contains", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_atol = __pyx_optional_args->atol;
      }
    }
  }

  /* "segment.pxd":41
 * 
 * cdef inline bint ls2_contains(const _LineSegment& segment, const _R2& point, double rtol=1e-9, atol=0):
 *     if ls2_contains_strict(segment, point):             # <<<<<<<<<<<<<<
 *         return 1
 *     if r2_approx(segment.p1, point, rtol, atol):
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_7segment_ls2_contains_strict(__pyx_v_segment, __pyx_v_point) != 0);
  if (__pyx_t_1) {

    /* "segment.pxd":42
 * cdef inline bint ls2_contains(const _LineSegment& segment, const _R2& point, double rtol=1e-9, atol=0):
 *     if ls2_contains_strict(segment, point):
 *         return 1             # <<<<<<<<<<<<<<
 *     if r2_approx(segment.p1, point, rtol, atol):
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "segment.pxd":41
 * 
 * cdef inline bint ls2_contains(const _LineSegment& segment, const _R2& point, double rtol=1e-9, atol=0):
 *     if ls2_contains_strict(segment, point):             # <<<<<<<<<<<<<<
 *         return 1
 *     if r2_approx(segment.p1, point, rtol, atol):
 */
  }

  /* "segment.pxd":43
 *     if ls2_contains_strict(segment, point):
 *         return 1
 *     if r2_approx(segment.p1, point, rtol, atol):             # <<<<<<<<<<<<<<
 *         return 1
 *     if r2_approx(segment.p2, point, rtol, atol):
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_atol); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 43, __pyx_L1_error)
  __pyx_t_3.__pyx_n = 2;
  __pyx_t_3.rtol = __pyx_v_rtol;
  __pyx_t_3.atol = __pyx_t_2;
  __pyx_t_1 = __pyx_f_6cycart_6native_5space_r2_approx(__pyx_v_segment.p1, __pyx_v_point, &__pyx_t_3); 
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {

    /* "segment.pxd":44
 *         return 1
 *     if r2_approx(segment.p1, point, rtol, atol):
 *         return 1             # <<<<<<<<<<<<<<
 *     if r2_approx(segment.p2, point, rtol, atol):
 *         return 1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "segment.pxd":43
 *     if ls2_contains_strict(segment, point):
 *         return 1
 *     if r2_approx(segment.p1, point, rtol, atol):             # <<<<<<<<<<<<<<
 *         return 1
 *     if r2_approx(segment.p2, point, rtol, atol):
 */
  }

  /* "segment.pxd":45
 *     if r2_approx(segment.p1, point, rtol, atol):
 *         return 1
 *     if r2_approx(segment.p2, point, rtol, atol):             # <<<<<<<<<<<<<<
 *         return 1
 *     return 0
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_atol); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 45, __pyx_L1_error)
  __pyx_t_3.__pyx_n = 2;
  __pyx_t_3.rtol = __pyx_v_rtol;
  __pyx_t_3.atol = __pyx_t_2;
  __pyx_t_4 = __pyx_f_6cycart_6native_5space_r2_approx(__pyx_v_segment.p2, __pyx_v_point, &__pyx_t_3); 
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {

    /* "segment.pxd":46
 *         return 1
 *     if r2_approx(segment.p2, point, rtol, atol):
 *         return 1             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "segment.pxd":45
 *     if r2_approx(segment.p1, point, rtol, atol):
 *         return 1
 *     if r2_approx(segment.p2, point, rtol, atol):             # <<<<<<<<<<<<<<
 *         return 1
 *     return 0
 */
  }

  /* "segment.pxd":47
 *     if r2_approx(segment.p2, point, rtol, atol):
 *         return 1
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint ls2_approx(const _LineSegment& lhs, const _LineSegment& rhs, double rtol=1e-9, atol=0):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "segment.pxd":40
 *     return 0 < r2_dot(ref_vector, test_vector) < r2_dot(ref_vector, ref_vector)
 * 
 * cdef inline bint ls2_contains(const _LineSegment& segment, const _R2& point, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     if ls2_contains_strict(segment, point):
 *         return 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.segment.ls2_contains", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "segment.pxd":49
 *     return 0
 * 
 * cdef inline bint ls2_approx(const _LineSegment& lhs, const _LineSegment& rhs, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     cdef _LineSegment norm1 = ls2_normalized(lhs)
 *     cdef _LineSegment norm2 = ls2_normalized(rhs)
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_7segment_ls2_approx(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_lhs, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_rhs, struct __pyx_opt_args_6cycart_6native_7segment_ls2_approx *__pyx_optional_args) {
  double __pyx_v_rtol = ((double)1e-9);
  PyObject *__pyx_v_atol = ((PyObject *)__pyx_int_0);
  struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_v_norm1;
  struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_v_norm2;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_opt_args_6cycart_6native_5space_r2_approx __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("ls2_approx", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_atol = __pyx_optional_args->atol;
      }
    }
  }

  /* "segment.pxd":50
 * 
 * cdef inline bint ls2_approx(const _LineSegment& lhs, const _LineSegment& rhs, double rtol=1e-9, atol=0):
 *     cdef _LineSegment norm1 = ls2_normalized(lhs)             # <<<<<<<<<<<<<<
 *     cdef _LineSegment norm2 = ls2_normalized(rhs)
 *     return r2_approx(norm1.p1, norm2.p1, rtol, atol) and r2_approx(norm1.p2, norm2.p2, rtol, atol)
 */
  __pyx_v_norm1 = __pyx_f_6cycart_6native_7segment_ls2_normalized(__pyx_v_lhs);

  /* "segment.pxd":51
 * cdef inline bint ls2_approx(const _LineSegment& lhs, const _LineSegment& rhs, double rtol=1e-9, atol=0):
 *     cdef _LineSegment norm1 = ls2_normalized(lhs)
 *     cdef _LineSegment norm2 = ls2_normalized(rhs)             # <<<<<<<<<<<<<<
 *     return r2_approx(norm1.p1, norm2.p1, rtol, atol) and r2_approx(norm1.p2, norm2.p2, rtol, atol)
 * 
 */
  __pyx_v_norm2 = __pyx_f_6cycart_6native_7segment_ls2_normalized(__pyx_v_rhs);

  /* "segment.pxd":52
 *     cdef _LineSegment norm1 = ls2_normalized(lhs)
 *     cdef _LineSegment norm2 = ls2_normalized(rhs)
 *     return r2_approx(norm1.p1, norm2.p1, rtol, atol) and r2_approx(norm1.p2, norm2.p2, rtol, atol)             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint ls2_overlaps(const _LineSegment& ref, const _LineSegment& cmp):
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_atol); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 52, __pyx_L1_error)
  __pyx_t_4.__pyx_n = 2;
  __pyx_t_4.rtol = __pyx_v_rtol;
  __pyx_t_4.atol = __pyx_t_2;
  __pyx_t_3 = __pyx_f_6cycart_6native_5space_r2_approx(__pyx_v_norm1.p1, __pyx_v_norm2.p1, &__pyx_t_4); 
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_atol); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 52, __pyx_L1_error)
  __pyx_t_4.__pyx_n = 2;
  __pyx_t_4.rtol = __pyx_v_rtol;
  __pyx_t_4.atol = __pyx_t_2;
  __pyx_t_5 = __pyx_f_6cycart_6native_5space_r2_approx(__pyx_v_norm1.p2, __pyx_v_norm2.p2, &__pyx_t_4); 
  __pyx_t_3 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "segment.pxd":49
 *     return 0
 * 
 * cdef inline bint ls2_approx(const _LineSegment& lhs, const _LineSegment& rhs, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     cdef _LineSegment norm1 = ls2_normalized(lhs)
 *     cdef _LineSegment norm2 = ls2_normalized(rhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.segment.ls2_approx", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "segment.pxd":54
 *     return r2_approx(norm1.p1, norm2.p1, rtol, atol) and r2_approx(norm1.p2, norm2.p2, rtol, atol)
 * 
 * cdef inline bint ls2_overlaps(const _LineSegment& ref, const _LineSegment& cmp):             # <<<<<<<<<<<<<<
 *     cdef int count = 0
 *     if ls2_contains(ref, cmp.p1):
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_7segment_ls2_overlaps(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_ref, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_cmp) {
  int __pyx_v_count;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("ls2_overlaps", 0);

  /* "segment.pxd":55
 * 
 * cdef inline bint ls2_overlaps(const _LineSegment& ref, const _LineSegment& cmp):
 *     cdef int count = 0             # <<<<<<<<<<<<<<
 *     if ls2_contains(ref, cmp.p1):
 *         count += 1
 */
  __pyx_v_count = 0;

  /* "segment.pxd":56
 * cdef inline bint ls2_overlaps(const _LineSegment& ref, const _LineSegment& cmp):
 *     cdef int count = 0
 *     if ls2_contains(ref, cmp.p1):             # <<<<<<<<<<<<<<
 *         count += 1
 *     if ls2_contains(ref, cmp.p2):
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_7segment_ls2_contains(__pyx_v_ref, __pyx_v_cmp.p1, NULL) != 0);
  if (__pyx_t_1) {

    /* "segment.pxd":57
 *     cdef int count = 0
 *     if ls2_contains(ref, cmp.p1):
 *         count += 1             # <<<<<<<<<<<<<<
 *     if ls2_contains(ref, cmp.p2):
 *         count += 1
 */
    __pyx_v_count = (__pyx_v_count + 1);

    /* "segment.pxd":56
 * cdef inline bint ls2_overlaps(const _LineSegment& ref, const _LineSegment& cmp):
 *     cdef int count = 0
 *     if ls2_contains(ref, cmp.p1):             # <<<<<<<<<<<<<<
 *         count += 1
 *     if ls2_contains(ref, cmp.p2):
 */
  }

  /* "segment.pxd":58
 *     if ls2_contains(ref, cmp.p1):
 *         count += 1
 *     if ls2_contains(ref, cmp.p2):             # <<<<<<<<<<<<<<
 *         count += 1
 *     if ls2_contains_strict(cmp, ref.p1):
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_7segment_ls2_contains(__pyx_v_ref, __pyx_v_cmp.p2, NULL) != 0);
  if (__pyx_t_1) {

    /* "segment.pxd":59
 *         count += 1
 *     if ls2_contains(ref, cmp.p2):
 *         count += 1             # <<<<<<<<<<<<<<
 *     if ls2_contains_strict(cmp, ref.p1):
 *         count += 1
 */
    __pyx_v_count = (__pyx_v_count + 1);

    /* "segment.pxd":58
 *     if ls2_contains(ref, cmp.p1):
 *         count += 1
 *     if ls2_contains(ref, cmp.p2):             # <<<<<<<<<<<<<<
 *         count += 1
 *     if ls2_contains_strict(cmp, ref.p1):
 */
  }

  /* "segment.pxd":60
 *     if ls2_contains(ref, cmp.p2):
 *         count += 1
 *     if ls2_contains_strict(cmp, ref.p1):             # <<<<<<<<<<<<<<
 *         count += 1
 *     if ls2_contains_strict(cmp, ref.p2):
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_7segment_ls2_contains_strict(__pyx_v_cmp, __pyx_v_ref.p1) != 0);
  if (__pyx_t_1) {

    /* "segment.pxd":61
 *         count += 1
 *     if ls2_contains_strict(cmp, ref.p1):
 *         count += 1             # <<<<<<<<<<<<<<
 *     if ls2_contains_strict(cmp, ref.p2):
 *         count += 1
 */
    __pyx_v_count = (__pyx_v_count + 1);

    /* "segment.pxd":60
 *     if ls2_contains(ref, cmp.p2):
 *         count += 1
 *     if ls2_contains_strict(cmp, ref.p1):             # <<<<<<<<<<<<<<
 *         count += 1
 *     if ls2_contains_strict(cmp, ref.p2):
 */
  }

  /* "segment.pxd":62
 *     if ls2_contains_strict(cmp, ref.p1):
 *         count += 1
 *     if ls2_contains_strict(cmp, ref.p2):             # <<<<<<<<<<<<<<
 *         count += 1
 * 
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_7segment_ls2_contains_strict(__pyx_v_cmp, __pyx_v_ref.p2) != 0);
  if (__pyx_t_1) {

    /* "segment.pxd":63
 *         count += 1
 *     if ls2_contains_strict(cmp, ref.p2):
 *         count += 1             # <<<<<<<<<<<<<<
 * 
 *     return count >= 2
 */
    __pyx_v_count = (__pyx_v_count + 1);

    /* "segment.pxd":62
 *     if ls2_contains_strict(cmp, ref.p1):
 *         count += 1
 *     if ls2_contains_strict(cmp, ref.p2):             # <<<<<<<<<<<<<<
 *         count += 1
 * 
 */
  }

  /* "segment.pxd":65
 *         count += 1
 * 
 *     return count >= 2             # <<<<<<<<<<<<<<
 * 
 * cdef inline _R2 ls2_vector(const _LineSegment& segment):
 */
  __pyx_r = (__pyx_v_count >= 2);
  goto __pyx_L0;

  /* "segment.pxd":54
 *     return r2_approx(norm1.p1, norm2.p1, rtol, atol) and r2_approx(norm1.p2, norm2.p2, rtol, atol)
 * 
 * cdef inline bint ls2_overlaps(const _LineSegment& ref, const _LineSegment& cmp):             # <<<<<<<<<<<<<<
 *     cdef int count = 0
 *     if ls2_contains(ref, cmp.p1):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "segment.pxd":67
 *     return count >= 2
 * 
 * cdef inline _R2 ls2_vector(const _LineSegment& segment):             # <<<<<<<<<<<<<<
 *     return r2_sub(segment.p2, segment.p1)
 * 
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_7segment_ls2_vector(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_segment) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ls2_vector", 0);

  /* "segment.pxd":68
 * 
 * cdef inline _R2 ls2_vector(const _LineSegment& segment):
 *     return r2_sub(segment.p2, segment.p1)             # <<<<<<<<<<<<<<
 * 
 * cdef inline _LineSegment ls2_translate(const _LineSegment& segment, const _R2 vector):
 */
  __pyx_r = __pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_segment.p2, __pyx_v_segment.p1);
  goto __pyx_L0;

  /* "segment.pxd":67
 *     return count >= 2
 * 
 * cdef inline _R2 ls2_vector(const _LineSegment& segment):             # <<<<<<<<<<<<<<
 *     return r2_sub(segment.p2, segment.p1)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "segment.pxd":70
 *     return r2_sub(segment.p2, segment.p1)
 * 
 * cdef inline _LineSegment ls2_translate(const _LineSegment& segment, const _R2 vector):             # <<<<<<<<<<<<<<
 *     return _LineSegment(r2_add(segment.p1, vector), r2_add(segment.p2, vector))
 * 
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_f_6cycart_6native_7segment_ls2_translate(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_segment, struct __pyx_t_6cycart_6native_6dtypes__R2 const __pyx_v_vector) {
  struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_t_1;
  __Pyx_RefNannySetupContext("ls2_translate", 0);

  /* "segment.pxd":71
 * 
 * cdef inline _LineSegment ls2_translate(const _LineSegment& segment, const _R2 vector):
 *     return _LineSegment(r2_add(segment.p1, vector), r2_add(segment.p2, vector))             # <<<<<<<<<<<<<<
 * 
 * cdef inline _R2 ls2_center(const _LineSegment& segment):
 */
  __pyx_t_1.p1 = __pyx_f_6cycart_6native_5space_r2_add(__pyx_v_segment.p1, __pyx_v_vector);
  __pyx_t_1.p2 = __pyx_f_6cycart_6native_5space_r2_add(__pyx_v_segment.p2, __pyx_v_vector);
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "segment.pxd":70
 *     return r2_sub(segment.p2, segment.p1)
 * 
 * cdef inline _LineSegment ls2_translate(const _LineSegment& segment, const _R2 vector):             # <<<<<<<<<<<<<<
 *     return _LineSegment(r2_add(segment.p1, vector), r2_add(segment.p2, vector))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "segment.pxd":73
 *     return _LineSegment(r2_add(segment.p1, vector), r2_add(segment.p2, vector))
 * 
 * cdef inline _R2 ls2_center(const _LineSegment& segment):             # <<<<<<<<<<<<<<
 *     cdef _R2 vector = ls2_vector(segment)
 *     if not r2_ref_div(vector, vector, 2.0):
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_f_6cycart_6native_7segment_ls2_center(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_segment) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_vector;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("ls2_center", 0);

  /* "segment.pxd":74
 * 
 * cdef inline _R2 ls2_center(const _LineSegment& segment):
 *     cdef _R2 vector = ls2_vector(segment)             # <<<<<<<<<<<<<<
 *     if not r2_ref_div(vector, vector, 2.0):
 *         pass #oops
 */
  __pyx_v_vector = __pyx_f_6cycart_6native_7segment_ls2_vector(__pyx_v_segment);

  /* "segment.pxd":75
 * cdef inline _R2 ls2_center(const _LineSegment& segment):
 *     cdef _R2 vector = ls2_vector(segment)
 *     if not r2_ref_div(vector, vector, 2.0):             # <<<<<<<<<<<<<<
 *         pass #oops
 *     return r2_add(segment.p1, vector)
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_5space_r2_ref_div(__pyx_v_vector, __pyx_v_vector, 2.0) != 0)) != 0);
  if (__pyx_t_1) {
  }

  /* "segment.pxd":77
 *     if not r2_ref_div(vector, vector, 2.0):
 *         pass #oops
 *     return r2_add(segment.p1, vector)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_6cycart_6native_5space_r2_add(__pyx_v_segment.p1, __pyx_v_vector);
  goto __pyx_L0;

  /* "segment.pxd":73
 *     return _LineSegment(r2_add(segment.p1, vector), r2_add(segment.p2, vector))
 * 
 * cdef inline _R2 ls2_center(const _LineSegment& segment):             # <<<<<<<<<<<<<<
 *     cdef _R2 vector = ls2_vector(segment)
 *     if not r2_ref_div(vector, vector, 2.0):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "segment.pxd":80
 * 
 * 
 * cdef inline _LineSegment ls2_rotate(const _LineSegment& segment, const _R2 center, double radians):             # <<<<<<<<<<<<<<
 *     return _LineSegment(
 *         r2_rotate_around(segment.p1, center, radians),
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_f_6cycart_6native_7segment_ls2_rotate(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_segment, struct __pyx_t_6cycart_6native_6dtypes__R2 const __pyx_v_center, double __pyx_v_radians) {
  struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_t_1;
  __Pyx_RefNannySetupContext("ls2_rotate", 0);

  /* "segment.pxd":82
 * cdef inline _LineSegment ls2_rotate(const _LineSegment& segment, const _R2 center, double radians):
 *     return _LineSegment(
 *         r2_rotate_around(segment.p1, center, radians),             # <<<<<<<<<<<<<<
 *         r2_rotate_around(segment.p2, center, radians)
 *     )
 */
  __pyx_t_1.p1 = __pyx_f_6cycart_6native_5space_r2_rotate_around(__pyx_v_segment.p1, __pyx_v_center, __pyx_v_radians);

  /* "segment.pxd":83
 *     return _LineSegment(
 *         r2_rotate_around(segment.p1, center, radians),
 *         r2_rotate_around(segment.p2, center, radians)             # <<<<<<<<<<<<<<
 *     )
 */
  __pyx_t_1.p2 = __pyx_f_6cycart_6native_5space_r2_rotate_around(__pyx_v_segment.p2, __pyx_v_center, __pyx_v_radians);
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "segment.pxd":80
 * 
 * 
 * cdef inline _LineSegment ls2_rotate(const _LineSegment& segment, const _R2 center, double radians):             # <<<<<<<<<<<<<<
 *     return _LineSegment(
 *         r2_rotate_around(segment.p1, center, radians),
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "circle.pxd":20
 * """
 * 
 * cdef inline double c2_constant(const _Circle& circle, const _R2& point):             # <<<<<<<<<<<<<<
 *     cdef _R2 diff = r2_sub(point, circle.center)
 *     return r2_dot(diff, diff)
 */

static CYTHON_INLINE double __pyx_f_6cycart_6native_6circle_c2_constant(struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_circle, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_diff;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c2_constant", 0);

  /* "circle.pxd":21
 * 
 * cdef inline double c2_constant(const _Circle& circle, const _R2& point):
 *     cdef _R2 diff = r2_sub(point, circle.center)             # <<<<<<<<<<<<<<
 *     return r2_dot(diff, diff)
 * 
 */
  __pyx_v_diff = __pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_point, __pyx_v_circle.center);

  /* "circle.pxd":22
 * cdef inline double c2_constant(const _Circle& circle, const _R2& point):
 *     cdef _R2 diff = r2_sub(point, circle.center)
 *     return r2_dot(diff, diff)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double c2_area(const _Circle& circle):
 */
  __pyx_r = __pyx_f_6cycart_6native_5space_r2_dot(__pyx_v_diff, __pyx_v_diff);
  goto __pyx_L0;

  /* "circle.pxd":20
 * """
 * 
 * cdef inline double c2_constant(const _Circle& circle, const _R2& point):             # <<<<<<<<<<<<<<
 *     cdef _R2 diff = r2_sub(point, circle.center)
 *     return r2_dot(diff, diff)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "circle.pxd":24
 *     return r2_dot(diff, diff)
 * 
 * cdef inline double c2_area(const _Circle& circle):             # <<<<<<<<<<<<<<
 *     return pi * circle.radius ** 2
 * 
 */

static CYTHON_INLINE double __pyx_f_6cycart_6native_6circle_c2_area(struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_circle) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c2_area", 0);

  /* "circle.pxd":25
 * 
 * cdef inline double c2_area(const _Circle& circle):
 *     return pi * circle.radius ** 2             # <<<<<<<<<<<<<<
 * 
 * cdef inline double c2_circumference(const _Circle& circle):
 */
  __pyx_r = (M_PI * pow(((double)__pyx_v_circle.radius), 2.0));
  goto __pyx_L0;

  /* "circle.pxd":24
 *     return r2_dot(diff, diff)
 * 
 * cdef inline double c2_area(const _Circle& circle):             # <<<<<<<<<<<<<<
 *     return pi * circle.radius ** 2
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "circle.pxd":27
 *     return pi * circle.radius ** 2
 * 
 * cdef inline double c2_circumference(const _Circle& circle):             # <<<<<<<<<<<<<<
 *     return 2 * pi * circle.radius
 * 
 */

static CYTHON_INLINE double __pyx_f_6cycart_6native_6circle_c2_circumference(struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_circle) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c2_circumference", 0);

  /* "circle.pxd":28
 * 
 * cdef inline double c2_circumference(const _Circle& circle):
 *     return 2 * pi * circle.radius             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint c2_on_perimeter(const _Circle& circle, const _R2& point, double rtol=1e-9, atol=0):
 */
  __pyx_r = ((2.0 * M_PI) * __pyx_v_circle.radius);
  goto __pyx_L0;

  /* "circle.pxd":27
 *     return pi * circle.radius ** 2
 * 
 * cdef inline double c2_circumference(const _Circle& circle):             # <<<<<<<<<<<<<<
 *     return 2 * pi * circle.radius
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "circle.pxd":30
 *     return 2 * pi * circle.radius
 * 
 * cdef inline bint c2_on_perimeter(const _Circle& circle, const _R2& point, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(c2_constant(circle, point), circle.radius ** 2, rtol, atol)
 * 
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_6circle_c2_on_perimeter(struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_circle, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point, struct __pyx_opt_args_6cycart_6native_6circle_c2_on_perimeter *__pyx_optional_args) {
  double __pyx_v_rtol = ((double)1e-9);
  PyObject *__pyx_v_atol = ((PyObject *)__pyx_int_0);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_6cycart_6native_4util_fapprox __pyx_t_2;
  __Pyx_RefNannySetupContext("c2_on_perimeter", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_atol = __pyx_optional_args->atol;
      }
    }
  }

  /* "circle.pxd":31
 * 
 * cdef inline bint c2_on_perimeter(const _Circle& circle, const _R2& point, double rtol=1e-9, atol=0):
 *     return fapprox(c2_constant(circle, point), circle.radius ** 2, rtol, atol)             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint c2_contains(const _Circle& circle, const _R2& point):
 */
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.rtol = __pyx_v_rtol;
  __pyx_t_2.atol = __pyx_v_atol;
  __pyx_t_1 = __pyx_f_6cycart_6native_4util_fapprox(__pyx_f_6cycart_6native_6circle_c2_constant(__pyx_v_circle, __pyx_v_point), pow(((double)__pyx_v_circle.radius), 2.0), &__pyx_t_2); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "circle.pxd":30
 *     return 2 * pi * circle.radius
 * 
 * cdef inline bint c2_on_perimeter(const _Circle& circle, const _R2& point, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(c2_constant(circle, point), circle.radius ** 2, rtol, atol)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "circle.pxd":33
 *     return fapprox(c2_constant(circle, point), circle.radius ** 2, rtol, atol)
 * 
 * cdef inline bint c2_contains(const _Circle& circle, const _R2& point):             # <<<<<<<<<<<<<<
 *     return c2_constant(circle, point) < circle.radius ** 2
 * 
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_6circle_c2_contains(struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_circle, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c2_contains", 0);

  /* "circle.pxd":34
 * 
 * cdef inline bint c2_contains(const _Circle& circle, const _R2& point):
 *     return c2_constant(circle, point) < circle.radius ** 2             # <<<<<<<<<<<<<<
 * 
 * cdef inline _Circle c2_translate(const _Circle& circle, const _R2& point):
 */
  __pyx_r = (__pyx_f_6cycart_6native_6circle_c2_constant(__pyx_v_circle, __pyx_v_point) < pow(((double)__pyx_v_circle.radius), 2.0));
  goto __pyx_L0;

  /* "circle.pxd":33
 *     return fapprox(c2_constant(circle, point), circle.radius ** 2, rtol, atol)
 * 
 * cdef inline bint c2_contains(const _Circle& circle, const _R2& point):             # <<<<<<<<<<<<<<
 *     return c2_constant(circle, point) < circle.radius ** 2
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "circle.pxd":36
 *     return c2_constant(circle, point) < circle.radius ** 2
 * 
 * cdef inline _Circle c2_translate(const _Circle& circle, const _R2& point):             # <<<<<<<<<<<<<<
 *     return _Circle(r2_add(circle.center, point), circle.radius)
 * 
 */

static CYTHON_INLINE struct __pyx_t_6cycart_6native_6dtypes__Circle __pyx_f_6cycart_6native_6circle_c2_translate(struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_circle, struct __pyx_t_6cycart_6native_6dtypes__R2 const &__pyx_v_point) {
  struct __pyx_t_6cycart_6native_6dtypes__Circle __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__Circle __pyx_t_1;
  __Pyx_RefNannySetupContext("c2_translate", 0);

  /* "circle.pxd":37
 * 
 * cdef inline _Circle c2_translate(const _Circle& circle, const _R2& point):
 *     return _Circle(r2_add(circle.center, point), circle.radius)             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint c2_approx(const _Circle& c1, const _Circle& c2, double rtol=1e-9, atol=0):
 */
  __pyx_t_1.center = __pyx_f_6cycart_6native_5space_r2_add(__pyx_v_circle.center, __pyx_v_point);
  __pyx_t_1.radius = __pyx_v_circle.radius;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "circle.pxd":36
 *     return c2_constant(circle, point) < circle.radius ** 2
 * 
 * cdef inline _Circle c2_translate(const _Circle& circle, const _R2& point):             # <<<<<<<<<<<<<<
 *     return _Circle(r2_add(circle.center, point), circle.radius)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "circle.pxd":39
 *     return _Circle(r2_add(circle.center, point), circle.radius)
 * 
 * cdef inline bint c2_approx(const _Circle& c1, const _Circle& c2, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(c1.radius, c2.radius, rtol, atol) and r2_approx(c1.center, c2.center, rtol, atol)
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_6circle_c2_approx(struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_c1, struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_c2, struct __pyx_opt_args_6cycart_6native_6circle_c2_approx *__pyx_optional_args) {
  double __pyx_v_rtol = ((double)1e-9);
  PyObject *__pyx_v_atol = ((PyObject *)__pyx_int_0);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  struct __pyx_opt_args_6cycart_6native_4util_fapprox __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  struct __pyx_opt_args_6cycart_6native_5space_r2_approx __pyx_t_6;
  __Pyx_RefNannySetupContext("c2_approx", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_atol = __pyx_optional_args->atol;
      }
    }
  }

  /* "circle.pxd":40
 * 
 * cdef inline bint c2_approx(const _Circle& c1, const _Circle& c2, double rtol=1e-9, atol=0):
 *     return fapprox(c1.radius, c2.radius, rtol, atol) and r2_approx(c1.center, c2.center, rtol, atol)             # <<<<<<<<<<<<<<
 */
  __pyx_t_3.__pyx_n = 2;
  __pyx_t_3.rtol = __pyx_v_rtol;
  __pyx_t_3.atol = __pyx_v_atol;
  __pyx_t_2 = __pyx_f_6cycart_6native_4util_fapprox(__pyx_v_c1.radius, __pyx_v_c2.radius, &__pyx_t_3); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_atol); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 40, __pyx_L1_error)
  __pyx_t_6.__pyx_n = 2;
  __pyx_t_6.rtol = __pyx_v_rtol;
  __pyx_t_6.atol = __pyx_t_5;
  __pyx_t_4 = __pyx_f_6cycart_6native_5space_r2_approx(__pyx_v_c1.center, __pyx_v_c2.center, &__pyx_t_6); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "circle.pxd":39
 *     return _Circle(r2_add(circle.center, point), circle.radius)
 * 
 * cdef inline bint c2_approx(const _Circle& c1, const _Circle& c2, double rtol=1e-9, atol=0):             # <<<<<<<<<<<<<<
 *     return fapprox(c1.radius, c2.radius, rtol, atol) and r2_approx(c1.center, c2.center, rtol, atol)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.circle.c2_approx", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "does_intersect.pxd":15
 *     YES = 1
 * 
 * cdef inline IRES c2_c2_does_intersect(const _Circle& c1, const _Circle& c2):             # <<<<<<<<<<<<<<
 *     if c2_approx(c1, c2):
 *         return ERROR
 */

static CYTHON_INLINE enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_f_6cycart_6native_14does_intersect_c2_c2_does_intersect(struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_c1, struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_c2) {
  double __pyx_v_distance;
  enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("c2_c2_does_intersect", 0);

  /* "does_intersect.pxd":16
 * 
 * cdef inline IRES c2_c2_does_intersect(const _Circle& c1, const _Circle& c2):
 *     if c2_approx(c1, c2):             # <<<<<<<<<<<<<<
 *         return ERROR
 * 
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_6circle_c2_approx(__pyx_v_c1, __pyx_v_c2, NULL) != 0);
  if (__pyx_t_1) {

    /* "does_intersect.pxd":17
 * cdef inline IRES c2_c2_does_intersect(const _Circle& c1, const _Circle& c2):
 *     if c2_approx(c1, c2):
 *         return ERROR             # <<<<<<<<<<<<<<
 * 
 *     cdef double distance = r2_distance(c1.center, c2.center)
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_ERROR;
    goto __pyx_L0;

    /* "does_intersect.pxd":16
 * 
 * cdef inline IRES c2_c2_does_intersect(const _Circle& c1, const _Circle& c2):
 *     if c2_approx(c1, c2):             # <<<<<<<<<<<<<<
 *         return ERROR
 * 
 */
  }

  /* "does_intersect.pxd":19
 *         return ERROR
 * 
 *     cdef double distance = r2_distance(c1.center, c2.center)             # <<<<<<<<<<<<<<
 *     if distance > c1.radius + c2.radius:
 *         return NO
 */
  __pyx_v_distance = __pyx_f_6cycart_6native_5space_r2_distance(__pyx_v_c1.center, __pyx_v_c2.center);

  /* "does_intersect.pxd":20
 * 
 *     cdef double distance = r2_distance(c1.center, c2.center)
 *     if distance > c1.radius + c2.radius:             # <<<<<<<<<<<<<<
 *         return NO
 *     if distance < fabs(c1.radius - c2.radius):
 */
  __pyx_t_1 = ((__pyx_v_distance > (__pyx_v_c1.radius + __pyx_v_c2.radius)) != 0);
  if (__pyx_t_1) {

    /* "does_intersect.pxd":21
 *     cdef double distance = r2_distance(c1.center, c2.center)
 *     if distance > c1.radius + c2.radius:
 *         return NO             # <<<<<<<<<<<<<<
 *     if distance < fabs(c1.radius - c2.radius):
 *         return NO
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_NO;
    goto __pyx_L0;

    /* "does_intersect.pxd":20
 * 
 *     cdef double distance = r2_distance(c1.center, c2.center)
 *     if distance > c1.radius + c2.radius:             # <<<<<<<<<<<<<<
 *         return NO
 *     if distance < fabs(c1.radius - c2.radius):
 */
  }

  /* "does_intersect.pxd":22
 *     if distance > c1.radius + c2.radius:
 *         return NO
 *     if distance < fabs(c1.radius - c2.radius):             # <<<<<<<<<<<<<<
 *         return NO
 *     return YES
 */
  __pyx_t_1 = ((__pyx_v_distance < fabs((__pyx_v_c1.radius - __pyx_v_c2.radius))) != 0);
  if (__pyx_t_1) {

    /* "does_intersect.pxd":23
 *         return NO
 *     if distance < fabs(c1.radius - c2.radius):
 *         return NO             # <<<<<<<<<<<<<<
 *     return YES
 * 
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_NO;
    goto __pyx_L0;

    /* "does_intersect.pxd":22
 *     if distance > c1.radius + c2.radius:
 *         return NO
 *     if distance < fabs(c1.radius - c2.radius):             # <<<<<<<<<<<<<<
 *         return NO
 *     return YES
 */
  }

  /* "does_intersect.pxd":24
 *     if distance < fabs(c1.radius - c2.radius):
 *         return NO
 *     return YES             # <<<<<<<<<<<<<<
 * 
 * cdef inline IRES l2_l2_does_intersect(const _Line& l1, const _Line l2):
 */
  __pyx_r = __pyx_e_6cycart_6native_14does_intersect_YES;
  goto __pyx_L0;

  /* "does_intersect.pxd":15
 *     YES = 1
 * 
 * cdef inline IRES c2_c2_does_intersect(const _Circle& c1, const _Circle& c2):             # <<<<<<<<<<<<<<
 *     if c2_approx(c1, c2):
 *         return ERROR
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "does_intersect.pxd":26
 *     return YES
 * 
 * cdef inline IRES l2_l2_does_intersect(const _Line& l1, const _Line l2):             # <<<<<<<<<<<<<<
 *     if l2_approx(l1, l2):
 *         return ERROR
 */

static CYTHON_INLINE enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_f_6cycart_6native_14does_intersect_l2_l2_does_intersect(struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_l1, struct __pyx_t_6cycart_6native_6dtypes__Line const __pyx_v_l2) {
  PyObject *__pyx_v_det = 0;
  enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_t_3;
  __Pyx_RefNannySetupContext("l2_l2_does_intersect", 0);

  /* "does_intersect.pxd":27
 * 
 * cdef inline IRES l2_l2_does_intersect(const _Line& l1, const _Line l2):
 *     if l2_approx(l1, l2):             # <<<<<<<<<<<<<<
 *         return ERROR
 * 
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_4line_l2_approx(__pyx_v_l1, __pyx_v_l2, NULL) != 0);
  if (__pyx_t_1) {

    /* "does_intersect.pxd":28
 * cdef inline IRES l2_l2_does_intersect(const _Line& l1, const _Line l2):
 *     if l2_approx(l1, l2):
 *         return ERROR             # <<<<<<<<<<<<<<
 * 
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_ERROR;
    goto __pyx_L0;

    /* "does_intersect.pxd":27
 * 
 * cdef inline IRES l2_l2_does_intersect(const _Line& l1, const _Line l2):
 *     if l2_approx(l1, l2):             # <<<<<<<<<<<<<<
 *         return ERROR
 * 
 */
  }

  /* "does_intersect.pxd":30
 *         return ERROR
 * 
 *     cdef det = l1.a * l2.b - l1.b * l2.a             # <<<<<<<<<<<<<<
 *     return det != 0
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(((__pyx_v_l1.a * __pyx_v_l2.b) - (__pyx_v_l1.b * __pyx_v_l2.a))); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_det = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "does_intersect.pxd":31
 * 
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 *     return det != 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline IRES ls2_ls2_does_intersect(const _LineSegment& ls1, const _LineSegment& ls2):
 */
  __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_v_det, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((enum __pyx_t_6cycart_6native_14does_intersect_IRES)__Pyx_PyInt_As_enum____pyx_t_6cycart_6native_14does_intersect_IRES(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "does_intersect.pxd":26
 *     return YES
 * 
 * cdef inline IRES l2_l2_does_intersect(const _Line& l1, const _Line l2):             # <<<<<<<<<<<<<<
 *     if l2_approx(l1, l2):
 *         return ERROR
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("cycart.native.does_intersect.l2_l2_does_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum __pyx_t_6cycart_6native_14does_intersect_IRES) 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_det);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "does_intersect.pxd":33
 *     return det != 0
 * 
 * cdef inline IRES ls2_ls2_does_intersect(const _LineSegment& ls1, const _LineSegment& ls2):             # <<<<<<<<<<<<<<
 *     if ls2_approx(ls1, ls2):
 *         return ERROR
 */

static CYTHON_INLINE enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_f_6cycart_6native_14does_intersect_ls2_ls2_does_intersect(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_ls1, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_ls2) {
  double __pyx_v_ccw1;
  double __pyx_v_ccw2;
  enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("ls2_ls2_does_intersect", 0);

  /* "does_intersect.pxd":34
 * 
 * cdef inline IRES ls2_ls2_does_intersect(const _LineSegment& ls1, const _LineSegment& ls2):
 *     if ls2_approx(ls1, ls2):             # <<<<<<<<<<<<<<
 *         return ERROR
 * 
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_7segment_ls2_approx(__pyx_v_ls1, __pyx_v_ls2, NULL) != 0);
  if (__pyx_t_1) {

    /* "does_intersect.pxd":35
 * cdef inline IRES ls2_ls2_does_intersect(const _LineSegment& ls1, const _LineSegment& ls2):
 *     if ls2_approx(ls1, ls2):
 *         return ERROR             # <<<<<<<<<<<<<<
 * 
 *     cdef double ccw1, ccw2
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_ERROR;
    goto __pyx_L0;

    /* "does_intersect.pxd":34
 * 
 * cdef inline IRES ls2_ls2_does_intersect(const _LineSegment& ls1, const _LineSegment& ls2):
 *     if ls2_approx(ls1, ls2):             # <<<<<<<<<<<<<<
 *         return ERROR
 * 
 */
  }

  /* "does_intersect.pxd":38
 * 
 *     cdef double ccw1, ccw2
 *     ccw1 = r2_ccw(ls1.p1, ls1.p2, ls2.p1)             # <<<<<<<<<<<<<<
 *     ccw2 = r2_ccw(ls1.p1, ls1.p2, ls2.p2)
 *     if ccw1 * ccw2 > 0:
 */
  __pyx_v_ccw1 = __pyx_f_6cycart_6native_5space_r2_ccw(__pyx_v_ls1.p1, __pyx_v_ls1.p2, __pyx_v_ls2.p1);

  /* "does_intersect.pxd":39
 *     cdef double ccw1, ccw2
 *     ccw1 = r2_ccw(ls1.p1, ls1.p2, ls2.p1)
 *     ccw2 = r2_ccw(ls1.p1, ls1.p2, ls2.p2)             # <<<<<<<<<<<<<<
 *     if ccw1 * ccw2 > 0:
 *         return NO
 */
  __pyx_v_ccw2 = __pyx_f_6cycart_6native_5space_r2_ccw(__pyx_v_ls1.p1, __pyx_v_ls1.p2, __pyx_v_ls2.p2);

  /* "does_intersect.pxd":40
 *     ccw1 = r2_ccw(ls1.p1, ls1.p2, ls2.p1)
 *     ccw2 = r2_ccw(ls1.p1, ls1.p2, ls2.p2)
 *     if ccw1 * ccw2 > 0:             # <<<<<<<<<<<<<<
 *         return NO
 *     ccw1 = r2_ccw(ls2.p1, ls2.p2, ls1.p1)
 */
  __pyx_t_1 = (((__pyx_v_ccw1 * __pyx_v_ccw2) > 0.0) != 0);
  if (__pyx_t_1) {

    /* "does_intersect.pxd":41
 *     ccw2 = r2_ccw(ls1.p1, ls1.p2, ls2.p2)
 *     if ccw1 * ccw2 > 0:
 *         return NO             # <<<<<<<<<<<<<<
 *     ccw1 = r2_ccw(ls2.p1, ls2.p2, ls1.p1)
 *     ccw2 = r2_ccw(ls2.p1, ls2.p2, ls1.p2)
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_NO;
    goto __pyx_L0;

    /* "does_intersect.pxd":40
 *     ccw1 = r2_ccw(ls1.p1, ls1.p2, ls2.p1)
 *     ccw2 = r2_ccw(ls1.p1, ls1.p2, ls2.p2)
 *     if ccw1 * ccw2 > 0:             # <<<<<<<<<<<<<<
 *         return NO
 *     ccw1 = r2_ccw(ls2.p1, ls2.p2, ls1.p1)
 */
  }

  /* "does_intersect.pxd":42
 *     if ccw1 * ccw2 > 0:
 *         return NO
 *     ccw1 = r2_ccw(ls2.p1, ls2.p2, ls1.p1)             # <<<<<<<<<<<<<<
 *     ccw2 = r2_ccw(ls2.p1, ls2.p2, ls1.p2)
 *     if ccw1 * ccw2 > 0:
 */
  __pyx_v_ccw1 = __pyx_f_6cycart_6native_5space_r2_ccw(__pyx_v_ls2.p1, __pyx_v_ls2.p2, __pyx_v_ls1.p1);

  /* "does_intersect.pxd":43
 *         return NO
 *     ccw1 = r2_ccw(ls2.p1, ls2.p2, ls1.p1)
 *     ccw2 = r2_ccw(ls2.p1, ls2.p2, ls1.p2)             # <<<<<<<<<<<<<<
 *     if ccw1 * ccw2 > 0:
 *         return NO
 */
  __pyx_v_ccw2 = __pyx_f_6cycart_6native_5space_r2_ccw(__pyx_v_ls2.p1, __pyx_v_ls2.p2, __pyx_v_ls1.p2);

  /* "does_intersect.pxd":44
 *     ccw1 = r2_ccw(ls2.p1, ls2.p2, ls1.p1)
 *     ccw2 = r2_ccw(ls2.p1, ls2.p2, ls1.p2)
 *     if ccw1 * ccw2 > 0:             # <<<<<<<<<<<<<<
 *         return NO
 *     return YES
 */
  __pyx_t_1 = (((__pyx_v_ccw1 * __pyx_v_ccw2) > 0.0) != 0);
  if (__pyx_t_1) {

    /* "does_intersect.pxd":45
 *     ccw2 = r2_ccw(ls2.p1, ls2.p2, ls1.p2)
 *     if ccw1 * ccw2 > 0:
 *         return NO             # <<<<<<<<<<<<<<
 *     return YES
 * 
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_NO;
    goto __pyx_L0;

    /* "does_intersect.pxd":44
 *     ccw1 = r2_ccw(ls2.p1, ls2.p2, ls1.p1)
 *     ccw2 = r2_ccw(ls2.p1, ls2.p2, ls1.p2)
 *     if ccw1 * ccw2 > 0:             # <<<<<<<<<<<<<<
 *         return NO
 *     return YES
 */
  }

  /* "does_intersect.pxd":46
 *     if ccw1 * ccw2 > 0:
 *         return NO
 *     return YES             # <<<<<<<<<<<<<<
 * 
 * cdef inline IRES ls2_c2_does_intersect(const _LineSegment& seg, const _Circle& circle):
 */
  __pyx_r = __pyx_e_6cycart_6native_14does_intersect_YES;
  goto __pyx_L0;

  /* "does_intersect.pxd":33
 *     return det != 0
 * 
 * cdef inline IRES ls2_ls2_does_intersect(const _LineSegment& ls1, const _LineSegment& ls2):             # <<<<<<<<<<<<<<
 *     if ls2_approx(ls1, ls2):
 *         return ERROR
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "does_intersect.pxd":48
 *     return YES
 * 
 * cdef inline IRES ls2_c2_does_intersect(const _LineSegment& seg, const _Circle& circle):             # <<<<<<<<<<<<<<
 *     cdef _Line line
 *     if not l2_ref_by_points(line, seg.p1, seg.p2):
 */

static CYTHON_INLINE enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_f_6cycart_6native_14does_intersect_ls2_c2_does_intersect(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_seg, struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_circle) {
  struct __pyx_t_6cycart_6native_6dtypes__Line __pyx_v_line;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_closest;
  struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_v_norm;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_dist;
  enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("ls2_c2_does_intersect", 0);

  /* "does_intersect.pxd":50
 * cdef inline IRES ls2_c2_does_intersect(const _LineSegment& seg, const _Circle& circle):
 *     cdef _Line line
 *     if not l2_ref_by_points(line, seg.p1, seg.p2):             # <<<<<<<<<<<<<<
 *         return ERROR
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_4line_l2_ref_by_points(__pyx_v_line, __pyx_v_seg.p1, __pyx_v_seg.p2) != 0)) != 0);
  if (__pyx_t_1) {

    /* "does_intersect.pxd":51
 *     cdef _Line line
 *     if not l2_ref_by_points(line, seg.p1, seg.p2):
 *         return ERROR             # <<<<<<<<<<<<<<
 * 
 *     cdef _R2 closest = l2_closest_point(line, circle.center)
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_ERROR;
    goto __pyx_L0;

    /* "does_intersect.pxd":50
 * cdef inline IRES ls2_c2_does_intersect(const _LineSegment& seg, const _Circle& circle):
 *     cdef _Line line
 *     if not l2_ref_by_points(line, seg.p1, seg.p2):             # <<<<<<<<<<<<<<
 *         return ERROR
 * 
 */
  }

  /* "does_intersect.pxd":53
 *         return ERROR
 * 
 *     cdef _R2 closest = l2_closest_point(line, circle.center)             # <<<<<<<<<<<<<<
 *     cdef _LineSegment norm = ls2_normalized(seg)
 * 
 */
  __pyx_v_closest = __pyx_f_6cycart_6native_4line_l2_closest_point(__pyx_v_line, __pyx_v_circle.center);

  /* "does_intersect.pxd":54
 * 
 *     cdef _R2 closest = l2_closest_point(line, circle.center)
 *     cdef _LineSegment norm = ls2_normalized(seg)             # <<<<<<<<<<<<<<
 * 
 *     if r2_cmp_points(closest, norm.p2) > 0:
 */
  __pyx_v_norm = __pyx_f_6cycart_6native_7segment_ls2_normalized(__pyx_v_seg);

  /* "does_intersect.pxd":56
 *     cdef _LineSegment norm = ls2_normalized(seg)
 * 
 *     if r2_cmp_points(closest, norm.p2) > 0:             # <<<<<<<<<<<<<<
 *         closest = norm.p2
 *     elif r2_cmp_points(closest, norm.p1) < 0:
 */
  __pyx_t_1 = ((__pyx_f_6cycart_6native_5space_r2_cmp_points(__pyx_v_closest, __pyx_v_norm.p2) > 0) != 0);
  if (__pyx_t_1) {

    /* "does_intersect.pxd":57
 * 
 *     if r2_cmp_points(closest, norm.p2) > 0:
 *         closest = norm.p2             # <<<<<<<<<<<<<<
 *     elif r2_cmp_points(closest, norm.p1) < 0:
 *         closest = norm.p1
 */
    __pyx_t_2 = __pyx_v_norm.p2;
    __pyx_v_closest = __pyx_t_2;

    /* "does_intersect.pxd":56
 *     cdef _LineSegment norm = ls2_normalized(seg)
 * 
 *     if r2_cmp_points(closest, norm.p2) > 0:             # <<<<<<<<<<<<<<
 *         closest = norm.p2
 *     elif r2_cmp_points(closest, norm.p1) < 0:
 */
    goto __pyx_L4;
  }

  /* "does_intersect.pxd":58
 *     if r2_cmp_points(closest, norm.p2) > 0:
 *         closest = norm.p2
 *     elif r2_cmp_points(closest, norm.p1) < 0:             # <<<<<<<<<<<<<<
 *         closest = norm.p1
 * 
 */
  __pyx_t_1 = ((__pyx_f_6cycart_6native_5space_r2_cmp_points(__pyx_v_closest, __pyx_v_norm.p1) < 0) != 0);
  if (__pyx_t_1) {

    /* "does_intersect.pxd":59
 *         closest = norm.p2
 *     elif r2_cmp_points(closest, norm.p1) < 0:
 *         closest = norm.p1             # <<<<<<<<<<<<<<
 * 
 *     cdef _R2 dist = r2_sub(circle.center, closest)
 */
    __pyx_t_2 = __pyx_v_norm.p1;
    __pyx_v_closest = __pyx_t_2;

    /* "does_intersect.pxd":58
 *     if r2_cmp_points(closest, norm.p2) > 0:
 *         closest = norm.p2
 *     elif r2_cmp_points(closest, norm.p1) < 0:             # <<<<<<<<<<<<<<
 *         closest = norm.p1
 * 
 */
  }
  __pyx_L4:;

  /* "does_intersect.pxd":61
 *         closest = norm.p1
 * 
 *     cdef _R2 dist = r2_sub(circle.center, closest)             # <<<<<<<<<<<<<<
 *     if r2_dot(dist, dist) > circle.radius ** 2:
 *         return NO
 */
  __pyx_v_dist = __pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_circle.center, __pyx_v_closest);

  /* "does_intersect.pxd":62
 * 
 *     cdef _R2 dist = r2_sub(circle.center, closest)
 *     if r2_dot(dist, dist) > circle.radius ** 2:             # <<<<<<<<<<<<<<
 *         return NO
 * 
 */
  __pyx_t_1 = ((__pyx_f_6cycart_6native_5space_r2_dot(__pyx_v_dist, __pyx_v_dist) > pow(((double)__pyx_v_circle.radius), 2.0)) != 0);
  if (__pyx_t_1) {

    /* "does_intersect.pxd":63
 *     cdef _R2 dist = r2_sub(circle.center, closest)
 *     if r2_dot(dist, dist) > circle.radius ** 2:
 *         return NO             # <<<<<<<<<<<<<<
 * 
 *     if c2_contains(circle, norm.p1) and c2_contains(circle, norm.p2):
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_NO;
    goto __pyx_L0;

    /* "does_intersect.pxd":62
 * 
 *     cdef _R2 dist = r2_sub(circle.center, closest)
 *     if r2_dot(dist, dist) > circle.radius ** 2:             # <<<<<<<<<<<<<<
 *         return NO
 * 
 */
  }

  /* "does_intersect.pxd":65
 *         return NO
 * 
 *     if c2_contains(circle, norm.p1) and c2_contains(circle, norm.p2):             # <<<<<<<<<<<<<<
 *         return NO
 * 
 */
  __pyx_t_3 = (__pyx_f_6cycart_6native_6circle_c2_contains(__pyx_v_circle, __pyx_v_norm.p1) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_f_6cycart_6native_6circle_c2_contains(__pyx_v_circle, __pyx_v_norm.p2) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "does_intersect.pxd":66
 * 
 *     if c2_contains(circle, norm.p1) and c2_contains(circle, norm.p2):
 *         return NO             # <<<<<<<<<<<<<<
 * 
 *     return YES
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_NO;
    goto __pyx_L0;

    /* "does_intersect.pxd":65
 *         return NO
 * 
 *     if c2_contains(circle, norm.p1) and c2_contains(circle, norm.p2):             # <<<<<<<<<<<<<<
 *         return NO
 * 
 */
  }

  /* "does_intersect.pxd":68
 *         return NO
 * 
 *     return YES             # <<<<<<<<<<<<<<
 * 
 * cdef inline IRES ls2_l2_does_intersect(const _LineSegment& seg, const _Line& line):
 */
  __pyx_r = __pyx_e_6cycart_6native_14does_intersect_YES;
  goto __pyx_L0;

  /* "does_intersect.pxd":48
 *     return YES
 * 
 * cdef inline IRES ls2_c2_does_intersect(const _LineSegment& seg, const _Circle& circle):             # <<<<<<<<<<<<<<
 *     cdef _Line line
 *     if not l2_ref_by_points(line, seg.p1, seg.p2):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "does_intersect.pxd":70
 *     return YES
 * 
 * cdef inline IRES ls2_l2_does_intersect(const _LineSegment& seg, const _Line& line):             # <<<<<<<<<<<<<<
 *     cdef int s1 = l2_point_on_side(line, seg.p1)
 *     cdef int s2 = l2_point_on_side(line, seg.p2)
 */

static CYTHON_INLINE enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_f_6cycart_6native_14does_intersect_ls2_l2_does_intersect(struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_seg, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line) {
  int __pyx_v_s1;
  int __pyx_v_s2;
  enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("ls2_l2_does_intersect", 0);

  /* "does_intersect.pxd":71
 * 
 * cdef inline IRES ls2_l2_does_intersect(const _LineSegment& seg, const _Line& line):
 *     cdef int s1 = l2_point_on_side(line, seg.p1)             # <<<<<<<<<<<<<<
 *     cdef int s2 = l2_point_on_side(line, seg.p2)
 *     if s1 == s2 == 0:
 */
  __pyx_v_s1 = __pyx_f_6cycart_6native_4line_l2_point_on_side(__pyx_v_line, __pyx_v_seg.p1);

  /* "does_intersect.pxd":72
 * cdef inline IRES ls2_l2_does_intersect(const _LineSegment& seg, const _Line& line):
 *     cdef int s1 = l2_point_on_side(line, seg.p1)
 *     cdef int s2 = l2_point_on_side(line, seg.p2)             # <<<<<<<<<<<<<<
 *     if s1 == s2 == 0:
 *         return ERROR
 */
  __pyx_v_s2 = __pyx_f_6cycart_6native_4line_l2_point_on_side(__pyx_v_line, __pyx_v_seg.p2);

  /* "does_intersect.pxd":73
 *     cdef int s1 = l2_point_on_side(line, seg.p1)
 *     cdef int s2 = l2_point_on_side(line, seg.p2)
 *     if s1 == s2 == 0:             # <<<<<<<<<<<<<<
 *         return ERROR
 *     if s1 == s2:
 */
  __pyx_t_1 = (__pyx_v_s1 == __pyx_v_s2);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_s2 == 0);
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "does_intersect.pxd":74
 *     cdef int s2 = l2_point_on_side(line, seg.p2)
 *     if s1 == s2 == 0:
 *         return ERROR             # <<<<<<<<<<<<<<
 *     if s1 == s2:
 *         return NO
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_ERROR;
    goto __pyx_L0;

    /* "does_intersect.pxd":73
 *     cdef int s1 = l2_point_on_side(line, seg.p1)
 *     cdef int s2 = l2_point_on_side(line, seg.p2)
 *     if s1 == s2 == 0:             # <<<<<<<<<<<<<<
 *         return ERROR
 *     if s1 == s2:
 */
  }

  /* "does_intersect.pxd":75
 *     if s1 == s2 == 0:
 *         return ERROR
 *     if s1 == s2:             # <<<<<<<<<<<<<<
 *         return NO
 *     return YES
 */
  __pyx_t_2 = ((__pyx_v_s1 == __pyx_v_s2) != 0);
  if (__pyx_t_2) {

    /* "does_intersect.pxd":76
 *         return ERROR
 *     if s1 == s2:
 *         return NO             # <<<<<<<<<<<<<<
 *     return YES
 * 
 */
    __pyx_r = __pyx_e_6cycart_6native_14does_intersect_NO;
    goto __pyx_L0;

    /* "does_intersect.pxd":75
 *     if s1 == s2 == 0:
 *         return ERROR
 *     if s1 == s2:             # <<<<<<<<<<<<<<
 *         return NO
 *     return YES
 */
  }

  /* "does_intersect.pxd":77
 *     if s1 == s2:
 *         return NO
 *     return YES             # <<<<<<<<<<<<<<
 * 
 * cdef inline IRES l2_c2_does_intersect(const _Line& line, const _Circle& circle):
 */
  __pyx_r = __pyx_e_6cycart_6native_14does_intersect_YES;
  goto __pyx_L0;

  /* "does_intersect.pxd":70
 *     return YES
 * 
 * cdef inline IRES ls2_l2_does_intersect(const _LineSegment& seg, const _Line& line):             # <<<<<<<<<<<<<<
 *     cdef int s1 = l2_point_on_side(line, seg.p1)
 *     cdef int s2 = l2_point_on_side(line, seg.p2)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "does_intersect.pxd":79
 *     return YES
 * 
 * cdef inline IRES l2_c2_does_intersect(const _Line& line, const _Circle& circle):             # <<<<<<<<<<<<<<
 *     cdef lconst = fabs(l2_constant(line, circle.center) - line.c)
 *     cdef dist2 = lconst ** 2 / (line.a ** 2 + line.b ** 2)
 */

static CYTHON_INLINE enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_f_6cycart_6native_14does_intersect_l2_c2_does_intersect(struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line, struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_circle) {
  PyObject *__pyx_v_lconst = 0;
  PyObject *__pyx_v_dist2 = 0;
  enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_t_4;
  __Pyx_RefNannySetupContext("l2_c2_does_intersect", 0);

  /* "does_intersect.pxd":80
 * 
 * cdef inline IRES l2_c2_does_intersect(const _Line& line, const _Circle& circle):
 *     cdef lconst = fabs(l2_constant(line, circle.center) - line.c)             # <<<<<<<<<<<<<<
 *     cdef dist2 = lconst ** 2 / (line.a ** 2 + line.b ** 2)
 *     return dist2 <= circle.radius ** 2
 */
  __pyx_t_1 = PyFloat_FromDouble(fabs((__pyx_f_6cycart_6native_4line_l2_constant(__pyx_v_line, __pyx_v_circle.center) - __pyx_v_line.c))); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lconst = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "does_intersect.pxd":81
 * cdef inline IRES l2_c2_does_intersect(const _Line& line, const _Circle& circle):
 *     cdef lconst = fabs(l2_constant(line, circle.center) - line.c)
 *     cdef dist2 = lconst ** 2 / (line.a ** 2 + line.b ** 2)             # <<<<<<<<<<<<<<
 *     return dist2 <= circle.radius ** 2
 * 
 */
  __pyx_t_1 = PyNumber_Power(__pyx_v_lconst, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble((pow(((double)__pyx_v_line.a), 2.0) + pow(((double)__pyx_v_line.b), 2.0))); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dist2 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "does_intersect.pxd":82
 *     cdef lconst = fabs(l2_constant(line, circle.center) - line.c)
 *     cdef dist2 = lconst ** 2 / (line.a ** 2 + line.b ** 2)
 *     return dist2 <= circle.radius ** 2             # <<<<<<<<<<<<<<
 * 
 * #todo: polygon
 */
  __pyx_t_3 = PyFloat_FromDouble(pow(((double)__pyx_v_circle.radius), 2.0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_dist2, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((enum __pyx_t_6cycart_6native_14does_intersect_IRES)__Pyx_PyInt_As_enum____pyx_t_6cycart_6native_14does_intersect_IRES(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "does_intersect.pxd":79
 *     return YES
 * 
 * cdef inline IRES l2_c2_does_intersect(const _Line& line, const _Circle& circle):             # <<<<<<<<<<<<<<
 *     cdef lconst = fabs(l2_constant(line, circle.center) - line.c)
 *     cdef dist2 = lconst ** 2 / (line.a ** 2 + line.b ** 2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cycart.native.does_intersect.l2_c2_does_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum __pyx_t_6cycart_6native_14does_intersect_IRES) 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lconst);
  __Pyx_XDECREF(__pyx_v_dist2);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/intersect.pxd":32
 * 
 * 
 * cdef inline bint l2_l2_intersect_set(vector[_R2]& out, const _Line& l1, const _Line& l2):             # <<<<<<<<<<<<<<
 *     if l2_approx(l1, l2):
 *         return False
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_l2_l2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_l1, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_l2) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_candidate;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("l2_l2_intersect_set", 0);

  /* "cycart/native/intersect.pxd":33
 * 
 * cdef inline bint l2_l2_intersect_set(vector[_R2]& out, const _Line& l1, const _Line& l2):
 *     if l2_approx(l1, l2):             # <<<<<<<<<<<<<<
 *         return False
 *     cdef _R2 candidate
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_4line_l2_approx(__pyx_v_l1, __pyx_v_l2, NULL) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":34
 * cdef inline bint l2_l2_intersect_set(vector[_R2]& out, const _Line& l1, const _Line& l2):
 *     if l2_approx(l1, l2):
 *         return False             # <<<<<<<<<<<<<<
 *     cdef _R2 candidate
 *     if l2_l2_intersect(candidate, l1, l2):
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":33
 * 
 * cdef inline bint l2_l2_intersect_set(vector[_R2]& out, const _Line& l1, const _Line& l2):
 *     if l2_approx(l1, l2):             # <<<<<<<<<<<<<<
 *         return False
 *     cdef _R2 candidate
 */
  }

  /* "cycart/native/intersect.pxd":36
 *         return False
 *     cdef _R2 candidate
 *     if l2_l2_intersect(candidate, l1, l2):             # <<<<<<<<<<<<<<
 *         out.push_back(candidate)
 *     return True
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_9intersect_l2_l2_intersect(__pyx_v_candidate, __pyx_v_l1, __pyx_v_l2) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":37
 *     cdef _R2 candidate
 *     if l2_l2_intersect(candidate, l1, l2):
 *         out.push_back(candidate)             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
    try {
      __pyx_v_out.push_back(__pyx_v_candidate);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(9, 37, __pyx_L1_error)
    }

    /* "cycart/native/intersect.pxd":36
 *         return False
 *     cdef _R2 candidate
 *     if l2_l2_intersect(candidate, l1, l2):             # <<<<<<<<<<<<<<
 *         out.push_back(candidate)
 *     return True
 */
  }

  /* "cycart/native/intersect.pxd":38
 *     if l2_l2_intersect(candidate, l1, l2):
 *         out.push_back(candidate)
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint c2_c2_intersect_set(vector[_R2]& out, const _Circle& c1, const _Circle& c2):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/native/intersect.pxd":32
 * 
 * 
 * cdef inline bint l2_l2_intersect_set(vector[_R2]& out, const _Line& l1, const _Line& l2):             # <<<<<<<<<<<<<<
 *     if l2_approx(l1, l2):
 *         return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.intersect.l2_l2_intersect_set", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/intersect.pxd":40
 *     return True
 * 
 * cdef inline bint c2_c2_intersect_set(vector[_R2]& out, const _Circle& c1, const _Circle& c2):             # <<<<<<<<<<<<<<
 *     cdef IRES check = c2_c2_does_intersect(c1, c2)
 *     if check == ERROR:
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_c2_c2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_c1, struct __pyx_t_6cycart_6native_6dtypes__Circle const &__pyx_v_c2) {
  enum __pyx_t_6cycart_6native_14does_intersect_IRES __pyx_v_check;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_cvec;
  double __pyx_v_cdist;
  double __pyx_v_apothem;
  double __pyx_v_h;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("c2_c2_intersect_set", 0);

  /* "cycart/native/intersect.pxd":41
 * 
 * cdef inline bint c2_c2_intersect_set(vector[_R2]& out, const _Circle& c1, const _Circle& c2):
 *     cdef IRES check = c2_c2_does_intersect(c1, c2)             # <<<<<<<<<<<<<<
 *     if check == ERROR:
 *         return False
 */
  __pyx_v_check = __pyx_f_6cycart_6native_14does_intersect_c2_c2_does_intersect(__pyx_v_c1, __pyx_v_c2);

  /* "cycart/native/intersect.pxd":42
 * cdef inline bint c2_c2_intersect_set(vector[_R2]& out, const _Circle& c1, const _Circle& c2):
 *     cdef IRES check = c2_c2_does_intersect(c1, c2)
 *     if check == ERROR:             # <<<<<<<<<<<<<<
 *         return False
 *     if check == NO:
 */
  __pyx_t_1 = ((__pyx_v_check == __pyx_e_6cycart_6native_14does_intersect_ERROR) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":43
 *     cdef IRES check = c2_c2_does_intersect(c1, c2)
 *     if check == ERROR:
 *         return False             # <<<<<<<<<<<<<<
 *     if check == NO:
 *         return True
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":42
 * cdef inline bint c2_c2_intersect_set(vector[_R2]& out, const _Circle& c1, const _Circle& c2):
 *     cdef IRES check = c2_c2_does_intersect(c1, c2)
 *     if check == ERROR:             # <<<<<<<<<<<<<<
 *         return False
 *     if check == NO:
 */
  }

  /* "cycart/native/intersect.pxd":44
 *     if check == ERROR:
 *         return False
 *     if check == NO:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_t_1 = ((__pyx_v_check == __pyx_e_6cycart_6native_14does_intersect_NO) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":45
 *         return False
 *     if check == NO:
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef _R2 cvec = r2_sub(c2.center, c1.center)
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":44
 *     if check == ERROR:
 *         return False
 *     if check == NO:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "cycart/native/intersect.pxd":47
 *         return True
 * 
 *     cdef _R2 cvec = r2_sub(c2.center, c1.center)             # <<<<<<<<<<<<<<
 *     cdef double cdist = r2_magnitude(cvec)
 * 
 */
  __pyx_v_cvec = __pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_c2.center, __pyx_v_c1.center);

  /* "cycart/native/intersect.pxd":48
 * 
 *     cdef _R2 cvec = r2_sub(c2.center, c1.center)
 *     cdef double cdist = r2_magnitude(cvec)             # <<<<<<<<<<<<<<
 * 
 *     cdef double apothem = (c1.radius ** 2 - c2.radius ** 2 + cdist ** 2) / (2 * cdist)
 */
  __pyx_v_cdist = __pyx_f_6cycart_6native_5space_r2_magnitude(__pyx_v_cvec);

  /* "cycart/native/intersect.pxd":50
 *     cdef double cdist = r2_magnitude(cvec)
 * 
 *     cdef double apothem = (c1.radius ** 2 - c2.radius ** 2 + cdist ** 2) / (2 * cdist)             # <<<<<<<<<<<<<<
 * 
 *     if not r2_ref_unit(cvec, cvec):
 */
  __pyx_t_2 = ((pow(((double)__pyx_v_c1.radius), 2.0) - pow(((double)__pyx_v_c2.radius), 2.0)) + pow(__pyx_v_cdist, 2.0));
  __pyx_t_3 = (2.0 * __pyx_v_cdist);
  if (unlikely(__pyx_t_3 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(9, 50, __pyx_L1_error)
  }
  __pyx_v_apothem = (__pyx_t_2 / __pyx_t_3);

  /* "cycart/native/intersect.pxd":52
 *     cdef double apothem = (c1.radius ** 2 - c2.radius ** 2 + cdist ** 2) / (2 * cdist)
 * 
 *     if not r2_ref_unit(cvec, cvec):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_5space_r2_ref_unit(__pyx_v_cvec, __pyx_v_cvec) != 0)) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":53
 * 
 *     if not r2_ref_unit(cvec, cvec):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cvec = r2_add(c1.center, r2_mul(cvec, apothem))
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":52
 *     cdef double apothem = (c1.radius ** 2 - c2.radius ** 2 + cdist ** 2) / (2 * cdist)
 * 
 *     if not r2_ref_unit(cvec, cvec):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "cycart/native/intersect.pxd":55
 *         return False
 * 
 *     cvec = r2_add(c1.center, r2_mul(cvec, apothem))             # <<<<<<<<<<<<<<
 *     if apothem == c1.radius:
 *         out.push_back(cvec)
 */
  __pyx_v_cvec = __pyx_f_6cycart_6native_5space_r2_add(__pyx_v_c1.center, __pyx_f_6cycart_6native_5space_r2_mul(__pyx_v_cvec, __pyx_v_apothem));

  /* "cycart/native/intersect.pxd":56
 * 
 *     cvec = r2_add(c1.center, r2_mul(cvec, apothem))
 *     if apothem == c1.radius:             # <<<<<<<<<<<<<<
 *         out.push_back(cvec)
 *         return True
 */
  __pyx_t_1 = ((__pyx_v_apothem == __pyx_v_c1.radius) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":57
 *     cvec = r2_add(c1.center, r2_mul(cvec, apothem))
 *     if apothem == c1.radius:
 *         out.push_back(cvec)             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    try {
      __pyx_v_out.push_back(__pyx_v_cvec);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(9, 57, __pyx_L1_error)
    }

    /* "cycart/native/intersect.pxd":58
 *     if apothem == c1.radius:
 *         out.push_back(cvec)
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef double h = sqrt(c1.radius ** 2 - apothem ** 2)
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":56
 * 
 *     cvec = r2_add(c1.center, r2_mul(cvec, apothem))
 *     if apothem == c1.radius:             # <<<<<<<<<<<<<<
 *         out.push_back(cvec)
 *         return True
 */
  }

  /* "cycart/native/intersect.pxd":60
 *         return True
 * 
 *     cdef double h = sqrt(c1.radius ** 2 - apothem ** 2)             # <<<<<<<<<<<<<<
 *     cdef _R2 offset
 *     offset.x = c2.center.y - c1.center.y
 */
  __pyx_v_h = sqrt((pow(((double)__pyx_v_c1.radius), 2.0) - pow(__pyx_v_apothem, 2.0)));

  /* "cycart/native/intersect.pxd":62
 *     cdef double h = sqrt(c1.radius ** 2 - apothem ** 2)
 *     cdef _R2 offset
 *     offset.x = c2.center.y - c1.center.y             # <<<<<<<<<<<<<<
 *     offset.y = c1.center.x - c2.center.x
 *     offset = r2_mul(offset, h / cdist)
 */
  __pyx_v_offset.x = (__pyx_v_c2.center.y - __pyx_v_c1.center.y);

  /* "cycart/native/intersect.pxd":63
 *     cdef _R2 offset
 *     offset.x = c2.center.y - c1.center.y
 *     offset.y = c1.center.x - c2.center.x             # <<<<<<<<<<<<<<
 *     offset = r2_mul(offset, h / cdist)
 * 
 */
  __pyx_v_offset.y = (__pyx_v_c1.center.x - __pyx_v_c2.center.x);

  /* "cycart/native/intersect.pxd":64
 *     offset.x = c2.center.y - c1.center.y
 *     offset.y = c1.center.x - c2.center.x
 *     offset = r2_mul(offset, h / cdist)             # <<<<<<<<<<<<<<
 * 
 *     out.push_back(r2_add(cvec, offset))
 */
  if (unlikely(__pyx_v_cdist == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(9, 64, __pyx_L1_error)
  }
  __pyx_v_offset = __pyx_f_6cycart_6native_5space_r2_mul(__pyx_v_offset, (__pyx_v_h / __pyx_v_cdist));

  /* "cycart/native/intersect.pxd":66
 *     offset = r2_mul(offset, h / cdist)
 * 
 *     out.push_back(r2_add(cvec, offset))             # <<<<<<<<<<<<<<
 *     out.push_back(r2_sub(cvec, offset))
 *     return True
 */
  try {
    __pyx_v_out.push_back(__pyx_f_6cycart_6native_5space_r2_add(__pyx_v_cvec, __pyx_v_offset));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(9, 66, __pyx_L1_error)
  }

  /* "cycart/native/intersect.pxd":67
 * 
 *     out.push_back(r2_add(cvec, offset))
 *     out.push_back(r2_sub(cvec, offset))             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  try {
    __pyx_v_out.push_back(__pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_cvec, __pyx_v_offset));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(9, 67, __pyx_L1_error)
  }

  /* "cycart/native/intersect.pxd":68
 *     out.push_back(r2_add(cvec, offset))
 *     out.push_back(r2_sub(cvec, offset))
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint ls2_ls2_intersect_set(vector[_R2]& out, const _LineSegment& ls1, const _LineSegment& ls2):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/native/intersect.pxd":40
 *     return True
 * 
 * cdef inline bint c2_c2_intersect_set(vector[_R2]& out, const _Circle& c1, const _Circle& c2):             # <<<<<<<<<<<<<<
 *     cdef IRES check = c2_c2_does_intersect(c1, c2)
 *     if check == ERROR:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.intersect.c2_c2_intersect_set", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/intersect.pxd":70
 *     return True
 * 
 * cdef inline bint ls2_ls2_intersect_set(vector[_R2]& out, const _LineSegment& ls1, const _LineSegment& ls2):             # <<<<<<<<<<<<<<
 *     if ls2_overlaps(ls1, ls2):
 *         return False
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_ls2_ls2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_ls1, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_ls2) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_candidate;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("ls2_ls2_intersect_set", 0);

  /* "cycart/native/intersect.pxd":71
 * 
 * cdef inline bint ls2_ls2_intersect_set(vector[_R2]& out, const _LineSegment& ls1, const _LineSegment& ls2):
 *     if ls2_overlaps(ls1, ls2):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_7segment_ls2_overlaps(__pyx_v_ls1, __pyx_v_ls2) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":72
 * cdef inline bint ls2_ls2_intersect_set(vector[_R2]& out, const _LineSegment& ls1, const _LineSegment& ls2):
 *     if ls2_overlaps(ls1, ls2):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     #if ls2_overlap(ls1, ls2) > 0:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":71
 * 
 * cdef inline bint ls2_ls2_intersect_set(vector[_R2]& out, const _LineSegment& ls1, const _LineSegment& ls2):
 *     if ls2_overlaps(ls1, ls2):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "cycart/native/intersect.pxd":78
 * 
 *     cdef _R2 candidate
 *     if ls2_ls2_intersect(candidate, ls1, ls2):             # <<<<<<<<<<<<<<
 *         out.push_back(candidate)
 * 
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_9intersect_ls2_ls2_intersect(__pyx_v_candidate, __pyx_v_ls1, __pyx_v_ls2) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":79
 *     cdef _R2 candidate
 *     if ls2_ls2_intersect(candidate, ls1, ls2):
 *         out.push_back(candidate)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
    try {
      __pyx_v_out.push_back(__pyx_v_candidate);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(9, 79, __pyx_L1_error)
    }

    /* "cycart/native/intersect.pxd":78
 * 
 *     cdef _R2 candidate
 *     if ls2_ls2_intersect(candidate, ls1, ls2):             # <<<<<<<<<<<<<<
 *         out.push_back(candidate)
 * 
 */
  }

  /* "cycart/native/intersect.pxd":81
 *         out.push_back(candidate)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint ls2_c2_intersect_set(vector[_R2]& out, const _LineSegment& seg, const _Circle circle):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/native/intersect.pxd":70
 *     return True
 * 
 * cdef inline bint ls2_ls2_intersect_set(vector[_R2]& out, const _LineSegment& ls1, const _LineSegment& ls2):             # <<<<<<<<<<<<<<
 *     if ls2_overlaps(ls1, ls2):
 *         return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.intersect.ls2_ls2_intersect_set", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/intersect.pxd":83
 *     return True
 * 
 * cdef inline bint ls2_c2_intersect_set(vector[_R2]& out, const _LineSegment& seg, const _Circle circle):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     cdef _Line line
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_ls2_c2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_seg, struct __pyx_t_6cycart_6native_6dtypes__Circle const __pyx_v_circle) {
  std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  __pyx_v_collect;
  struct __pyx_t_6cycart_6native_6dtypes__Line __pyx_v_line;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_point;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2> ::iterator __pyx_t_2;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_3;
  __Pyx_RefNannySetupContext("ls2_c2_intersect_set", 0);

  /* "cycart/native/intersect.pxd":86
 *     cdef vector[_R2] collect
 *     cdef _Line line
 *     if not l2_ref_by_points(line, seg.p1, seg.p2):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_4line_l2_ref_by_points(__pyx_v_line, __pyx_v_seg.p1, __pyx_v_seg.p2) != 0)) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":87
 *     cdef _Line line
 *     if not l2_ref_by_points(line, seg.p1, seg.p2):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     if not l2_c2_intersect_set(collect, line, circle):
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":86
 *     cdef vector[_R2] collect
 *     cdef _Line line
 *     if not l2_ref_by_points(line, seg.p1, seg.p2):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "cycart/native/intersect.pxd":89
 *         return False
 * 
 *     if not l2_c2_intersect_set(collect, line, circle):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_9intersect_l2_c2_intersect_set(__pyx_v_collect, __pyx_v_line, __pyx_v_circle) != 0)) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":90
 * 
 *     if not l2_c2_intersect_set(collect, line, circle):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     #cdef _R2 temp
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":89
 *         return False
 * 
 *     if not l2_c2_intersect_set(collect, line, circle):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "cycart/native/intersect.pxd":93
 * 
 *     #cdef _R2 temp
 *     for point in collect:             # <<<<<<<<<<<<<<
 *         #temp.x, temp.y = point
 *         if ls2_contains(seg, point):
 */
  __pyx_t_2 = __pyx_v_collect.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_collect.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_point = __pyx_t_3;

    /* "cycart/native/intersect.pxd":95
 *     for point in collect:
 *         #temp.x, temp.y = point
 *         if ls2_contains(seg, point):             # <<<<<<<<<<<<<<
 *             out.push_back(point)
 * 
 */
    __pyx_t_1 = (__pyx_f_6cycart_6native_7segment_ls2_contains(__pyx_v_seg, __pyx_v_point, NULL) != 0);
    if (__pyx_t_1) {

      /* "cycart/native/intersect.pxd":96
 *         #temp.x, temp.y = point
 *         if ls2_contains(seg, point):
 *             out.push_back(point)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
      try {
        __pyx_v_out.push_back(__pyx_v_point);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(9, 96, __pyx_L1_error)
      }

      /* "cycart/native/intersect.pxd":95
 *     for point in collect:
 *         #temp.x, temp.y = point
 *         if ls2_contains(seg, point):             # <<<<<<<<<<<<<<
 *             out.push_back(point)
 * 
 */
    }

    /* "cycart/native/intersect.pxd":93
 * 
 *     #cdef _R2 temp
 *     for point in collect:             # <<<<<<<<<<<<<<
 *         #temp.x, temp.y = point
 *         if ls2_contains(seg, point):
 */
  }

  /* "cycart/native/intersect.pxd":98
 *             out.push_back(point)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint ls2_l2_intersect_set(vector[_R2]& out, const _LineSegment& seg, const _Line line):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/native/intersect.pxd":83
 *     return True
 * 
 * cdef inline bint ls2_c2_intersect_set(vector[_R2]& out, const _LineSegment& seg, const _Circle circle):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     cdef _Line line
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.intersect.ls2_c2_intersect_set", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/intersect.pxd":100
 *     return True
 * 
 * cdef inline bint ls2_l2_intersect_set(vector[_R2]& out, const _LineSegment& seg, const _Line line):             # <<<<<<<<<<<<<<
 *     cdef _Line seg_line
 *     if not l2_ref_by_points(seg_line, seg.p1, seg.p2):
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_ls2_l2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_seg, struct __pyx_t_6cycart_6native_6dtypes__Line const __pyx_v_line) {
  struct __pyx_t_6cycart_6native_6dtypes__Line __pyx_v_seg_line;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_candidate;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("ls2_l2_intersect_set", 0);

  /* "cycart/native/intersect.pxd":102
 * cdef inline bint ls2_l2_intersect_set(vector[_R2]& out, const _LineSegment& seg, const _Line line):
 *     cdef _Line seg_line
 *     if not l2_ref_by_points(seg_line, seg.p1, seg.p2):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_4line_l2_ref_by_points(__pyx_v_seg_line, __pyx_v_seg.p1, __pyx_v_seg.p2) != 0)) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":103
 *     cdef _Line seg_line
 *     if not l2_ref_by_points(seg_line, seg.p1, seg.p2):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     if l2_approx(line, seg_line):
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":102
 * cdef inline bint ls2_l2_intersect_set(vector[_R2]& out, const _LineSegment& seg, const _Line line):
 *     cdef _Line seg_line
 *     if not l2_ref_by_points(seg_line, seg.p1, seg.p2):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "cycart/native/intersect.pxd":105
 *         return False
 * 
 *     if l2_approx(line, seg_line):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_4line_l2_approx(__pyx_v_line, __pyx_v_seg_line, NULL) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":106
 * 
 *     if l2_approx(line, seg_line):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cdef _R2 candidate
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":105
 *         return False
 * 
 *     if l2_approx(line, seg_line):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "cycart/native/intersect.pxd":109
 * 
 *     cdef _R2 candidate
 *     if l2_l2_intersect(candidate, seg_line, line):             # <<<<<<<<<<<<<<
 *         if ls2_contains(seg, candidate):
 *             out.push_back(candidate)
 */
  __pyx_t_1 = (__pyx_f_6cycart_6native_9intersect_l2_l2_intersect(__pyx_v_candidate, __pyx_v_seg_line, __pyx_v_line) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":110
 *     cdef _R2 candidate
 *     if l2_l2_intersect(candidate, seg_line, line):
 *         if ls2_contains(seg, candidate):             # <<<<<<<<<<<<<<
 *             out.push_back(candidate)
 *     return True
 */
    __pyx_t_1 = (__pyx_f_6cycart_6native_7segment_ls2_contains(__pyx_v_seg, __pyx_v_candidate, NULL) != 0);
    if (__pyx_t_1) {

      /* "cycart/native/intersect.pxd":111
 *     if l2_l2_intersect(candidate, seg_line, line):
 *         if ls2_contains(seg, candidate):
 *             out.push_back(candidate)             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
      try {
        __pyx_v_out.push_back(__pyx_v_candidate);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(9, 111, __pyx_L1_error)
      }

      /* "cycart/native/intersect.pxd":110
 *     cdef _R2 candidate
 *     if l2_l2_intersect(candidate, seg_line, line):
 *         if ls2_contains(seg, candidate):             # <<<<<<<<<<<<<<
 *             out.push_back(candidate)
 *     return True
 */
    }

    /* "cycart/native/intersect.pxd":109
 * 
 *     cdef _R2 candidate
 *     if l2_l2_intersect(candidate, seg_line, line):             # <<<<<<<<<<<<<<
 *         if ls2_contains(seg, candidate):
 *             out.push_back(candidate)
 */
  }

  /* "cycart/native/intersect.pxd":112
 *         if ls2_contains(seg, candidate):
 *             out.push_back(candidate)
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint l2_c2_intersect_set(vector[_R2]& out, const _Line& line, const _Circle circle):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/native/intersect.pxd":100
 *     return True
 * 
 * cdef inline bint ls2_l2_intersect_set(vector[_R2]& out, const _LineSegment& seg, const _Line line):             # <<<<<<<<<<<<<<
 *     cdef _Line seg_line
 *     if not l2_ref_by_points(seg_line, seg.p1, seg.p2):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.intersect.ls2_l2_intersect_set", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/intersect.pxd":114
 *     return True
 * 
 * cdef inline bint l2_c2_intersect_set(vector[_R2]& out, const _Line& line, const _Circle circle):             # <<<<<<<<<<<<<<
 *     cdef _Line line00
 * 
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_l2_c2_intersect_set(std::vector<struct __pyx_t_6cycart_6native_6dtypes__R2>  &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_line, struct __pyx_t_6cycart_6native_6dtypes__Circle const __pyx_v_circle) {
  struct __pyx_t_6cycart_6native_6dtypes__Line __pyx_v_line00;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_p1;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_p2;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_dv;
  double __pyx_v_dr2;
  double __pyx_v_determinant;
  PyObject *__pyx_v_descriminant = 0;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_central;
  double __pyx_v_sqrt_desc;
  double __pyx_v_sign_y;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("l2_c2_intersect_set", 0);

  /* "cycart/native/intersect.pxd":117
 *     cdef _Line line00
 * 
 *     if not l2_ref_translate(line00, line, r2_neg(circle.center)):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_6cycart_6native_4line_l2_ref_translate(__pyx_v_line00, __pyx_v_line, __pyx_f_6cycart_6native_5space_r2_neg(__pyx_v_circle.center)) != 0)) != 0);
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":118
 * 
 *     if not l2_ref_translate(line00, line, r2_neg(circle.center)):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cdef _R2 p1, p2
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":117
 *     cdef _Line line00
 * 
 *     if not l2_ref_translate(line00, line, r2_neg(circle.center)):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "cycart/native/intersect.pxd":121
 * 
 *     cdef _R2 p1, p2
 *     if l2_ref_f_of_x(p1.y, line00, 0) and l2_ref_f_of_x(p2.y, line00, 1):             # <<<<<<<<<<<<<<
 *         p1.x = 0
 *         p2.x = 1
 */
  __pyx_t_2 = (__pyx_f_6cycart_6native_4line_l2_ref_f_of_x(__pyx_v_p1.y, __pyx_v_line00, 0.0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_6cycart_6native_4line_l2_ref_f_of_x(__pyx_v_p2.y, __pyx_v_line00, 1.0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":122
 *     cdef _R2 p1, p2
 *     if l2_ref_f_of_x(p1.y, line00, 0) and l2_ref_f_of_x(p2.y, line00, 1):
 *         p1.x = 0             # <<<<<<<<<<<<<<
 *         p2.x = 1
 *     elif l2_ref_f_of_y(p1.x, line00, 0) and l2_ref_f_of_y(p2.x, line00, 1):
 */
    __pyx_v_p1.x = 0.0;

    /* "cycart/native/intersect.pxd":123
 *     if l2_ref_f_of_x(p1.y, line00, 0) and l2_ref_f_of_x(p2.y, line00, 1):
 *         p1.x = 0
 *         p2.x = 1             # <<<<<<<<<<<<<<
 *     elif l2_ref_f_of_y(p1.x, line00, 0) and l2_ref_f_of_y(p2.x, line00, 1):
 *         p1.y = 0
 */
    __pyx_v_p2.x = 1.0;

    /* "cycart/native/intersect.pxd":121
 * 
 *     cdef _R2 p1, p2
 *     if l2_ref_f_of_x(p1.y, line00, 0) and l2_ref_f_of_x(p2.y, line00, 1):             # <<<<<<<<<<<<<<
 *         p1.x = 0
 *         p2.x = 1
 */
    goto __pyx_L4;
  }

  /* "cycart/native/intersect.pxd":124
 *         p1.x = 0
 *         p2.x = 1
 *     elif l2_ref_f_of_y(p1.x, line00, 0) and l2_ref_f_of_y(p2.x, line00, 1):             # <<<<<<<<<<<<<<
 *         p1.y = 0
 *         p2.y = 1
 */
  __pyx_t_2 = (__pyx_f_6cycart_6native_4line_l2_ref_f_of_y(__pyx_v_p1.x, __pyx_v_line00, 0.0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_f_6cycart_6native_4line_l2_ref_f_of_y(__pyx_v_p2.x, __pyx_v_line00, 1.0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":125
 *         p2.x = 1
 *     elif l2_ref_f_of_y(p1.x, line00, 0) and l2_ref_f_of_y(p2.x, line00, 1):
 *         p1.y = 0             # <<<<<<<<<<<<<<
 *         p2.y = 1
 *     else:
 */
    __pyx_v_p1.y = 0.0;

    /* "cycart/native/intersect.pxd":126
 *     elif l2_ref_f_of_y(p1.x, line00, 0) and l2_ref_f_of_y(p2.x, line00, 1):
 *         p1.y = 0
 *         p2.y = 1             # <<<<<<<<<<<<<<
 *     else:
 *         return False
 */
    __pyx_v_p2.y = 1.0;

    /* "cycart/native/intersect.pxd":124
 *         p1.x = 0
 *         p2.x = 1
 *     elif l2_ref_f_of_y(p1.x, line00, 0) and l2_ref_f_of_y(p2.x, line00, 1):             # <<<<<<<<<<<<<<
 *         p1.y = 0
 *         p2.y = 1
 */
    goto __pyx_L4;
  }

  /* "cycart/native/intersect.pxd":128
 *         p2.y = 1
 *     else:
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cdef _R2 dv = r2_sub(p2, p1)
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }
  __pyx_L4:;

  /* "cycart/native/intersect.pxd":130
 *         return False
 * 
 *     cdef _R2 dv = r2_sub(p2, p1)             # <<<<<<<<<<<<<<
 *     cdef double dr2 = r2_magnitude(dv) ** 2
 *     cdef double determinant = r2_cross(p1, p2)
 */
  __pyx_v_dv = __pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_p2, __pyx_v_p1);

  /* "cycart/native/intersect.pxd":131
 * 
 *     cdef _R2 dv = r2_sub(p2, p1)
 *     cdef double dr2 = r2_magnitude(dv) ** 2             # <<<<<<<<<<<<<<
 *     cdef double determinant = r2_cross(p1, p2)
 *     cdef descriminant = circle.radius ** 2 * dr2 - determinant ** 2
 */
  __pyx_v_dr2 = pow(__pyx_f_6cycart_6native_5space_r2_magnitude(__pyx_v_dv), 2.0);

  /* "cycart/native/intersect.pxd":132
 *     cdef _R2 dv = r2_sub(p2, p1)
 *     cdef double dr2 = r2_magnitude(dv) ** 2
 *     cdef double determinant = r2_cross(p1, p2)             # <<<<<<<<<<<<<<
 *     cdef descriminant = circle.radius ** 2 * dr2 - determinant ** 2
 *     if descriminant < 0:
 */
  __pyx_v_determinant = __pyx_f_6cycart_6native_5space_r2_cross(__pyx_v_p1, __pyx_v_p2);

  /* "cycart/native/intersect.pxd":133
 *     cdef double dr2 = r2_magnitude(dv) ** 2
 *     cdef double determinant = r2_cross(p1, p2)
 *     cdef descriminant = circle.radius ** 2 * dr2 - determinant ** 2             # <<<<<<<<<<<<<<
 *     if descriminant < 0:
 *         return True
 */
  __pyx_t_3 = PyFloat_FromDouble(((pow(((double)__pyx_v_circle.radius), 2.0) * __pyx_v_dr2) - pow(__pyx_v_determinant, 2.0))); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_descriminant = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cycart/native/intersect.pxd":134
 *     cdef double determinant = r2_cross(p1, p2)
 *     cdef descriminant = circle.radius ** 2 * dr2 - determinant ** 2
 *     if descriminant < 0:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_descriminant, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 134, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":135
 *     cdef descriminant = circle.radius ** 2 * dr2 - determinant ** 2
 *     if descriminant < 0:
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef _R2 central
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":134
 *     cdef double determinant = r2_cross(p1, p2)
 *     cdef descriminant = circle.radius ** 2 * dr2 - determinant ** 2
 *     if descriminant < 0:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "cycart/native/intersect.pxd":138
 * 
 *     cdef _R2 central
 *     central.x = determinant * dv.y / dr2             # <<<<<<<<<<<<<<
 *     central.y = determinant * dv.x / dr2
 *     central = r2_add(circle.center, central)
 */
  __pyx_t_4 = (__pyx_v_determinant * __pyx_v_dv.y);
  if (unlikely(__pyx_v_dr2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(9, 138, __pyx_L1_error)
  }
  __pyx_v_central.x = (__pyx_t_4 / __pyx_v_dr2);

  /* "cycart/native/intersect.pxd":139
 *     cdef _R2 central
 *     central.x = determinant * dv.y / dr2
 *     central.y = determinant * dv.x / dr2             # <<<<<<<<<<<<<<
 *     central = r2_add(circle.center, central)
 *     #cdef _R2 central = r2_add(circle.center, _R2(
 */
  __pyx_t_4 = (__pyx_v_determinant * __pyx_v_dv.x);
  if (unlikely(__pyx_v_dr2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(9, 139, __pyx_L1_error)
  }
  __pyx_v_central.y = (__pyx_t_4 / __pyx_v_dr2);

  /* "cycart/native/intersect.pxd":140
 *     central.x = determinant * dv.y / dr2
 *     central.y = determinant * dv.x / dr2
 *     central = r2_add(circle.center, central)             # <<<<<<<<<<<<<<
 *     #cdef _R2 central = r2_add(circle.center, _R2(
 *     #    determinant * dv.y / dr2,
 */
  __pyx_v_central = __pyx_f_6cycart_6native_5space_r2_add(__pyx_v_circle.center, __pyx_v_central);

  /* "cycart/native/intersect.pxd":146
 *     #))
 * 
 *     if descriminant == 0:             # <<<<<<<<<<<<<<
 *         out.push_back(central)
 *         return True
 */
  __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_descriminant, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "cycart/native/intersect.pxd":147
 * 
 *     if descriminant == 0:
 *         out.push_back(central)             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    try {
      __pyx_v_out.push_back(__pyx_v_central);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(9, 147, __pyx_L1_error)
    }

    /* "cycart/native/intersect.pxd":148
 *     if descriminant == 0:
 *         out.push_back(central)
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef double sqrt_desc = sqrt(descriminant)
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":146
 *     #))
 * 
 *     if descriminant == 0:             # <<<<<<<<<<<<<<
 *         out.push_back(central)
 *         return True
 */
  }

  /* "cycart/native/intersect.pxd":150
 *         return True
 * 
 *     cdef double sqrt_desc = sqrt(descriminant)             # <<<<<<<<<<<<<<
 *     cdef double sign_y = -1 if dv.y < 0 else 1
 *     cdef _R2 offset
 */
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_descriminant); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 150, __pyx_L1_error)
  __pyx_v_sqrt_desc = sqrt(__pyx_t_4);

  /* "cycart/native/intersect.pxd":151
 * 
 *     cdef double sqrt_desc = sqrt(descriminant)
 *     cdef double sign_y = -1 if dv.y < 0 else 1             # <<<<<<<<<<<<<<
 *     cdef _R2 offset
 *     offset.x = sign_y * dv.x * sqrt_desc / dr2
 */
  if (((__pyx_v_dv.y < 0.0) != 0)) {
    __pyx_t_4 = -1.0;
  } else {
    __pyx_t_4 = 1.0;
  }
  __pyx_v_sign_y = __pyx_t_4;

  /* "cycart/native/intersect.pxd":153
 *     cdef double sign_y = -1 if dv.y < 0 else 1
 *     cdef _R2 offset
 *     offset.x = sign_y * dv.x * sqrt_desc / dr2             # <<<<<<<<<<<<<<
 *     offset.y = fabs(dv.y) * sqrt_desc / dr2
 * 
 */
  __pyx_t_4 = ((__pyx_v_sign_y * __pyx_v_dv.x) * __pyx_v_sqrt_desc);
  if (unlikely(__pyx_v_dr2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(9, 153, __pyx_L1_error)
  }
  __pyx_v_offset.x = (__pyx_t_4 / __pyx_v_dr2);

  /* "cycart/native/intersect.pxd":154
 *     cdef _R2 offset
 *     offset.x = sign_y * dv.x * sqrt_desc / dr2
 *     offset.y = fabs(dv.y) * sqrt_desc / dr2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (fabs(__pyx_v_dv.y) * __pyx_v_sqrt_desc);
  if (unlikely(__pyx_v_dr2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(9, 154, __pyx_L1_error)
  }
  __pyx_v_offset.y = (__pyx_t_4 / __pyx_v_dr2);

  /* "cycart/native/intersect.pxd":157
 * 
 * 
 *     out.push_back(r2_add(central, offset))             # <<<<<<<<<<<<<<
 *     out.push_back(r2_sub(central, offset))
 *     return True
 */
  try {
    __pyx_v_out.push_back(__pyx_f_6cycart_6native_5space_r2_add(__pyx_v_central, __pyx_v_offset));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(9, 157, __pyx_L1_error)
  }

  /* "cycart/native/intersect.pxd":158
 * 
 *     out.push_back(r2_add(central, offset))
 *     out.push_back(r2_sub(central, offset))             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  try {
    __pyx_v_out.push_back(__pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_central, __pyx_v_offset));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(9, 158, __pyx_L1_error)
  }

  /* "cycart/native/intersect.pxd":159
 *     out.push_back(r2_add(central, offset))
 *     out.push_back(r2_sub(central, offset))
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/native/intersect.pxd":114
 *     return True
 * 
 * cdef inline bint l2_c2_intersect_set(vector[_R2]& out, const _Line& line, const _Circle circle):             # <<<<<<<<<<<<<<
 *     cdef _Line line00
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cycart.native.intersect.l2_c2_intersect_set", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_descriminant);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/intersect.pxd":164
 * 
 * 
 * cdef inline bint l2_l2_intersect(_R2& out, const _Line& l1, const _Line& l2):             # <<<<<<<<<<<<<<
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 *     if det == 0:
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_l2_l2_intersect(struct __pyx_t_6cycart_6native_6dtypes__R2 &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_l1, struct __pyx_t_6cycart_6native_6dtypes__Line const &__pyx_v_l2) {
  PyObject *__pyx_v_det = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("l2_l2_intersect", 0);

  /* "cycart/native/intersect.pxd":165
 * 
 * cdef inline bint l2_l2_intersect(_R2& out, const _Line& l1, const _Line& l2):
 *     cdef det = l1.a * l2.b - l1.b * l2.a             # <<<<<<<<<<<<<<
 *     if det == 0:
 *         return False
 */
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_l1.a * __pyx_v_l2.b) - (__pyx_v_l1.b * __pyx_v_l2.a))); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_det = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cycart/native/intersect.pxd":166
 * cdef inline bint l2_l2_intersect(_R2& out, const _Line& l1, const _Line& l2):
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 *     if det == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_det, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "cycart/native/intersect.pxd":167
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 *     if det == 0:
 *         return False             # <<<<<<<<<<<<<<
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det
 *     out.y = (l1.a * l2.c - l2.a * l1.c) / det
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":166
 * cdef inline bint l2_l2_intersect(_R2& out, const _Line& l1, const _Line& l2):
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 *     if det == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det
 */
  }

  /* "cycart/native/intersect.pxd":168
 *     if det == 0:
 *         return False
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det             # <<<<<<<<<<<<<<
 *     out.y = (l1.a * l2.c - l2.a * l1.c) / det
 *     return True
 */
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_l2.b * __pyx_v_l1.c) - (__pyx_v_l1.b * __pyx_v_l2.c))); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_det); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_out.x = __pyx_t_4;

  /* "cycart/native/intersect.pxd":169
 *         return False
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det
 *     out.y = (l1.a * l2.c - l2.a * l1.c) / det             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_l1.a * __pyx_v_l2.c) - (__pyx_v_l2.a * __pyx_v_l1.c))); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_det); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out.y = __pyx_t_4;

  /* "cycart/native/intersect.pxd":170
 *     out.x = (l2.b * l1.c - l1.b * l2.c) / det
 *     out.y = (l1.a * l2.c - l2.a * l1.c) / det
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint ls2_ls2_intersect(_R2& out, const _LineSegment ls1, const _LineSegment& ls2):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cycart/native/intersect.pxd":164
 * 
 * 
 * cdef inline bint l2_l2_intersect(_R2& out, const _Line& l1, const _Line& l2):             # <<<<<<<<<<<<<<
 *     cdef det = l1.a * l2.b - l1.b * l2.a
 *     if det == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cycart.native.intersect.l2_l2_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_det);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/native/intersect.pxd":172
 *     return True
 * 
 * cdef inline bint ls2_ls2_intersect(_R2& out, const _LineSegment ls1, const _LineSegment& ls2):             # <<<<<<<<<<<<<<
 *     cdef _R2 v1 = ls2_vector(ls1)
 *     cdef _R2 v2 = ls2_vector(ls2)
 */

static CYTHON_INLINE int __pyx_f_6cycart_6native_9intersect_ls2_ls2_intersect(struct __pyx_t_6cycart_6native_6dtypes__R2 &__pyx_v_out, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const __pyx_v_ls1, struct __pyx_t_6cycart_6native_6dtypes__LineSegment const &__pyx_v_ls2) {
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_v1;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_v2;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_perp1;
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_v_diff;
  double __pyx_v_divisor;
  double __pyx_v_t;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_6cycart_6native_6dtypes__R2 __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("ls2_ls2_intersect", 0);

  /* "cycart/native/intersect.pxd":173
 * 
 * cdef inline bint ls2_ls2_intersect(_R2& out, const _LineSegment ls1, const _LineSegment& ls2):
 *     cdef _R2 v1 = ls2_vector(ls1)             # <<<<<<<<<<<<<<
 *     cdef _R2 v2 = ls2_vector(ls2)
 *     cdef _R2 perp1 = _R2(-v1.y, v1.x)
 */
  __pyx_v_v1 = __pyx_f_6cycart_6native_7segment_ls2_vector(__pyx_v_ls1);

  /* "cycart/native/intersect.pxd":174
 * cdef inline bint ls2_ls2_intersect(_R2& out, const _LineSegment ls1, const _LineSegment& ls2):
 *     cdef _R2 v1 = ls2_vector(ls1)
 *     cdef _R2 v2 = ls2_vector(ls2)             # <<<<<<<<<<<<<<
 *     cdef _R2 perp1 = _R2(-v1.y, v1.x)
 *     cdef _R2 diff = r2_sub(ls1.p1, ls2.p1)
 */
  __pyx_v_v2 = __pyx_f_6cycart_6native_7segment_ls2_vector(__pyx_v_ls2);

  /* "cycart/native/intersect.pxd":175
 *     cdef _R2 v1 = ls2_vector(ls1)
 *     cdef _R2 v2 = ls2_vector(ls2)
 *     cdef _R2 perp1 = _R2(-v1.y, v1.x)             # <<<<<<<<<<<<<<
 *     cdef _R2 diff = r2_sub(ls1.p1, ls2.p1)
 *     cdef double divisor = r2_dot(v2, perp1)
 */
  __pyx_t_1.x = (-__pyx_v_v1.y);
  __pyx_t_1.y = __pyx_v_v1.x;
  __pyx_v_perp1 = __pyx_t_1;

  /* "cycart/native/intersect.pxd":176
 *     cdef _R2 v2 = ls2_vector(ls2)
 *     cdef _R2 perp1 = _R2(-v1.y, v1.x)
 *     cdef _R2 diff = r2_sub(ls1.p1, ls2.p1)             # <<<<<<<<<<<<<<
 *     cdef double divisor = r2_dot(v2, perp1)
 *     if divisor == 0:
 */
  __pyx_v_diff = __pyx_f_6cycart_6native_5space_r2_sub(__pyx_v_ls1.p1, __pyx_v_ls2.p1);

  /* "cycart/native/intersect.pxd":177
 *     cdef _R2 perp1 = _R2(-v1.y, v1.x)
 *     cdef _R2 diff = r2_sub(ls1.p1, ls2.p1)
 *     cdef double divisor = r2_dot(v2, perp1)             # <<<<<<<<<<<<<<
 *     if divisor == 0:
 *         return False
 */
  __pyx_v_divisor = __pyx_f_6cycart_6native_5space_r2_dot(__pyx_v_v2, __pyx_v_perp1);

  /* "cycart/native/intersect.pxd":178
 *     cdef _R2 diff = r2_sub(ls1.p1, ls2.p1)
 *     cdef double divisor = r2_dot(v2, perp1)
 *     if divisor == 0:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_2 = ((__pyx_v_divisor == 0.0) != 0);
  if (__pyx_t_2) {

    /* "cycart/native/intersect.pxd":179
 *     cdef double divisor = r2_dot(v2, perp1)
 *     if divisor == 0:
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cdef double t = r2_dot(diff, perp1) / divisor
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":178
 *     cdef _R2 diff = r2_sub(ls1.p1, ls2.p1)
 *     cdef double divisor = r2_dot(v2, perp1)
 *     if divisor == 0:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "cycart/native/intersect.pxd":181
 *         return False
 * 
 *     cdef double t = r2_dot(diff, perp1) / divisor             # <<<<<<<<<<<<<<
 *     if 0 <= t <= 1:
 *         (&out)[0] = r2_add(ls2.p1, r2_mul(v2, t))
 */
  __pyx_t_3 = __pyx_f_6cycart_6native_5space_r2_dot(__pyx_v_diff, __pyx_v_perp1);
  if (unlikely(__pyx_v_divisor == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(9, 181, __pyx_L1_error)
  }
  __pyx_v_t = (__pyx_t_3 / __pyx_v_divisor);

  /* "cycart/native/intersect.pxd":182
 * 
 *     cdef double t = r2_dot(diff, perp1) / divisor
 *     if 0 <= t <= 1:             # <<<<<<<<<<<<<<
 *         (&out)[0] = r2_add(ls2.p1, r2_mul(v2, t))
 *         return True
 */
  __pyx_t_2 = (0.0 <= __pyx_v_t);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_t <= 1.0);
  }
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "cycart/native/intersect.pxd":183
 *     cdef double t = r2_dot(diff, perp1) / divisor
 *     if 0 <= t <= 1:
 *         (&out)[0] = r2_add(ls2.p1, r2_mul(v2, t))             # <<<<<<<<<<<<<<
 *         return True
 *     return False
 */
    ((&__pyx_v_out)[0]) = __pyx_f_6cycart_6native_5space_r2_add(__pyx_v_ls2.p1, __pyx_f_6cycart_6native_5space_r2_mul(__pyx_v_v2, __pyx_v_t));

    /* "cycart/native/intersect.pxd":184
 *     if 0 <= t <= 1:
 *         (&out)[0] = r2_add(ls2.p1, r2_mul(v2, t))
 *         return True             # <<<<<<<<<<<<<<
 *     return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cycart/native/intersect.pxd":182
 * 
 *     cdef double t = r2_dot(diff, perp1) / divisor
 *     if 0 <= t <= 1:             # <<<<<<<<<<<<<<
 *         (&out)[0] = r2_add(ls2.p1, r2_mul(v2, t))
 *         return True
 */
  }

  /* "cycart/native/intersect.pxd":185
 *         (&out)[0] = r2_add(ls2.p1, r2_mul(v2, t))
 *         return True
 *     return False             # <<<<<<<<<<<<<<
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "cycart/native/intersect.pxd":172
 *     return True
 * 
 * cdef inline bint ls2_ls2_intersect(_R2& out, const _LineSegment ls1, const _LineSegment& ls2):             # <<<<<<<<<<<<<<
 *     cdef _R2 v1 = ls2_vector(ls1)
 *     cdef _R2 v2 = ls2_vector(ls2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cycart.native.intersect.ls2_ls2_intersect", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/circle.pxd":6
 *     cdef _Circle data
 * 
 * cdef inline Circle py_circle_new(_Circle data):             # <<<<<<<<<<<<<<
 *     cdef Circle circle = Circle.__new__(Circle)
 *     circle.data = data
 */

static CYTHON_INLINE struct __pyx_obj_6cycart_6circle_Circle *__pyx_f_6cycart_6circle_py_circle_new(struct __pyx_t_6cycart_6native_6dtypes__Circle __pyx_v_data) {
  struct __pyx_obj_6cycart_6circle_Circle *__pyx_v_circle = 0;
  struct __pyx_obj_6cycart_6circle_Circle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_circle_new", 0);

  /* "cycart/circle.pxd":7
 * 
 * cdef inline Circle py_circle_new(_Circle data):
 *     cdef Circle circle = Circle.__new__(Circle)             # <<<<<<<<<<<<<<
 *     circle.data = data
 *     return circle
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_6cycart_6circle_Circle), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6cycart_6circle_Circle)))) __PYX_ERR(10, 7, __pyx_L1_error)
  __pyx_v_circle = ((struct __pyx_obj_6cycart_6circle_Circle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cycart/circle.pxd":8
 * cdef inline Circle py_circle_new(_Circle data):
 *     cdef Circle circle = Circle.__new__(Circle)
 *     circle.data = data             # <<<<<<<<<<<<<<
 *     return circle
 */
  __pyx_v_circle->data = __pyx_v_data;

  /* "cycart/circle.pxd":9
 *     cdef Circle circle = Circle.__new__(Circle)
 *     circle.data = data
 *     return circle             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_circle));
  __pyx_r = __pyx_v_circle;
  goto __pyx_L0;

  /* "cycart/circle.pxd":6
 *     cdef _Circle data
 * 
 * cdef inline Circle py_circle_new(_Circle data):             # <<<<<<<<<<<<<<
 *     cdef Circle circle = Circle.__new__(Circle)
 *     circle.data = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.circle.py_circle_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_circle);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/line.pxd":6
 *     cdef _Line data
 * 
 * cdef inline Line py_line_new(_Line data):             # <<<<<<<<<<<<<<
 *     cdef Line line = Line.__new__(Line)
 *     line.data = data
 */

static CYTHON_INLINE struct __pyx_obj_6cycart_4line_Line *__pyx_f_6cycart_4line_py_line_new(struct __pyx_t_6cycart_6native_6dtypes__Line __pyx_v_data) {
  struct __pyx_obj_6cycart_4line_Line *__pyx_v_line = 0;
  struct __pyx_obj_6cycart_4line_Line *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_line_new", 0);

  /* "cycart/line.pxd":7
 * 
 * cdef inline Line py_line_new(_Line data):
 *     cdef Line line = Line.__new__(Line)             # <<<<<<<<<<<<<<
 *     line.data = data
 *     return line
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_6cycart_4line_Line), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6cycart_4line_Line)))) __PYX_ERR(11, 7, __pyx_L1_error)
  __pyx_v_line = ((struct __pyx_obj_6cycart_4line_Line *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cycart/line.pxd":8
 * cdef inline Line py_line_new(_Line data):
 *     cdef Line line = Line.__new__(Line)
 *     line.data = data             # <<<<<<<<<<<<<<
 *     return line
 */
  __pyx_v_line->data = __pyx_v_data;

  /* "cycart/line.pxd":9
 *     cdef Line line = Line.__new__(Line)
 *     line.data = data
 *     return line             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_line));
  __pyx_r = __pyx_v_line;
  goto __pyx_L0;

  /* "cycart/line.pxd":6
 *     cdef _Line data
 * 
 * cdef inline Line py_line_new(_Line data):             # <<<<<<<<<<<<<<
 *     cdef Line line = Line.__new__(Line)
 *     line.data = data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.line.py_line_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_line);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cycart/segment.pxd":6
 *     cdef _LineSegment data
 * 
 * cdef inline LineSegment py_seg_new(_LineSegment segment):             # <<<<<<<<<<<<<<
 *     cdef LineSegment py_seg = LineSegment.__new__(LineSegment)
 *     py_seg.data = segment
 */

static CYTHON_INLINE struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_f_6cycart_7segment_py_seg_new(struct __pyx_t_6cycart_6native_6dtypes__LineSegment __pyx_v_segment) {
  struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_v_py_seg = 0;
  struct __pyx_obj_6cycart_7segment_LineSegment *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_seg_new", 0);

  /* "cycart/segment.pxd":7
 * 
 * cdef inline LineSegment py_seg_new(_LineSegment segment):
 *     cdef LineSegment py_seg = LineSegment.__new__(LineSegment)             # <<<<<<<<<<<<<<
 *     py_seg.data = segment
 *     return py_seg
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6cycart_7segment_LineSegment)))) __PYX_ERR(12, 7, __pyx_L1_error)
  __pyx_v_py_seg = ((struct __pyx_obj_6cycart_7segment_LineSegment *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cycart/segment.pxd":8
 * cdef inline LineSegment py_seg_new(_LineSegment segment):
 *     cdef LineSegment py_seg = LineSegment.__new__(LineSegment)
 *     py_seg.data = segment             # <<<<<<<<<<<<<<
 *     return py_seg
 */
  __pyx_v_py_seg->data = __pyx_v_segment;

  /* "cycart/segment.pxd":9
 *     cdef LineSegment py_seg = LineSegment.__new__(LineSegment)
 *     py_seg.data = segment
 *     return py_seg             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_py_seg));
  __pyx_r = __pyx_v_py_seg;
  goto __pyx_L0;

  /* "cycart/segment.pxd":6
 *     cdef _LineSegment data
 * 
 * cdef inline LineSegment py_seg_new(_LineSegment segment):             # <<<<<<<<<<<<<<
 *     cdef LineSegment py_seg = LineSegment.__new__(LineSegment)
 *     py_seg.data = segment
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cycart.segment.py_seg_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_seg);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_intersect(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_intersect},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "intersect",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Circle, __pyx_k_Circle, sizeof(__pyx_k_Circle), 0, 0, 1, 1},
  {&__pyx_n_s_Dispatcher, __pyx_k_Dispatcher, sizeof(__pyx_k_Dispatcher), 0, 0, 1, 1},
  {&__pyx_n_s_Line, __pyx_k_Line, sizeof(__pyx_k_Line), 0, 0, 1, 1},
  {&__pyx_n_s_LineSegment, __pyx_k_LineSegment, sizeof(__pyx_k_LineSegment), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_c1, __pyx_k_c1, sizeof(__pyx_k_c1), 0, 0, 1, 1},
  {&__pyx_n_s_c2, __pyx_k_c2, sizeof(__pyx_k_c2), 0, 0, 1, 1},
  {&__pyx_n_s_center, __pyx_k_center, sizeof(__pyx_k_center), 0, 0, 1, 1},
  {&__pyx_n_s_circle, __pyx_k_circle, sizeof(__pyx_k_circle), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_collect, __pyx_k_collect, sizeof(__pyx_k_collect), 0, 0, 1, 1},
  {&__pyx_n_s_cycart_circle, __pyx_k_cycart_circle, sizeof(__pyx_k_cycart_circle), 0, 0, 1, 1},
  {&__pyx_n_s_cycart_intersect, __pyx_k_cycart_intersect, sizeof(__pyx_k_cycart_intersect), 0, 0, 1, 1},
  {&__pyx_kp_s_cycart_intersect_pyx, __pyx_k_cycart_intersect_pyx, sizeof(__pyx_k_cycart_intersect_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_cycart_line, __pyx_k_cycart_line, sizeof(__pyx_k_cycart_line), 0, 0, 1, 1},
  {&__pyx_n_s_cycart_segment, __pyx_k_cycart_segment, sizeof(__pyx_k_cycart_segment), 0, 0, 1, 1},
  {&__pyx_n_s_dispatcher, __pyx_k_dispatcher, sizeof(__pyx_k_dispatcher), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_intersect, __pyx_k_intersect, sizeof(__pyx_k_intersect), 0, 0, 1, 1},
  {&__pyx_n_s_l1, __pyx_k_l1, sizeof(__pyx_k_l1), 0, 0, 1, 1},
  {&__pyx_n_s_l2, __pyx_k_l2, sizeof(__pyx_k_l2), 0, 0, 1, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_ls1, __pyx_k_ls1, sizeof(__pyx_k_ls1), 0, 0, 1, 1},
  {&__pyx_n_s_ls2, __pyx_k_ls2, sizeof(__pyx_k_ls2), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_multipledispatch, __pyx_k_multipledispatch, sizeof(__pyx_k_multipledispatch), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_p1, __pyx_k_p1, sizeof(__pyx_k_p1), 0, 0, 1, 1},
  {&__pyx_n_s_p2, __pyx_k_p2, sizeof(__pyx_k_p2), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_seg, __pyx_k_seg, sizeof(__pyx_k_seg), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 24, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cycart/intersect.pyx":18
 * from multipledispatch import Dispatcher
 * 
 * dispatcher = Dispatcher("intersect")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_n_s_intersect); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "cycart/intersect.pyx":21
 * 
 * 
 * def intersect(Line l1 not None, Line l2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.l2_l2_intersect_set(collect, l1.data, l2.data):
 */
  __pyx_tuple__2 = PyTuple_Pack(3, __pyx_n_s_l1, __pyx_n_s_l2, __pyx_n_s_collect); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cycart_intersect_pyx, __pyx_n_s_intersect, 21, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 21, __pyx_L1_error)

  /* "cycart/intersect.pyx":28
 * dispatcher.add((Line, Line), intersect)
 * 
 * def intersect(LineSegment ls1 not None, LineSegment ls2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.ls2_ls2_intersect_set(collect, ls1.data, ls2.data):
 */
  __pyx_tuple__4 = PyTuple_Pack(3, __pyx_n_s_ls1, __pyx_n_s_ls2, __pyx_n_s_collect); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cycart_intersect_pyx, __pyx_n_s_intersect, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 28, __pyx_L1_error)

  /* "cycart/intersect.pyx":35
 * dispatcher.add((LineSegment, LineSegment), intersect)
 * 
 * def intersect(Circle c1 not None, Circle c2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.c2_c2_intersect_set(collect, c1.data, c2.data):
 */
  __pyx_tuple__6 = PyTuple_Pack(3, __pyx_n_s_c1, __pyx_n_s_c2, __pyx_n_s_collect); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cycart_intersect_pyx, __pyx_n_s_intersect, 35, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 35, __pyx_L1_error)

  /* "cycart/intersect.pyx":42
 * dispatcher.add((Circle, Circle), intersect)
 * 
 * def intersect(Line line not None, LineSegment seg not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_l2_intersect(seg, line)
 * dispatcher.add((Line, LineSegment), intersect)
 */
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_n_s_line, __pyx_n_s_seg); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cycart_intersect_pyx, __pyx_n_s_intersect, 42, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 42, __pyx_L1_error)

  /* "cycart/intersect.pyx":46
 * dispatcher.add((Line, LineSegment), intersect)
 * 
 * def intersect(LineSegment seg not None, Line line not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_l2_intersect(seg, line)
 * dispatcher.add((LineSegment, Line), intersect)
 */
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_n_s_seg, __pyx_n_s_line); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cycart_intersect_pyx, __pyx_n_s_intersect, 46, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 46, __pyx_L1_error)

  /* "cycart/intersect.pyx":50
 * dispatcher.add((LineSegment, Line), intersect)
 * 
 * def intersect(LineSegment seg not None, Circle circle not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_c2_intersect(seg, circle)
 * dispatcher.add((LineSegment, Circle), intersect)
 */
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_n_s_seg, __pyx_n_s_circle); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cycart_intersect_pyx, __pyx_n_s_intersect, 50, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 50, __pyx_L1_error)

  /* "cycart/intersect.pyx":54
 * dispatcher.add((LineSegment, Circle), intersect)
 * 
 * def intersect(Circle circle not None, LineSegment seg not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_c2_intersect(seg, circle)
 * dispatcher.add((Circle, LineSegment), intersect)
 */
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_n_s_circle, __pyx_n_s_seg); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cycart_intersect_pyx, __pyx_n_s_intersect, 54, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 54, __pyx_L1_error)

  /* "cycart/intersect.pyx":58
 * dispatcher.add((Circle, LineSegment), intersect)
 * 
 * def intersect(Line line not None, Circle circle not None):             # <<<<<<<<<<<<<<
 *     return py_l2_c2_intersect(line, circle)
 * dispatcher.add((Line, Circle), intersect)
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_n_s_line, __pyx_n_s_circle); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cycart_intersect_pyx, __pyx_n_s_intersect, 58, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 58, __pyx_L1_error)

  /* "cycart/intersect.pyx":62
 * dispatcher.add((Line, Circle), intersect)
 * 
 * def intersect(Circle circle not None, Line line not None):             # <<<<<<<<<<<<<<
 *     return py_l2_c2_intersect(line, circle)
 * dispatcher.add((Circle, Line), intersect)
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_s_circle, __pyx_n_s_line); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cycart_intersect_pyx, __pyx_n_s_intersect, 62, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_1eneg_9 = PyFloat_FromDouble(1e-9); if (unlikely(!__pyx_float_1eneg_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cycart.space"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6cycart_5space_R2 = __Pyx_ImportType(__pyx_t_1, "cycart.space", "R2", sizeof(struct __pyx_obj_6cycart_5space_R2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6cycart_5space_R2) __PYX_ERR(3, 3, __pyx_L1_error)
  __pyx_ptype_6cycart_5space_V2 = __Pyx_ImportType(__pyx_t_1, "cycart.space", "V2", sizeof(struct __pyx_obj_6cycart_5space_V2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6cycart_5space_V2) __PYX_ERR(3, 6, __pyx_L1_error)
  __pyx_vtabptr_6cycart_5space_V2 = (struct __pyx_vtabstruct_6cycart_5space_V2*)__Pyx_GetVtable(__pyx_ptype_6cycart_5space_V2->tp_dict); if (unlikely(!__pyx_vtabptr_6cycart_5space_V2)) __PYX_ERR(3, 6, __pyx_L1_error)
  __pyx_ptype_6cycart_5space_P2 = __Pyx_ImportType(__pyx_t_1, "cycart.space", "P2", sizeof(struct __pyx_obj_6cycart_5space_P2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6cycart_5space_P2) __PYX_ERR(3, 10, __pyx_L1_error)
  __pyx_vtabptr_6cycart_5space_P2 = (struct __pyx_vtabstruct_6cycart_5space_P2*)__Pyx_GetVtable(__pyx_ptype_6cycart_5space_P2->tp_dict); if (unlikely(!__pyx_vtabptr_6cycart_5space_P2)) __PYX_ERR(3, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cycart.circle"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6cycart_6circle_Circle = __Pyx_ImportType(__pyx_t_1, "cycart.circle", "Circle", sizeof(struct __pyx_obj_6cycart_6circle_Circle), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6cycart_6circle_Circle) __PYX_ERR(10, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cycart.line"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6cycart_4line_Line = __Pyx_ImportType(__pyx_t_1, "cycart.line", "Line", sizeof(struct __pyx_obj_6cycart_4line_Line), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6cycart_4line_Line) __PYX_ERR(11, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cycart.segment"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6cycart_7segment_LineSegment = __Pyx_ImportType(__pyx_t_1, "cycart.segment", "LineSegment", sizeof(struct __pyx_obj_6cycart_7segment_LineSegment), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6cycart_7segment_LineSegment) __PYX_ERR(12, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initintersect(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initintersect(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_intersect(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_intersect(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_intersect(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'intersect' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_intersect(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("intersect", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cycart__intersect) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cycart.intersect")) {
      if (unlikely(PyDict_SetItemString(modules, "cycart.intersect", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cycart/intersect.pyx":8
 * 
 * from cycart.circle cimport Circle
 * from cycart.circle import Circle             # <<<<<<<<<<<<<<
 * 
 * from cycart.line cimport Line
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Circle);
  __Pyx_GIVEREF(__pyx_n_s_Circle);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Circle);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cycart_circle, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cycart/intersect.pyx":11
 * 
 * from cycart.line cimport Line
 * from cycart.line import Line             # <<<<<<<<<<<<<<
 * 
 * from cycart.segment cimport LineSegment
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Line);
  __Pyx_GIVEREF(__pyx_n_s_Line);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Line);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_cycart_line, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cycart/intersect.pyx":14
 * 
 * from cycart.segment cimport LineSegment
 * from cycart.segment import LineSegment             # <<<<<<<<<<<<<<
 * 
 * from multipledispatch import Dispatcher
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LineSegment);
  __Pyx_GIVEREF(__pyx_n_s_LineSegment);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LineSegment);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cycart_segment, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cycart/intersect.pyx":16
 * from cycart.segment import LineSegment
 * 
 * from multipledispatch import Dispatcher             # <<<<<<<<<<<<<<
 * 
 * dispatcher = Dispatcher("intersect")
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Dispatcher);
  __Pyx_GIVEREF(__pyx_n_s_Dispatcher);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Dispatcher);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_multipledispatch, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Dispatcher); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Dispatcher, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cycart/intersect.pyx":18
 * from multipledispatch import Dispatcher
 * 
 * dispatcher = Dispatcher("intersect")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Dispatcher); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dispatcher, __pyx_t_2) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cycart/intersect.pyx":21
 * 
 * 
 * def intersect(Line l1 not None, Line l2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.l2_l2_intersect_set(collect, l1.data, l2.data):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6cycart_9intersect_1intersect, NULL, __pyx_n_s_cycart_intersect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cycart/intersect.pyx":26
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 * dispatcher.add((Line, Line), intersect)             # <<<<<<<<<<<<<<
 * 
 * def intersect(LineSegment ls1 not None, LineSegment ls2 not None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_dispatcher); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_intersect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cycart/intersect.pyx":28
 * dispatcher.add((Line, Line), intersect)
 * 
 * def intersect(LineSegment ls1 not None, LineSegment ls2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.ls2_ls2_intersect_set(collect, ls1.data, ls2.data):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6cycart_9intersect_3intersect, NULL, __pyx_n_s_cycart_intersect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_3) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cycart/intersect.pyx":33
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 * dispatcher.add((LineSegment, LineSegment), intersect)             # <<<<<<<<<<<<<<
 * 
 * def intersect(Circle c1 not None, Circle c2 not None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_dispatcher); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_intersect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cycart/intersect.pyx":35
 * dispatcher.add((LineSegment, LineSegment), intersect)
 * 
 * def intersect(Circle c1 not None, Circle c2 not None):             # <<<<<<<<<<<<<<
 *     cdef vector[_R2] collect
 *     if not cni.c2_c2_intersect_set(collect, c1.data, c2.data):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6cycart_9intersect_5intersect, NULL, __pyx_n_s_cycart_intersect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_1) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cycart/intersect.pyx":40
 *         raise ValueError()
 *     return py_p2_set_new(collect)
 * dispatcher.add((Circle, Circle), intersect)             # <<<<<<<<<<<<<<
 * 
 * def intersect(Line line not None, LineSegment seg not None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_dispatcher); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_add); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_intersect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cycart/intersect.pyx":42
 * dispatcher.add((Circle, Circle), intersect)
 * 
 * def intersect(Line line not None, LineSegment seg not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_l2_intersect(seg, line)
 * dispatcher.add((Line, LineSegment), intersect)
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_6cycart_9intersect_7intersect, NULL, __pyx_n_s_cycart_intersect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_4) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cycart/intersect.pyx":44
 * def intersect(Line line not None, LineSegment seg not None):
 *     return py_ls2_l2_intersect(seg, line)
 * dispatcher.add((Line, LineSegment), intersect)             # <<<<<<<<<<<<<<
 * 
 * def intersect(LineSegment seg not None, Line line not None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_dispatcher); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_add); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_intersect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cycart/intersect.pyx":46
 * dispatcher.add((Line, LineSegment), intersect)
 * 
 * def intersect(LineSegment seg not None, Line line not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_l2_intersect(seg, line)
 * dispatcher.add((LineSegment, Line), intersect)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6cycart_9intersect_9intersect, NULL, __pyx_n_s_cycart_intersect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_2) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cycart/intersect.pyx":48
 * def intersect(LineSegment seg not None, Line line not None):
 *     return py_ls2_l2_intersect(seg, line)
 * dispatcher.add((LineSegment, Line), intersect)             # <<<<<<<<<<<<<<
 * 
 * def intersect(LineSegment seg not None, Circle circle not None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_dispatcher); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_intersect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cycart/intersect.pyx":50
 * dispatcher.add((LineSegment, Line), intersect)
 * 
 * def intersect(LineSegment seg not None, Circle circle not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_c2_intersect(seg, circle)
 * dispatcher.add((LineSegment, Circle), intersect)
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6cycart_9intersect_11intersect, NULL, __pyx_n_s_cycart_intersect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_3) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cycart/intersect.pyx":52
 * def intersect(LineSegment seg not None, Circle circle not None):
 *     return py_ls2_c2_intersect(seg, circle)
 * dispatcher.add((LineSegment, Circle), intersect)             # <<<<<<<<<<<<<<
 * 
 * def intersect(Circle circle not None, LineSegment seg not None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_dispatcher); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_intersect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cycart/intersect.pyx":54
 * dispatcher.add((LineSegment, Circle), intersect)
 * 
 * def intersect(Circle circle not None, LineSegment seg not None):             # <<<<<<<<<<<<<<
 *     return py_ls2_c2_intersect(seg, circle)
 * dispatcher.add((Circle, LineSegment), intersect)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6cycart_9intersect_13intersect, NULL, __pyx_n_s_cycart_intersect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_1) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cycart/intersect.pyx":56
 * def intersect(Circle circle not None, LineSegment seg not None):
 *     return py_ls2_c2_intersect(seg, circle)
 * dispatcher.add((Circle, LineSegment), intersect)             # <<<<<<<<<<<<<<
 * 
 * def intersect(Line line not None, Circle circle not None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_dispatcher); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_add); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_ptype_6cycart_7segment_LineSegment));
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_intersect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cycart/intersect.pyx":58
 * dispatcher.add((Circle, LineSegment), intersect)
 * 
 * def intersect(Line line not None, Circle circle not None):             # <<<<<<<<<<<<<<
 *     return py_l2_c2_intersect(line, circle)
 * dispatcher.add((Line, Circle), intersect)
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_6cycart_9intersect_15intersect, NULL, __pyx_n_s_cycart_intersect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_4) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cycart/intersect.pyx":60
 * def intersect(Line line not None, Circle circle not None):
 *     return py_l2_c2_intersect(line, circle)
 * dispatcher.add((Line, Circle), intersect)             # <<<<<<<<<<<<<<
 * 
 * def intersect(Circle circle not None, Line line not None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_dispatcher); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_add); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_intersect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cycart/intersect.pyx":62
 * dispatcher.add((Line, Circle), intersect)
 * 
 * def intersect(Circle circle not None, Line line not None):             # <<<<<<<<<<<<<<
 *     return py_l2_c2_intersect(line, circle)
 * dispatcher.add((Circle, Line), intersect)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6cycart_9intersect_17intersect, NULL, __pyx_n_s_cycart_intersect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_2) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cycart/intersect.pyx":64
 * def intersect(Circle circle not None, Line line not None):
 *     return py_l2_c2_intersect(line, circle)
 * dispatcher.add((Circle, Line), intersect)             # <<<<<<<<<<<<<<
 * 
 * intersect = dispatcher
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_dispatcher); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6cycart_6circle_Circle));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6cycart_4line_Line));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_ptype_6cycart_4line_Line));
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_intersect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cycart/intersect.pyx":66
 * dispatcher.add((Circle, Line), intersect)
 * 
 * intersect = dispatcher             # <<<<<<<<<<<<<<
 * 
 * """
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_dispatcher); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_3) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cycart/intersect.pyx":1
 * from libcpp.vector cimport vector             # <<<<<<<<<<<<<<
 * 
 * cimport cycart.native.intersect as cni
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cycart/segment.pxd":6
 *     cdef _LineSegment data
 * 
 * cdef inline LineSegment py_seg_new(_LineSegment segment):             # <<<<<<<<<<<<<<
 *     cdef LineSegment py_seg = LineSegment.__new__(LineSegment)
 *     py_seg.data = segment
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cycart.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cycart.intersect");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject* __pyx_convert__to_py_struct____pyx_t_6cycart_6native_6dtypes__R2(struct __pyx_t_6cycart_6native_6dtypes__R2 s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(2); if (unlikely(!res)) return NULL;
  member = PyFloat_FromDouble(s.x); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_x, member) < 0)) goto bad;
  Py_DECREF(member);
  member = PyFloat_FromDouble(s.y); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_n_s_y, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE enum __pyx_t_6cycart_6native_14does_intersect_IRES __Pyx_PyInt_As_enum____pyx_t_6cycart_6native_14does_intersect_IRES(PyObject *x) {
    const enum __pyx_t_6cycart_6native_14does_intersect_IRES neg_one = (enum __pyx_t_6cycart_6native_14does_intersect_IRES) ((enum __pyx_t_6cycart_6native_14does_intersect_IRES) 0 - (enum __pyx_t_6cycart_6native_14does_intersect_IRES) 1), const_zero = (enum __pyx_t_6cycart_6native_14does_intersect_IRES) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) >= 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) (((((enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) >= 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) (((((((enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) >= 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) (((((((((enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_6cycart_6native_14does_intersect_IRES, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_6cycart_6native_14does_intersect_IRES, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) - 1 > 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) (((enum __pyx_t_6cycart_6native_14does_intersect_IRES)-1)*(((((enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) - 1 > 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) ((((((enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) - 1 > 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) (((enum __pyx_t_6cycart_6native_14does_intersect_IRES)-1)*(((((((enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) - 1 > 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) ((((((((enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) - 1 > 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) (((enum __pyx_t_6cycart_6native_14does_intersect_IRES)-1)*(((((((((enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_6cycart_6native_14does_intersect_IRES, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) - 1 > 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) ((((((((((enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_6cycart_6native_14does_intersect_IRES)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_6cycart_6native_14does_intersect_IRES, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum __pyx_t_6cycart_6native_14does_intersect_IRES) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_6cycart_6native_14does_intersect_IRES, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum __pyx_t_6cycart_6native_14does_intersect_IRES val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) -1;
        }
    } else {
        enum __pyx_t_6cycart_6native_14does_intersect_IRES val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) -1;
        val = __Pyx_PyInt_As_enum____pyx_t_6cycart_6native_14does_intersect_IRES(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum __pyx_t_6cycart_6native_14does_intersect_IRES");
    return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum __pyx_t_6cycart_6native_14does_intersect_IRES");
    return (enum __pyx_t_6cycart_6native_14does_intersect_IRES) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
